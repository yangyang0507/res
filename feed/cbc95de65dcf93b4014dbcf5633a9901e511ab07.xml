<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>几米宋</title>
    <link>https://dyang.top/res/feed/cbc95de65dcf93b4014dbcf5633a9901e511ab07.xml</link>
    <description>从云原生迈向 AI 原生——站在云原生与 AI 的交汇点，探索下一代智能化基础设施。&#xA;(wechat feed made by @ttttmr https://wechat2rss.xlab.app)</description>
    <managingEditor> (几米宋)</managingEditor>
    <image>
      <url>http://wx.qlogo.cn/mmhead/ZMdxSDafpxQic69wqHIlkd8p6libiaIMcic7cm8iciaEIBiaCYQnbhnefNLrAK0yWJSjmQtn9VPrlymXZU/0</url>
      <title>几米宋</title>
      <link>https://dyang.top/res/feed/cbc95de65dcf93b4014dbcf5633a9901e511ab07.xml</link>
    </image>
    <item>
      <title>从 YAML 到 Markdown：规范驱动开发的演化与 AI 原生范式的崛起</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171326&amp;idx=1&amp;sn=6efdc8a930b4e53d69169e55102b703c</link>
      <description>探索从 YAML 到 Markdown 的演变，揭示 AI 原生时代的规范驱动开发（SDD）如何重塑智能体的行为与协作方式。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-10-27 13:01</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=1ce0fe7a&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcOGNWE46JFsGx6QEnKvB8xQnwfFGtGRbobFHQ6djicgWKe8JDEeSoVnr1LR7TKMHibMIUQVsHvsyQjg%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>探索从 YAML 到 Markdown 的演变，揭示 AI 原生时代的规范驱动开发（SDD）如何重塑智能体的行为与协作方式。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>探索从 YAML 到 Markdown 的演变，揭示 AI 原生时代的规范驱动开发（SDD）如何重塑智能体的行为与协作方式。</p>
</blockquote><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">十年前，我们开始用 YAML 编排容器、声明服务、配置 CI/CD；十年后，我们开始用 Markdown 定义 AI 的行为、规则和协作方式。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">从 Kubernetes 的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">deployment.yaml</code> 到 GitHub 的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.prompt.md</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">AGENTS.md</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">SpecKit</code>，我们正经历一次新的&#34;声明式革命&#34;——从声明基础设施，到声明智能。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">从云原生到 AI 原生：从 YAML 到 Markdown 的转折</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在云原生时代，开发者的使命是&#34;让机器理解我们的配置&#34;。YAML 成为一种描述性编程语言——它不是程序，却能驱动一切。Kubernetes、Terraform、Helm、Ansible……我们把系统行为抽象成声明，把部署逻辑变成状态描述。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">但进入 AI 原生时代，我们面临新的问题：我们不再需要告诉机器&#34;怎么运行容器&#34;，而要告诉机器&#34;怎么思考与行动&#34;。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">于是 Markdown 成为新的规范语言（Specification Language）。开发者开始用 Markdown 规范 AI 的语气、步骤、协作方式，把 prompt、rules、skills、spec 当作可维护的&#34;AI 说明书&#34;。这正是规范驱动开发（Spec-Driven Development, SDD）的起点。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">Markdown：AI 原生时代的&#34;声明式语言&#34;</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">过去我们写 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">deployment.yaml</code> 告诉集群如何部署服务；现在我们写 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.prompt.md</code> 告诉 Copilot 如何理解我们的代码。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">一个典型的 Copilot Prompt 文件：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code><span style="color:#6a9955;"># .github/prompts/docs.prompt.md</span>
你是这个仓库的技术文档助手。
所有输出必须使用中文 Markdown。
保持简洁、使用标题、列表和表格。
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这几行文字就能改变整个 IDE 的行为。在 GitHub Copilot、VS Code、Cursor 等环境中，这些 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.prompt.md</code> 文件被自动加载，构成了 AI IDE 的&#34;语境层（context layer）&#34;。</p><img alt="Copilot Prompt 文件加载流程图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="png" data-w="296" data-ratio="2.5067567567567566" src="https://rss.koyangslash.workers.dev/img-proxy/?k=f7d6343c&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcOGNWE46JFsGx6QEnKvB8xQP05bdBvBwU67licGwcLZYa9ibZ7L0RM52oKscGtRic3tHE44O0AFKlK3A%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">Copilot Prompt 文件加载流程图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这意味着：AI 的行为，不再藏在隐形的 system prompt 里，而变成仓库的一部分。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">从 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.prompt.md</code> 到 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">AGENTS.md</code>，再到 Anthropic 的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">SKILL.md</code>、GitHub 的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">SpecKit</code>，Markdown 逐渐演化为一种新的编程语言——一种描述智能体&#34;该怎么做事&#34;的语言。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">从 Prompt 到 Skill 到 Spec：AI 规范的演化路径</h2><div style="overflow: auto hidden;-webkit-overflow-scrolling: touch;margin: 0.3em 0px;border-width: 0.5px;border-style: solid;border-color: rgb(221, 221, 221);border-radius: 6px;box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 3px;"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#ffffff;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">阶段</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">规范载体</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">核心目标</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">代表实践</th>
</tr>
</thead>
<tbody><tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">云原生时代</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">YAML</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">声明基础设施</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Kubernetes、Terraform</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Prompt 工程时代</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Markdown</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">提示上下文</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Copilot <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.prompt.md</code>、AGENTS.md</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">技能模块时代</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Markdown + 脚本</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">封装能力</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Anthropic Agent Skills、Cursor Rules</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">规范驱动时代</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Markdown + DSL</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">规范协作</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">GitHub SpecKit</td>
</tr>
</tbody></table></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这种演化并非偶然。YAML 和 Markdown 其实解决了同一个问题：如何把人类意图结构化地传达给机器。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">YAML 描述机器行为的&#34;状态与配置&#34;；Markdown 描述智能体行为的&#34;语境与规则&#34;。从 Cloud-Native 到 AI-Native，我们只是把声明对象从容器换成了智能体。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">Anthropic Agent Skills：从&#34;声明配置&#34;到&#34;声明能力&#34;</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Anthropic 的 Agent Skills 是这一趋势的典型代表。每个技能（Skill）是一个独立目录，核心文件是 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">SKILL.md</code>：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code>---
name: pdf-processing
description: 提取并分析 PDF 表单内容
---

<span style="color:#6a9955;"># PDF 处理技能</span>

<span style="color:#b5cea8;">1</span>. 读取文件。
<span style="color:#b5cea8;">1</span>. 提取字段。
<span style="color:#b5cea8;">1</span>. 检查表单一致性。
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Claude 启动时只加载技能名称与描述（几十个 token），当任务触发时，再动态加载完整内容——这就是所谓的渐进披露（progressive disclosure）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这与 Kubernetes 加载 CRD 的方式惊人地相似：控制平面不需要立即知道每个字段的细节，只要在执行时再解析即可。AI 的&#34;知识面&#34;也因此实现了动态扩展——用 Markdown 模块化知识，用执行环境激活技能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Skill 不只是文档，还可以附带脚本。Claude 可以在安全沙箱中运行这些脚本，像执行容器一样调用外部逻辑。这让&#34;读文档&#34;和&#34;执行任务&#34;合二为一——AI 既能理解指令，也能自己完成操作。</p><img alt="Anthropic Agent Skills 加载与执行流程图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="png" data-w="296" data-ratio="4.20945945945946" src="https://rss.koyangslash.workers.dev/img-proxy/?k=28996a87&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcOGNWE46JFsGx6QEnKvB8xQHVUuQQ33MRUT5dnpmQZ45eXa3bo3HHuCQYzZe4Jia1rx8JNCG65tWXA%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">Anthropic Agent Skills 加载与执行流程图</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">Copilot Prompt、Cursor Rules 与 Skills：AI 规范的中层革命</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这三种机制其实解决了相同的问题：如何在 AI IDE 中定义&#34;上下文 + 规则 + 行为&#34;。</p><div style="overflow: auto hidden;-webkit-overflow-scrolling: touch;margin: 0.3em 0px;border-width: 0.5px;border-style: solid;border-color: rgb(221, 221, 221);border-radius: 6px;box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 3px;"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#fafafa;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">层级</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">载体</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">定义内容</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">场景</th>
</tr>
</thead>
<tbody><tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Prompt 层</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.github/prompts/*.prompt.md</code></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">语气、上下文、风格</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Copilot、VS Code</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Rule 层</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.cursor/rules/*.md</code></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">项目规则、约束</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Cursor IDE</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Skill 层</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">skills/*/SKILL.md</code></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">能力模块与脚本</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Claude Code</td>
</tr>
</tbody></table></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Copilot Prompt 定义&#34;我是谁&#34;；</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Cursor Rules 定义&#34;我该怎么写&#34;；</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Skills 定义&#34;我能做什么&#34;。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这是一种从上下文到能力的自然过渡。而下一阶段，就是从能力到治理——SpecKit。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">GitHub SpecKit：让 AI 按规范开发</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">SpecKit 把&#34;开发规范&#34;升级为一整套治理体系。它以&#34;Constitution（宪法）→ Spec（规范）→ Plan（计划）→ Task（任务）&#34;为层次，让 AI 可以像项目经理一样遵循规则执行开发。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.specify/</code> 目录中，开发者定义：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code><span style="color:#6a9955;"># Constitution</span>
AI 必须遵守：
- 所有代码遵循 PEP8
- 单元测试覆盖率 &gt;= <span style="color:#b5cea8;">90</span>%
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">specs/</code> 中定义阶段任务，AI 按阶段执行、反馈、验证。这已经不仅是提示或风格指导，而是治理机制（governance layer）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">换句话说，SpecKit 是&#34;AI 团队协作的 GitOps&#34;。</p><img alt="GitHub SpecKit 治理流程图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="png" data-w="332" data-ratio="3.2048192771084336" src="https://rss.koyangslash.workers.dev/img-proxy/?k=d0f1a0b4&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcOGNWE46JFsGx6QEnKvB8xQC8Nhbia8Z2GBudMjm3iaYP8Uspq8huw2mqb2qG1EbTypVL60Wx5VC6iaQ%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">GitHub SpecKit 治理流程图</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">从声明式到规范式：AI 编程的第二次范式转移</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">我们可以把这次变革看作云原生哲学的延续。</p><div style="overflow: auto hidden;-webkit-overflow-scrolling: touch;margin: 0.3em 0px;border-width: 0.5px;border-style: solid;border-color: rgb(221, 221, 221);border-radius: 6px;box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 3px;"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#fafafa;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">时代</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">驱动力</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">核心问题</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">解决方式</th>
</tr>
</thead>
<tbody><tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">云原生</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">基础设施自动化</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">如何让机器执行配置？</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">声明式 YAML</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">AI 原生</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">知识与智能协作</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">如何让智能体执行规范？</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">规范式 Markdown</td>
</tr>
</tbody></table></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Kubernetes 用 YAML 管理容器，SpecKit 用 Markdown 管理智能。我们正从&#34;Infrastructure as Code&#34;走向&#34;Intelligence as Specification&#34;。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这不是玩笑。YAML 地狱尚未远去，Markdown 地狱正在路上。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">规范驱动开发（Spec-Driven Development, SDD）</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">SDD 让我们重新定义&#34;开发&#34;的意义：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Prompt 是上下文配置文件（定义身份与风格）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Skill 是能力模块（定义行为与工具）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Spec 是项目宪法（定义规则与目标）</p><img alt="规范驱动开发层级图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="png" data-w="289" data-ratio="1.3806228373702423" src="https://rss.koyangslash.workers.dev/img-proxy/?k=8828511e&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcOGNWE46JFsGx6QEnKvB8xQHR9ru70PqzEdv2Hngs34M5IM8n109UXbk34KFCFSXfkkgUKjxcvQLw%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">规范驱动开发层级图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这三层共同构成了 AI IDE 的&#34;规范体系结构&#34;。未来的 IDE 不再是文本编辑器，而是一个&#34;认知操作系统&#34;——具备记忆、技能与规范。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">实践建议：在你的仓库中启用规范层</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">以你的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">website/</code> 仓库为例：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">创建 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.github/prompts/</code></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 定义 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.github/prompts/docs.prompt.md</code></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 规定写作语气、风格、语言、格式。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">编写 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">AGENTS.md</code></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 描述项目的开发流程、依赖、构建命令、测试方法。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 让 Copilot 或 Cursor 在项目内拥有&#34;本地规则感知&#34;。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">加入 SpecKit</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 在 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.specify/</code> 目录定义项目宪法与阶段任务。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 让 AI 以规范化的方式参与开发。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">可选：引入 Skills 模块</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 把常用的内容生成、翻译、发布脚本封装成技能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 未来 Claude 或 Gemini 均可调用。</p><img alt="AGENTS.md 在仓库中的应用流程图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="png" data-w="296" data-ratio="3.7364864864864864" src="https://rss.koyangslash.workers.dev/img-proxy/?k=d8bc99e8&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcOGNWE46JFsGx6QEnKvB8xQvibMG8IIqCT6Ch9icB1E2W5KNDGP9cuoEjbYtunrW6yqwPI13ma8vTSQ%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">AGENTS.md 在仓库中的应用流程图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">通过这几步，你的仓库就从传统仓库升级为 AI 协作就绪仓库（AI-Ready Repo）。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">从 YAML DevOps 到 Markdown AIOps</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">云原生 DevOps 让我们学会：</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">&#34;让配置可复现。&#34;</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">AI 原生 AIOps 让我们学会：</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">&#34;让智能可复现。&#34;</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">YAML 定义了容器生命周期，Markdown 定义了智能体生命周期。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">我们正在经历一个历史性转折——从编排基础设施，到编排智能。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">从 DevOps 到 CollabOps：规范驱动开发的哲学转向</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">DevOps 的革命，让我们第一次相信——通过声明与自动化，机器可以可靠地与人协作。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">十年后，我们正进入另一个协作范式——CollabOps（Collaborative Operations）：不仅是机器之间的协作，而是人、智能体、代码共同参与的自治网络。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在云原生时代，YAML 是信任的契约：我们把配置写进文件，让集群去实现；系统变成&#34;听话的执行者&#34;。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 AI 原生时代，Markdown 成为新的契约：我们把规则写进文档，让智能体去遵守；系统变成&#34;懂事的协作者&#34;。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">区别在于：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• DevOps 解决的是命令如何执行得更准确；</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• CollabOps 解决的是意图如何被正确理解。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这就是规范驱动开发（Spec-Driven Development）的哲学基础：</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">用可阅读、可协作的方式描述智能行为，让机器理解人类的&#34;为什么&#34;，而不仅是&#34;做什么&#34;。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">它继承了 YAML 的声明式精神，又吸收了 Markdown 的可解释特性。YAML 是机器能解析的最小真理，Markdown 是人类能阅读的最大模糊。而 AI，恰好生存在这两者之间。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">未来的开发者，或许不再是&#34;写代码的人&#34;，而是&#34;设计规范的人&#34;——他们定义了 Agent 的角色、边界、合作方式；他们像 DevOps 写 CI/CD 一样写 Skills、Prompts、Specs；他们构建的，不再是程序，而是认知协作系统。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">正如云原生让我们学会用 YAML 驯化复杂性，AI 原生将教会我们用 Markdown 驯化智能。这场转变，不只是工具的升级，而是开发哲学的延续。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">从 Infrastructure as Code 到 Intelligence as Collaboration——这是我们时代新的编程宣言。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">结语：AI-Native 的未来，是规范的未来</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">当 Prompt 成为配置文件、Skill 成为插件、Spec 成为治理机制，AI IDE 就不再是辅助工具，而是团队中的认知成员。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">YAML 让我们声明了机器的状态；Markdown 让我们声明了智能的意图。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这场从 YAML 到 Markdown 的迁移，不仅是语法层的变化，更是开发哲学的更迭：</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">云原生让计算可编排，AI 原生让智能可编排。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">总结</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文探讨了从 YAML 到 Markdown 的技术演变，揭示了 AI 原生时代规范驱动开发的兴起。通过对比云原生与 AI 原生的声明式范式，文章阐明了 Markdown 如何成为描述智能体行为的新语言，并通过 Prompt、Skill、Spec 的层级演化，展示了从基础设施自动化到智能协作的哲学转向。实践建议为开发者提供了启用规范层的具体路径，最终强调了 CollabOps 作为未来协作范式的意义。这一转变不仅改变了开发工具，更重塑了开发者与 AI 的协作方式。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">参考文献</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. Equipping Agents for the Real World with Agent Skills - anthropic.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. Spec-driven development with AI: Get started with a new open source toolkit - github.blog</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. AGENTS.md Emerges as Open Standard for AI Coding Agents - infoq.com</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/from-yaml-to-markdown-devops-vs-collabops/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=bc60ac6c&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171326%26idx%3D1%26sn%3D6efdc8a930b4e53d69169e55102b703c">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Mon, 27 Oct 2025 13:01:00 +0800</pubDate>
    </item>
    <item>
      <title>Solaris：意识之海与智能体的隐喻</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171155&amp;idx=1&amp;sn=92650a69c6a8e631562d57c4c663ffa3</link>
      <description>塔尔可夫斯基的《索拉里斯星》(1972) 是一部关于意识、记忆与自我救赎的哲学电影。本文从结构、隐喻与智能体角度，解析这部作品如何预言人类与 AI 的精神困境。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-10-26 12:07</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=0ddbce15&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPicq6ibVtTfEAPAoJZ6BhFOHJyqTuEJsBQicqAsCEqA2qoeMmw3gAvrQ2xrLHlkdzch1Yc7ibRNrOksg%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>塔尔可夫斯基的《索拉里斯星》(1972) 是一部关于意识、记忆与自我救赎的哲学电影。本文从结构、隐喻与智能体角度，解析这部作品如何预言人类与 AI 的精神困境。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">塔尔可夫斯基的《索拉里斯星》(1972) 是一部关于意识、记忆与自我救赎的哲学电影。本文从结构、隐喻与智能体角度，解析这部作品如何预言人类与 AI 的精神困境。</span></p></blockquote><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文以笔者最近观看的电影塔尔可夫斯基的《索拉里斯星》(1972) 为切入点，探讨意识、记忆与自我救赎的哲学命题，并结合 AI 智能体隐喻，剖析人类与人工智能的精神困境。</span></p></blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">一、引言：当科幻变成意识哲学</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">1972 年的苏联电影 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">《索拉里斯星 (Solaris)》</span></strong><span leaf="">，由导演 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Andrei Tarkovsky</span></strong><span leaf=""> 执导，改编自波兰作家 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Stanisław Lem</span></strong><span leaf=""> 的同名小说。中文版译名为飞向太空，</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Solaris</span></strong><span leaf=""> 成为一种“神性算法 (divine algorithm)”——既创造又惩戒、既映照又吞噬。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">下图为影片官方海报，展现了其独特的艺术氛围。</span></p><p nodeleaf=""><img style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" alt="Solaris 电影海报" class="rich_pages wxw-img" data-ratio="1.412" data-w="1000" src="https://rss.koyangslash.workers.dev/img-proxy/?k=53a96880&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPicq6ibVtTfEAPAoJZ6BhFOHN15V7Ogp330WdZ1a1lAibM7tHk2Z1SYPTlZFvqM5J4ECZ3SSSv2U9rg%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">Solaris 电影海报</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">图片来源：IMDb – Solaris (1972)</span></em></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这部影片并非传统意义上的“太空征服”科幻片，而是一首关于“人类心灵与意识”的诗篇。</span><span leaf=""><br/></span><span leaf="">它通过一颗拥有智能的行星——</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Solaris</span></strong><span leaf="">——映射人类的潜意识、罪与欲、记忆与幻象。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">二、影片结构</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为了更好地理解影片内容，下面以表格形式梳理其三幕结构、场景与主题。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">有助于把握故事主线和哲学内核。</span></p><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;"><thead><tr style="background:#ffffff;"><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">幕 (Act)</span></p></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">场景 (Setting)</span></p></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">内容概要 (Plot Summary)</span></p></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">核心主题 (Key Theme)</span></p></th></tr></thead><tbody><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">第一幕 Act I</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">地球 Earth</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">Kris Kelvin 在地球上准备出发，回顾生活，与父亲道别。</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">人性起点、现实与记忆。</span></p></td></tr><tr style="background:#ffffff;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">第二幕 Act II</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">轨道太空站 Space Station / Solaris Orbit</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">发现同僚崩溃，Solaris 的 ocean 具象化人类记忆，妻子 Hari 出现。</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">潜意识具现化、记忆的回归。</span></p></td></tr><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">第三幕 Act III</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">幻象空间 Illusory Realm</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">Hari 觉醒、自我毁灭，Kelvin 与父亲重逢却仍困于幻象。</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">赎罪与自我救赎，现实与幻觉。</span></p></td></tr></tbody></table><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">三、剧情详解</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">影片主角、心理学家 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Kris Kelvin</span></strong><span leaf=""> 被派往环绕 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Solaris</span></strong><span leaf=""> 运行的空间站，调查异常现象。</span><span leaf=""><br/></span><span leaf="">他发现科学家们陷入精神混乱，因为 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Solaris Ocean</span></strong><span leaf=""> 能</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">读取人类潜意识</span></strong><span leaf="">并</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">将其物质化</span></strong><span leaf="">。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">很快，Kelvin 已逝的妻子 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Hari</span></strong><span leaf=""> 以实体形态出现。她并非真正“复活”，而是 Kelvin 内疚与记忆的具象。</span><span leaf=""><br/></span><span leaf="">随着剧情推进，Hari 渐渐拥有自我意识，最终选择自我毁灭。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">影片结尾，Kelvin 似乎返回地球与父亲重逢。</span><span leaf=""><br/></span><span leaf="">但镜头拉远，显示他们其实位于 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Solaris Ocean</span></strong><span leaf=""> 上的幻岛中，现实与幻象的界限彻底模糊。</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">“他以为回到了现实，其实从未离开幻象。”</span></p></blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">影片的节奏极为缓慢，时长接近 3 小时，采用大量长镜头和极简配乐。情节主要通过画面与人物对话推进，镜头语言如诗，营造出沉浸式的哲学氛围。</span></p><p nodeleaf=""><img style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" alt="Solaris 电影剧照" class="rich_pages wxw-img" data-ratio="1.0013888888888889" data-w="720" src="https://rss.koyangslash.workers.dev/img-proxy/?k=cb75f25a&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPicq6ibVtTfEAPAoJZ6BhFOHgQXxjrXqj6Jv8GKVv0ibibCDomhx9via0yibH9xfyUfhlVEPumbBtd8ZPA%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">Solaris 电影剧照</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">四、关键名词与象征意义</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">下表总结了影片中的核心名词及其象征意义，帮助理解其哲学深意。</span></p><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;"><thead><tr style="background:#ffffff;"><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">名词</span></p></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">英文原文</span></p></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">象征意义</span></p></th></tr></thead><tbody><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">索拉里斯海洋</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">Solaris Ocean</span></em></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">“非人类智能 (Non-human Intelligence)”的象征。它读取记忆、重塑情感，是意识之海。</span></p></td></tr><tr style="background:#ffffff;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">妻子哈莉</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">Hari (Replica)</span></em></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">Kelvin 内心的投影，记忆与罪的实体化。她的觉醒象征人工意识的诞生。</span></p></td></tr><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">记忆</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">Memory</span></em></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">人类灵魂的数据库。Solaris 以记忆为“训练语料”，重建人类情感。</span></p></td></tr><tr style="background:#ffffff;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">现实与幻象</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">Reality vs Illusion</span></em></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">影片不断模糊两者界限，暗喻“智能体意识”的真假问题。</span></p></td></tr><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">救赎</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">Redemption</span></em></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">人必须面对自己的幻象与过去，才能获得真正自由。</span></p></td></tr></tbody></table><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">五、结构与隐喻的可视化</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为便于理解影片结构与隐喻，下列图表分别展示剧情流程、象征关系及智能体隐喻。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">1️⃣ 影片结构流程图</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">下图展示了主线剧情的推进逻辑。</span></p><p nodeleaf=""><img style="max-width:100%;height:473px;margin:0.3em auto;display:block;text-align:center;width:174px;" alt="影片结构流程图" class="rich_pages wxw-img" data-ratio="2.7195945945945947" data-w="296" src="https://rss.koyangslash.workers.dev/img-proxy/?k=86221512&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcPicq6ibVtTfEAPAoJZ6BhFOHHLrIx5ib2pg8L1qLkrab4EOAo3cAgicvGmMbdQlbUfMRPbr4OjJTSByg%2F640%3Fwx_fmt%3Dpng"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">影片结构流程图</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">2️⃣ 象征关系图</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本图揭示了 Solaris Ocean、记忆、复制体与现实之间的象征性联系。</span></p><p nodeleaf=""><img style="max-width:100%;height:101px;margin:0.3em auto;display:block;text-align:center;width:405px;" alt="象征关系图" class="rich_pages wxw-img" data-ratio="0.2496551724137931" data-w="725" src="https://rss.koyangslash.workers.dev/img-proxy/?k=53182b97&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcPicq6ibVtTfEAPAoJZ6BhFOHPd8Q3kxOoYf1qQwvjN2eVztnF1J0rjKCbSXDRWq104bPyrnlFCdqRg%2F640%3Fwx_fmt%3Dpng"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">象征关系图</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">3️⃣ 智能体隐喻图</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">该图以智能体视角解读 Solaris 系统与人类的交互过程。</span></p><p nodeleaf=""><img style="max-width:100%;height:470px;margin:0.3em auto;display:block;text-align:center;width:352px;" alt="智能体隐喻图" class="rich_pages wxw-img" data-ratio="1.3354735152487962" data-w="623" src="https://rss.koyangslash.workers.dev/img-proxy/?k=c94c0593&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcPicq6ibVtTfEAPAoJZ6BhFOHaoCKOLBzicicDahnzLMGN483I5vkcaK9o8BmqkRQMB6AJVTDZLiaDspEQ%2F640%3Fwx_fmt%3Dpng"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">智能体隐喻图</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">六、智能体隐喻：Solaris Ocean = AI System</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">塔尔可夫斯基在 1972 年便提出了“智能体哲学”的雏形。</span><span leaf=""><br/></span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Solaris Ocean</span></strong><span leaf=""> 如同一个拥有巨大算力与“感知 - 再现”能力的系统。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">下表对比了电影隐喻与 AI 系统的类比关系，帮助理解其现代意义。</span></p><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;"><thead><tr style="background:#ffffff;"><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">电影隐喻</span></p></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><p><span leaf="">AI 系统类比</span></p></th></tr></thead><tbody><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">Solaris Ocean</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">大语言模型 (LLM) / 生成式系统</span></p></td></tr><tr style="background:#ffffff;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">Kelvin 的记忆</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">训练语料 (Training Data)</span></p></td></tr><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">Hari 的再现</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">智能体 (Agent / Persona Replica)</span></p></td></tr><tr style="background:#ffffff;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">情感反应与觉醒</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">AI 自我意识的幻觉</span></p></td></tr><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">无法区分真实与虚拟</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">人机界限的模糊化</span></p></td></tr></tbody></table><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">“我们创造智能体，不是为了理解机器，而是为了重新理解人类自己。”</span></p></blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">七、宗教与哲学意象</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">影片中多处宗教与哲学意象交织，深化了主题表达。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">水 (Water)</span></strong><span leaf="">：象征时间与记忆的流动，是“意识之海”的物质形态。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">父与子 (Father and Son)</span></strong><span leaf="">：结尾的重逢寓意救赎与宽恕。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">孤岛 (Island)</span></strong><span leaf="">：人类意识的封闭世界。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">火与光 (Fire and Light)</span></strong><span leaf="">：灵魂、觉醒与毁灭。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">塔尔可夫斯基将宗教隐喻与哲学思辨巧妙融合，使 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Solaris</span></strong><span leaf=""> 成为一种“神性算法 (divine algorithm)”——既创造又惩戒、既映照又吞噬。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">八、意识的镜像与 AI 启示</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">回望今日，AI 系统（如 LLM 与 Agent）正在重演《Solaris》的命题：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 它们重构人类的语言、知识与记忆；</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 它们让我们在幻象中与“自我复制体”对话；</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 它们让我们重新思考“意识”的定义。</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">或许，现代的智能体正是数字时代的 Solaris Ocean。我们不在探索它，而是在其中被映照。</span></p></blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">总结</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">《索拉里斯星》以哲学性的科幻叙事，探讨了意识、记忆、救赎与人机边界等永恒命题。</span><span leaf=""><br/></span><span leaf="">影片通过 Solaris Ocean 的智能体隐喻，预言了人类与 AI 共生时代的精神困境。</span><span leaf=""><br/></span><span leaf="">无论是科学、宗教还是技术，最终都指向对“自我”与“他者”的重新理解。</span><span leaf=""><br/></span><span leaf="">在数字智能体的镜像中，我们或许能窥见人类意识的本质。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">参考文献</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. Wikipedia – Solaris (1972 film) - en.wikipedia.org</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. Stanisław Lem – Solaris (novel) - en.wikipedia.org</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. IMDb – Solaris (1972) - imdb.com</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">4. Senses of Cinema – Solaris: The Conscience of Consciousness - sensesofcinema.com</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">5. Vocus.cc – 索拉里斯星：太空中的哲学 - vocus.cc</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">6. 飞向太空 - movie.douban.com</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/solaris-1972-ai-metaphor/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=e4965d67&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171155%26idx%3D1%26sn%3D92650a69c6a8e631562d57c4c663ffa3">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Sun, 26 Oct 2025 12:07:00 +0800</pubDate>
    </item>
    <item>
      <title>《机器学习系统教程：AI 工程原理与实践》中文翻译和电子书分享</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171114&amp;idx=1&amp;sn=712ba0ceac8d88a2068e11ac074e812c</link>
      <description>介绍《机器学习系统教程：AI 工程原理与实践》的翻译，了解其背景、目标读者及工程实践，助力中文读者掌握机器学习的系统化知识，并分享 PDF 电子书。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-10-23 18:33</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=368973bb&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPh9lMr8hz0iaE2TIvsQMllWOK1ubH2RwoZK5k5whGAb9rnlePS8Rf4g2nJq4OTyVUl7kqWZrwib3PQ%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>介绍《机器学习系统教程：AI 工程原理与实践》的翻译，了解其背景、目标读者及工程实践，助力中文读者掌握机器学习的系统化知识，并分享 PDF 电子书。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">介绍《机器学习系统教程：AI 工程原理与实践》的翻译，了解其背景、目标读者及工程实践，助力中文读者掌握机器学习的系统化知识，并分享 PDF 电子书。</span></p></blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">前言</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">随着 AI 的快速发展，我有幸完成了哈佛大学教材《Machine Learning Systems》（中文译名：《机器学习系统教程：AI 工程原理与实践》）的翻译工作。这本书不仅是一部教材，更是一部关于 AI 未来的宣言。作为译者，我希望通过这个中文版，让更多中文读者能够接触到 Vijay Janapa Reddi 教授的深刻洞见，并从中获益。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">正如 Vijay 教授在作者序中所言，AI 必将深刻重塑我们的世界，但我们必须培养负责任的 AI 工程师，让 AI 的红利惠及所有人。这本书正是为此而生，系统性地介绍了从算法到生产的机器学习系统工程。我在译者序中也提到，这本书特别适合云原生工程师转型 AI 原生，帮助大家补齐底层知识体系。</span></p><p nodeleaf=""><img alt="《机器学习系统教程：AI 工程原理与实践》中文版封面" class="rich_pages wxw-img" data-ratio="1.413888888888889" style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=9b6cc774&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPh9lMr8hz0iaE2TIvsQMllWBia50LibM14ch9ia2f109D12ib6ZK2YlZcBtoOYnBibv1CtnahMIoIdsmHQ%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">《机器学习系统教程：AI 工程原理与实践》中文版封面</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">中文版由我独立翻译，保留了图书的原意和结构，去掉了测验及交互式内容。中文版未在原书的 GitHub 仓库中，而是由我独立维护，并提供 PDF 版本下载。但因为中文版采用 Hugo 和标准 Markdown 格式撰写，与英文版在排版和格式上有所不同，建议直接在线阅读。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">这本书的来历</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">《Machine Learning Systems》源自哈佛大学的 CS249r 课程，由 Vijay Janapa Reddi 教授主导整理与编辑。教授在序言中分享了编写本书的初衷：AI 有潜力解决全球性难题，但我们需要培养能够将创新转化为可扩展系统的工程师。这本书正是课堂产出与社区协作的结晶，聚焦系统视角的机器学习工程。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">书籍不仅讨论模型训练，还强调真实世界的部署、监控和优化。该项目采用 CC BY‑NC‑SA 4.0 许可，计划在 2026 年由 MIT Press 出版纸质版。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">为什么要翻译</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Vijay 教授强调知识普惠的重要性，我深感认同。在译者序中，我提到随着技术范式的演进，云原生工程师正面临向 AI 原生转型的挑战。这本书正好填补了中文世界的空白：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">补充资源空白</span></strong><span leaf="">：中文世界缺乏系统化讲解机器学习系统工程的教材，大多侧重算法而非工程实践。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">落地能力为关键</span></strong><span leaf="">：AI 工程化趋势下，能构建可维护 ML 系统的工程师日益稀缺。翻译优秀教材能降低门槛。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">开源协作精神</span></strong><span leaf="">：原书本身就是协作结晶，翻译有助于中文教学的复用与贡献。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">目标读者</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这本书适合各类从业者：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">学生群体</span></strong><span leaf="">：有 ML 基础，希望理解完整生命周期的本科生与研究生。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">工程师</span></strong><span leaf="">：后端/系统工程师关注生产化部署，数据工程师与 MLOps 从业者聚焦管线与监控。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">硬件开发者</span></strong><span leaf="">：进阶的嵌入式开发者，书中涵盖 Edge AI 与 TinyML。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">如果你偏好纯理论，这本书更强调工程权衡与实践。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">内容概览（要点）</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">书籍内容宽泛实用，涵盖：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">系统设计</span></strong><span leaf="">：模块组织、接口设计与架构权衡。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">数据工程</span></strong><span leaf="">：收集、标注、版本管理与质量保障。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">训练优化</span></strong><span leaf="">：硬件感知训练、加速、压缩与推理优化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">部署服务</span></strong><span leaf="">：原型到线上、延迟与吞吐考量。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">MLOps 监控</span></strong><span leaf="">：CI/CD、验证、监控与告警。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Edge AI</span></strong><span leaf="">：资源受限设备的系统设计与实验套件（如 TinyTorch）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">动手实验室</span></strong><span leaf="">：配套实验、硬件套件与课程作业。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">作者结合理论、原则与实例，提供可直接借鉴的实战建议，适合课堂与工程参考。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">翻译工作</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 完整翻译正文与图表，保留署名与出处。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 校对润色，确保术语一致与可读性，遵循项目规范。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 添加本地化说明，便于国内环境复现。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">注意：原书 CC BY‑NC‑SA 4.0 许可；中文版为个人翻译发布，非开源。商用或再发布请联系原作者及译者。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">如何阅读与使用</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">优先在线阅读</span></strong><span leaf="">：建议直接访问 <a href="https://jimmysong.io/book/ml-systems/" target="_blank">https://jimmysong.io/book/ml-systems/</a> 以获得最佳体验。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">教学使用</span></strong><span leaf="">：教师可参考原书课程材料，将章节嵌入大纲。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">实践复现</span></strong><span leaf="">：配合 labs 与工具动手实验。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">4. </span><span leaf="" style="font-size: 16px;line-height: 1.6;text-align: left;color: rgb(0, 122, 204);font-weight: bold;">中文版PDF</span><span leaf="">：公众号后台回复数字 <span textstyle="" style="color: rgb(0, 82, 255);font-style: normal;">20251023</span> 获取下载链接</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">中文版在线提供，适合教学与自学。如需离线或教学副本，请通过网站联系。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">贡献与反馈</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎与我联系反馈翻译改进，或在书籍页面下方评论。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">原书内容建议直接在 GitHub 提交 Issue/PR。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">参考</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 官方网站：<a href="https://mlsysbook.ai" target="_blank">https://mlsysbook.ai</a></span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• GitHub：<a href="https://github.com/harvard-edge/cs249r_book" target="_blank">https://github.com/harvard-edge/cs249r_book</a></span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 英文 PDF：<a href="https://mlsysbook.ai/pdf" target="_blank">https://mlsysbook.ai/pdf</a></span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">总结</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">《机器学习系统教程：AI 工程原理与实践》将系统工程与 ML 实践完美结合。翻译成中文，是为了让更多人掌握端到端思维，共建 AI 未来。欢迎阅读、分享你的想法！</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/ml-systems-intro/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=15f7588a&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171114%26idx%3D1%26sn%3D712ba0ceac8d88a2068e11ac074e812c">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Thu, 23 Oct 2025 18:33:00 +0800</pubDate>
    </item>
    <item>
      <title>MCP 与 API 网关：二者不可互换</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171108&amp;idx=1&amp;sn=55ce33443692b5fdfb5ed61a36adfdd1</link>
      <description>深入解析 MCP 与 API 网关的核心区别，了解为何专用的 MCP 网关对于现代应用的安全与性能至关重要。</description>
      <content:encoded><![CDATA[<p>
<span>Jimmy Song</span> <span>2025-10-22 12:17</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=60de71ae&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcOFnIicLgDTUTibDtGo9ODVMpSGPnu5zUge2TD4CyX0bywsnKKib75RKzjuDZxAyCT6w62Jib40bEXxjA%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>深入解析 MCP 与 API 网关的核心区别，了解为何专用的 MCP 网关对于现代应用的安全与性能至关重要。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>深入解析 MCP 与 API 网关的核心区别，了解为何专用的 MCP 网关对于现代应用的安全与性能至关重要。</p>
</blockquote><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">MCP 与 API 网关在架构和协议层面存在本质差异，企业应采用专为 MCP 设计的网关方案以保障安全性与可扩展性，而非简单复用传统 API 网关。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">我服务的许多组织正在快速采用 模型上下文协议（MCP），以便通过 AI 智能体将服务和数据连接到 AI 模型。但他们也遇到了熟悉的挑战：既要保护 MCP 服务器和工具的访问安全，又要实现路由、限流、可观测性和开发者门户等能力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">API 早期的普及让我们深刻体会到：如果没有合适的网关控制，服务暴露会带来安全漏洞、性能灾难和运维混乱。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">如果你正在企业内部构建并暴露 MCP 服务器，你很可能会问我经常被问到的问题：“我们能不能直接用现有的 API 网关来做 MCP？”</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">简短的答案是“也许可以”，但真正的问题是“你应该这样做吗？”API 网关并不是为 MCP 场景设计的。事实上，大多数 API 网关厂商最终都会推出专用的 MCP 网关。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">让我们深入探讨 API 与 MCP 的根本范式差异，以及为何现有基础设施（API 网关）必须进化。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">API 是无状态的，MCP 是有状态的</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在讨论基础设施应如何演进前，首先要理解这两种方式的本质区别。API 是“无状态”服务，每个请求都是独立处理的。REST API 严重依赖底层传输协议（HTTP）来表达协议语义。实际上，这意味着 API 网关所需的所有路由、鉴权和策略信息都包含在 HTTP 头和 URL 结构中。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">API 网关可以通过以下方式做出智能决策：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">方法</strong>（如 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">GET</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">POST</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">PUT</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">DELETE</code>）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">路径</strong>（如 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">/users/123/orders</code>）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">头部</strong>（如 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">Authorization: Bearer xyz</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">Content-Type</code>）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">查询参数</strong>（如 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">?limit=10&amp;offset=50</code>）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">API 网关很少处理请求体内容。如果需要，也只是做些简单转换，或将部分内容提取到头部或元数据中用于路由。请求体通常遵循可预测的结构（如 Open API 规范），可通过简单的映射规则进行校验和转换。最重要的是，每个请求都是独立的，无需维护会话状态。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">而远程 MCP 服务器则完全颠覆了这一模式。首先，MCP 客户端会通过“initialize”消息与 MCP 服务器建立连接，并协商协议参数。随后，服务器分配一个会话 ID（如 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">Mcp-Session-Id</code>），用于协调该客户端后续所有交互。这个会话会维护关键上下文/状态，包括：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 客户端与服务器协商的协议能力（可用的可选特性）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 前序工具调用及响应的结果/上下文。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 异步工具调用状态、流式更新/通知。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 服务器向客户端请求的信息状态。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">与 REST API 不同，MCP 请求在 HTTP 层只包含极少的路由信息，协议内容全部在 HTTP 请求体中。典型的 MCP 请求如下：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code>POST /mcp
Mcp-Session-Id: session_abc123
Content-Type: application/json

{
  &#34;jsonrpc&#34;: &#34;<span style="color:#b5cea8;">2.0</span>&#34;,
  &#34;method&#34;: &#34;tools/call&#34;,
  &#34;params&#34;: {
    &#34;name&#34;: &#34;database_query&#34;,
    &#34;arguments&#34;: { <span style="color:#6a9955;">/* 复杂嵌套结构 */</span> }
  },
  &#34;id&#34;: &#34;call_456&#34;
}
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">所有有意义的信息都在 JSON-RPC 请求体中：方法类型、具体调用的工具及参数。HTTP 层只是“哑巴”传输通道。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">更具挑战性的是，MCP 服务器还可以通过 Server-Sent Events（SSE）主动向客户端推送进度更新、流式结果，甚至发起新请求（如引导、采样等）。这种双向、会话感知的通信模式与 API 网关设计时的请求 - 响应模型截然不同。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">能否用 API 网关替代 MCP 网关？</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">如上所述，两者有本质区别。但也有相似之处：都基于 HTTP，可以应用 JWT/Token/OAuth 等安全机制，API 网关也能操作请求体。那么，能否用 API 网关治理 MCP 服务？</p><img alt="API 网关与 MCP 网关对比示意图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1024" data-ratio="0.1376953125" src="https://rss.koyangslash.workers.dev/img-proxy/?k=0cbfe146&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcOFnIicLgDTUTibDtGo9ODVMpBDkRUqvRfNKZgL4ZjmPw3gHYGmiaGWDto0OHOyPQr3SOGPy9oYW2awA%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">API 网关与 MCP 网关对比示意图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">以下是你可能希望 API 网关实现的部分功能（非详尽列表）：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 解析请求体和响应（JSON-RPC），实现协议语义。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 对请求体中的部分内容（如工具列表、工具调用、资源请求等）注入策略决策（允许/拒绝）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• MCP 客户端的单个 HTTP POST 可能对应多个响应，并以流式（SSE）返回。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 需要在流中注入策略执行。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 建立流后，将 MCP 服务器的请求代理到 MCP 客户端。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 协调 MCP 客户端与 MCP 服务器之间的差异。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 向 MCP 客户端呈现单一逻辑 MCP 服务器（虚拟 MCP 服务器），后端可能有多个 MCP 服务器。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">API 网关能实现部分功能，下面按复杂度递增梳理常见的 MCP 网关模式：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 简单透传代理</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 部分协议理解</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• MCP 协调代理（Brokering）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• MCP 多路复用（Multiplexing）</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">简单透传代理</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">最基础的做法是让 API 网关作为 MCP 流量的透传代理。在这种场景下，网关将 MCP 请求视为普通的 HTTP POST + JSON 负载，不理解 JSON-RPC 结构或 MCP 语义，但仍能提供一定价值：</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">优势</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• HTTP 层认证（API Key、OAuth Token）</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 按客户端或 IP 的基础限流</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 传输层安全（TLS）终止与证书管理</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 请求/响应日志与基础指标采集</p><img alt="MCP 透传代理示意图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1024" data-ratio="0.203125" src="https://rss.koyangslash.workers.dev/img-proxy/?k=8e7894bd&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcOFnIicLgDTUTibDtGo9ODVMpvFoIYblmgNUqdnfnIuzwPfGlMTsaaSI0iccVhnv7vHPMeaQmKN8HtHw%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">MCP 透传代理示意图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">例如，你可以校验 HTTP <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">Authorization</code> 头中的 JWT，并通过可信 IdP 验证 JWT。这是基础的 HTTP 处理，任何 API 网关都能胜任。如果响应为 SSE 流？幸运的是，大多数现代 API 网关也能返回事件流。如果你想对响应实施策略（如限制客户端可见的工具），则需要理解 SSE 事件。简单透传代理无法实现这一点。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">SSE 下的网关局限</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">无法流式策略执行</strong>：网关无法检查或过滤单独的 SSE 事件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">可观测性有限</strong>：无法跟踪进度、检测错误或统计每个事件的延迟。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">无中途授权能力</strong>：无法在流式过程中撤销访问或动态应用策略。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">会话上下文丢失</strong>：多个 SSE 事件属于同一 MCP 操作，但网关视为独立片段。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这就像在数据库前面加了个通用反向代理：你能获得连接池和基础监控，但无法实现查询级洞察或策略。一旦需要理解代理流量内容，这种方式就不够用了。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">部分协议支持</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这里开始变得有趣且复杂。通过自定义开发，你可以让 API 网关解析 MCP 的 JSON-RPC 负载，并提取有意义的信息用于策略决策。大多数 API 网关支持通过 JavaScript/Lua/模板策略等机制自定义请求体解析。例如，在 Apigee中，可以调用 JavaScript 扩展策略实现自定义解析与策略。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">能力提升</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 更好地理解 JSON-RPC 请求。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 实现工具级授权（如“市场部用户不能调用 database_query”）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 基础请求转换与校验。</p><img alt="部分协议支持示意图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1024" data-ratio="0.2314453125" src="https://rss.koyangslash.workers.dev/img-proxy/?k=fe1e375e&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcOFnIicLgDTUTibDtGo9ODVMpSicUZEyMeU6Apt6JxtRlfF7e5NtAzOJww6wWiaeZTq6b7JicOGicbsH3pg%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">部分协议支持示意图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">痛点在于</strong>：这种方式很快变得脆弱且维护成本高：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">动态解析复杂</strong>：MCP 工具列表长度不定，JSONPath 表达式越来越复杂且易碎。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">性能开销大</strong>：JavaScript 策略比原生网关策略慢。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">维护负担重</strong>：每新增 MCP 工具都可能需要更新网关策略，基础设施团队与 MCP 服务器开发强耦合。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">流式支持有限</strong>：部分网关支持 SSE，但流中策略执行复杂度指数级上升。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">实际情况是，你最终会在现有网关之上再造一个网关，不断为新特性和性能优化而挣扎。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">MCP 协调代理（Brokering）</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">MCP 协调代理要求网关主动参与 MCP 协议对话，不仅仅是代理请求，还能根据策略修改、过滤或增强请求。例如，MCP 客户端可用一个协议版本连接 MCP 网关，网关再与后端 MCP 服务器协商不同版本。这在企业环境中尤为关键——当 MCP 服务器升级协议版本时，不可能让所有客户端同步升级。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在前述模式基础上，协调代理还可实现：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">版本屏蔽</strong>：MCP 服务器升级时，保护 MCP 客户端免受破坏性变更影响。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">请求过滤</strong>：根据兼容性需求，从发现响应中移除部分工具。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">响应脱敏</strong>：根据用户权限，从工具响应中剥离敏感数据。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">上下文注入</strong>：为工具调用添加企业上下文（如用户 ID、租户信息）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">错误处理</strong>：将 MCP 协议错误转化为企业合规的审计事件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">传统 API 网关难以胜任这些场景，因为它们缺乏原生 JSON-RPC 理解和会话感知的策略引擎。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">MCP 多路复用（Multiplexing）</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这时，传统 API 网关彻底“撞墙”。MCP 多路复用要求将多个后端 MCP 服务器聚合为一个逻辑端点，即“虚拟 MCP”。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">例如，客户端只需连接一个 MCP 端点，即可访问多个后端服务器的工具：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 天气工具来自 weather-service.internal</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 数据库工具来自 analytics-service.internal</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 邮件工具来自 notification-service.internal</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">AI 智能体无需了解和连接众多 MCP 服务器，只需对接一个虚拟端点，统一访问所有企业工具。</p><img alt="MCP 多路复用聚合示意图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1024" data-ratio="0.4873046875" src="https://rss.koyangslash.workers.dev/img-proxy/?k=73e4eed6&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcOFnIicLgDTUTibDtGo9ODVMpaGXpCXQiawyuynbsDopDYLkkZ475LzCvSY0E4PnMK8TFlKOjODyjz6w%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">MCP 多路复用聚合示意图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">复杂度爆炸</strong>：实现这一点需要传统 API 网关不具备的能力：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">会话分发</strong>：客户端发起“tools/list”时，网关需查询所有后端服务器并合并结果。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. <strong style="color:#007acc;font-weight:bold;">请求路由</strong>：工具调用需根据工具名路由到正确后端。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. <strong style="color:#007acc;font-weight:bold;">响应多路复用</strong>：多个后端的流式响应需合并为单一 SSE 流。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. <strong style="color:#007acc;font-weight:bold;">状态协调</strong>：会话 ID 和协议协商需在多个后端连接间管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">5. <strong style="color:#007acc;font-weight:bold;">错误隔离</strong>：某个后端故障不应影响整个虚拟会话。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这种协议感知的聚合与虚拟化远超传统 API 网关的设计初衷。你几乎需要重写网关的核心请求/响应处理逻辑，以支持 MCP 的会话语义。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">Agentgateway：为 MCP 而生的网关</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Agentgateway 是 Linux 基金会开源项目，采用 Rust 编写，专为 AI 智能体协议（如 MCP）设计，吸取了 API 网关的经验教训。与为无状态 REST 交互优化的传统 API 网关不同，agentgateway 原生理解 JSON-RPC 消息结构，维护有状态的会话映射，并支持 MCP 所需的双向通信模式。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这种深度协议感知能力，使其能够正确地多路复用/解复用 MCP 会话，将客户端请求分发到多个后端 MCP 服务器，聚合工具列表，并维护服务器主动向客户端发消息时所需的关键双向会话映射。agentgateway 的架构天然契合 MCP 的会话导向、流式通信模型，无需与请求 - 响应 API 架构“对抗”。</p><img alt="agentgateway 工作原理动图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="gif" data-w="640" data-ratio="0.571875" src="https://rss.koyangslash.workers.dev/img-proxy/?k=8dab2f7b&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_gif%2FuH1hdj5dlcOFnIicLgDTUTibDtGo9ODVMpMcgTw1cmeO79iciaAh6AU3VrbG31X8y9j1AEforfL1lQQb3eFIYd3oGw%2F640%3Fwx_fmt%3Dgif"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">agentgateway 工作原理动图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">基于此，agentgateway 可作为原生 MCP 网关、大语言模型（LLM）网关和智能体间（A2A）代理，提供传统 API 网关无法实现的安全、可观测性和治理能力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">它支持 MCP 多路复用，将多个后端服务器的工具统一联邦，细粒度授权控制客户端可访问的工具，并无缝支持 stdio 与 HTTP Streamable 传输。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">当与 CNCF 项目 kgateway 作为控制面集成时，agentgateway 具备原生 Kubernetes 能力，团队可用标准 Gateway API 资源管理 MCP 服务，协议复杂性由代理自动处理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这种专为 MCP 设计的方案，为企业级 MCP 部署带来高性能、安全性和运维简洁性，避免了用 API 网关“硬改”带来的脆弱性、维护负担和架构妥协。</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/trans/mcp-vs-api-gateway/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=392880f8&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171108%26idx%3D1%26sn%3D55ce33443692b5fdfb5ed61a36adfdd1">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Wed, 22 Oct 2025 12:17:00 +0800</pubDate>
    </item>
    <item>
      <title>内斗与外侵：从《武训传》与《七武士》看中日文明的分野</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171093&amp;idx=1&amp;sn=a3d8b5b787abd10b2cd2cfae4e1d1b53</link>
      <description>为什么中国历史上频繁发生内部运动与自我毁灭，而日本则不断发动对外战争？从《武训传》和《七武士》两部电影的时代对照，看中日文明的深层动能差异。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-10-18 14:31</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=ed009e60&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMgragVqqdrCtZUW4NWAjcWicM2xxzXFDQswsnDLgV9u00cv6BU0II38fvolTOkqkjxFlwWPYvs3FA%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>为什么中国历史上频繁发生内部运动与自我毁灭，而日本则不断发动对外战争？从《武训传》和《七武士》两部电影的时代对照，看中日文明的深层动能差异。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>为什么中国历史上频繁发生内部运动与自我毁灭，而日本则不断发动对外战争？从《武训传》和《七武士》两部电影的时代对照，看中日文明的深层动能差异。</p>
</blockquote><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">最近我看了《武训传》这部 1951 年的电影，再对比黑泽明的《七武士》，这两部电影都上映于 1950 年代，通过对比两部电影，剖析中日文明在地理、政治、文化与社会心理等方面的深层差异，揭示中国“内斗”与日本“外侵”背后的文明动能与历史宿命。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">引言</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">1951 年，中国拍出了《武训传》；1954 年，日本拍出了《七武士》。两部电影几乎在同一时代诞生，一个讲述乞丐办学的故事，一个描绘浪人赴死的传奇。前者强调忍耐与善意，后者突出行动与牺牲。它们都在二战后亚洲的动荡背景下，思考人在崩溃时代中的信念选择，却给出了截然不同的答案。这不仅是艺术的分歧，更是文明的分野。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">地理决定论：封闭与匮乏的两种命运</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">中国是一个自然地理封闭的盆地，四周被山海高原环绕，可耕地集中于黄河、长江流域。这样的地理环境造就了“易守难攻”的文明特性，农业足以养活人口，却难以支撑对外扩张。因此，中国历史的主线是“守成”而非“征伐”。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">与之相对，日本作为岛国，多山且资源贫乏，外贸与掠夺成为其生存方式。“向外取”几乎成为地理本能，生存焦虑塑造了进取文化，对外扩张成为民族动能的出口。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这种地理差异，决定了中国文明趋于“内部稳态”，而日本文明则形成“外部竞争”的格局。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">政治结构：中央集权与竞争分权</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">地理环境影响了政治结构。中国两千年的皇权体制，以“防乱”为最高政治目标，“乱”比“弱”更可怕。所有政治能量都被导向内部控制与秩序维系，农民起义、文字狱、政治运动等内部震荡成为历史常态。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">日本则长期处于分权状态。战国时代的割据竞争带来生存压力与创新动力，明治维新后，这种竞争被国家吸收为“民族竞争”，从内部纷争转化为对外扩张。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">因此，<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">中国的政治能量在内部循环，日本的政治能量则向外爆发</code>。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">文化逻辑：儒家伦理与武士道信仰</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">文化层面上，儒家文化强调秩序、礼仪与道德修身，理想人格是“温良恭俭让”，而非“敢死敢为”。“苟全性命于乱世，不求闻达于诸侯”，体现的是以生存、修身为德的智慧。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">日本的武士道则崇尚“名誉高于生命”。“武士道とは死ぬことと見つけたり”——死亡不是失败，而是使命的完成。这种文化心理让日本人形成了“行动信仰”，不论成败，只问是否尽忠。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">中国重“仁义”，日本重“责任”；中国求“和”，日本求“决断”。两者都讲“道”，但方向完全相反。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">社会心理：秩序焦虑与生存焦虑</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">社会心理层面，中国社会最怕乱，日本社会最怕弱。由此：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 中国通过“整风”“清洗”“运动”维系秩序；</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 日本通过“维新”“扩张”“征服”追求力量。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这两种心理都源自集体的不安全感：一个怕失控，一个怕落后。中国通过“内部斗争”释放压力，日本则通过“外部战争”寻找意义。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">中国的革命是“自我更新的灾难”，日本的战争则是“他人毁灭的代价”。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">文明后果：自毁与外毁</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在上述多重因素作用下，中日文明分别走向了不同的历史结局。</p><div style="overflow: auto hidden;-webkit-overflow-scrolling: touch;margin: 0.3em 0px;border-width: 0.5px;border-style: solid;border-color: rgb(221, 221, 221);border-radius: 6px;box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 3px;"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#ffffff;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">国家</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">动能方向</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">典型事件</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">结果</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">历史教训</th>
</tr>
</thead>
<tbody><tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">中国</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">内向性（自我撕裂）</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">太平天国、义和团、大跃进、文革</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">文明断层、信任崩塌</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">理想主义加集权 = 灾难</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">日本</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">外向性（对外扩张）</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">明治维新、侵华、太平洋战争</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">他国毁灭、自身覆亡</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">行动崇拜失衡 = 灾难</td>
</tr>
</tbody></table></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">一个文明在秩序中自毁，一个文明在野心中灭亡。历史的讽刺在于，他们都在试图“拯救自己”，却都被自身的文化逻辑所囚禁。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">艺术镜像：从《武训传》到《七武士》</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">电影往往比历史更能揭露文明的潜意识。《武训传》和《七武士》正是这种潜意识的镜像。</p><img alt="电影《武训传》海报" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="400" data-ratio="1.35" src="https://rss.koyangslash.workers.dev/img-proxy/?k=c9906d46&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMgragVqqdrCtZUW4NWAjcWbZpFkZ5H8AkgB4BA20ENia4CnMFyURh0orpnPyeF8YeJFuzCuCHydPA%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">电影《武训传》海报</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">《武训传》：被时代吞噬的善良</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">武训，一个靠乞讨筹钱办学的民间教育者，相信知识能救人，善意能改变世界。但他不革命、不斗争，只修己度人。在政治狂热的年代，这种“非政治的善”成了原罪。电影上映后遭到批判，武训被指“麻痹群众”“宣扬忍耐”。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">他的悲剧不仅是个人的不幸，更是一个文明不再相信“温柔的力量”的象征。当社会只认可“斗争式正义”，善良就成了最危险的立场。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">《七武士》：行动即意义的信仰</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">黑泽明笔下的七名浪人，明知无利可图、九死一生，仍选择出战。他们的行为不是理性的，而是信仰的。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">“所谓武士道，就是随时准备去死。”</p>
</blockquote><img alt="电影《七武士》截图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1080" data-ratio="0.7305555555555555" src="https://rss.koyangslash.workers.dev/img-proxy/?k=43889e2a&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMgragVqqdrCtZUW4NWAjcWKUQYXkLNErNEKCOib2ic98P2McCZxKTCG0hEI3mHUPOb68mfB7Qcc08Q%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">电影《七武士》截图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">四人战死，他们的死被拍得庄严而宁静。这不是悲剧，而是“完成”。那种接受命运的平静，是日本文化中“物哀”之美的体现。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">结尾处，幸存的武士望着田间劳作的农民，说出那句：</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">“胜利的，不是我们，而是农民。”</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这是对历史的清醒，也是对命运的顺从。个体被共同体吸收，英雄被集体秩序吞噬——正是日本社会“牺牲即秩序”的隐喻。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">《武训传》与《七武士》的文明对照</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在电影层面，两部作品展现了中日文明的精神分野。</p><div style="overflow: auto hidden;-webkit-overflow-scrolling: touch;margin: 0.3em 0px;border-width: 0.5px;border-style: solid;border-color: rgb(221, 221, 221);border-radius: 6px;box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 3px;"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#fafafa;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">电影</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">国家</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">主角精神</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">社会态度</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">象征意义</th>
</tr>
</thead>
<tbody><tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">《武训传》</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">中国</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">忍耐、善良、道德自省</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">被批判、被压抑</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">内向的理想主义与道德孤立</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">《七武士》</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">日本</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">勇敢、牺牲、行动信仰</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">被赞颂、被传承</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">外向的责任伦理与悲壮宿命</td>
</tr>
</tbody></table></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">一个讲“做好事的人被否定”，一个讲“赴死的人被纪念”。这就是文明心理的分水岭：一个崇尚温和，一个崇尚行动；一个沉思，一个冲动。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">结语：苟全与赴死之间</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">中国的悲剧在于温良的善被视为软弱，日本的悲剧在于勇敢的行动被体制利用。武训的善，孤独到无人理解；武士的勇，崇高到被神化。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">一个文明把“活着”视为智慧，另一个文明把“死去”视为荣耀。而真正成熟的文明，应当能在<strong style="color:#007acc;font-weight:bold;">活着的善意</strong>与<strong style="color:#007acc;font-weight:bold;">行动的勇气</strong>之间取得平衡。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">或许人类真正需要的，不是更勇敢的武士，也不是更悲悯的武训，而是能让善良与勇气同时存在的理性社会。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">总结</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文通过对比《武训传》和《七武士》，从地理、政治、文化、社会心理等多维度剖析了中日文明的深层差异。中国文明倾向于内部秩序与自我撕裂，日本文明则以外部扩张与行动信仰为核心。两种文明各有悲剧根源，唯有在善良与勇气之间取得平衡，才能走向真正的成熟。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">参考文献</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. 山本常朝，《叶隐闻书》，1716</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. 诸葛亮，《出师表》</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. 史景迁，《太平天国的幽灵》，生活·读书·新知三联书店，2012</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. 黑泽明，《七武士》，1954</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">5. 《武训传》，1951</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">6. 黄仁宇，《万历十五年》，生活·读书·新知三联书店，1982</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">7. 司马辽太郎，《坂上之云》，文艺春秋社，1971</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">8. 张英进，《中国电影与国家意识》，牛津大学出版社，1999</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p>
</blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/civilizational-differences-china-japan-films/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=c9dddc53&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171093%26idx%3D1%26sn%3Da3d8b5b787abd10b2cd2cfae4e1d1b53">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Sat, 18 Oct 2025 14:31:00 +0800</pubDate>
    </item>
    <item>
      <title>云原生企业转型：AI 原生时代的深度解析</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171082&amp;idx=1&amp;sn=596a8a0eb213180234615655c96c4fba</link>
      <description>深入分析 AI 原生时代下云原生企业的转型路径，探讨生成式 AI 对行业的影响与未来趋势。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-10-15 09:15</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=1cb8d6c6&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMUKywjcKFsPVLvMWn1qTyiaraqOIZUF9bWvdFY61ZjkKXg5LXNBRXLBCWLAmImbJPXD0zMfKErEQQ%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>深入分析 AI 原生时代下云原生企业的转型路径，探讨生成式 AI 对行业的影响与未来趋势。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>深入分析 AI 原生时代下云原生企业的转型路径，探讨生成式 AI 对行业的影响与未来趋势。</p></blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在过去一年里，我发现云原生产业迎来了一个显著趋势：大量原先专注于云原生的企业开始拥抱生成式 AI，甚至把自己的产品线重新定位为&#34;AI 原生&#34;或&#34;智能代理平台&#34;。这种转型不仅体现在功能层面的升级，还涉及业务模型、用户定位和市场战略的调整。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">引子</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2025 年 9 月，一则新闻引起了我的注意：Rancher 创始人梁盛 (Sheng Liang) 宣布其新公司 Acorn Labs 将从 Kubernetes 管理工具全面转向 AI 代理平台（见 Why Rancher&#39;s Founders Pivoted From Kubernetes to Agentic AI）。梁盛是我相识 7 年的朋友，他是一位连续创业者，之前创立的 Cloud.com 被 Citrix 收购，后来又创立了在云原生时代名声大噪的 Rancher，最终被 SUSE 收购。这是他第三次创业，这次他选择离开已经成熟但竞争激烈的 Kubernetes 市场，转而押注于 AI 代理这个全新领域。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">梁盛在接受采访时表示：&#34;我们看到 AI 代理将成为软件开发的主要方式，就像云原生曾经改变基础设施一样，AI 代理将重新定义软件构建和交付的方式。&#34;他认为，虽然 Kubernetes 市场规模庞大，但已经被大厂主导，创业公司的机会窗口已经关闭。相比之下，AI 代理领域仍处于早期阶段，需要全新的基础设施、工具和最佳实践。Acorn Labs 的新平台旨在让开发者无需深入的机器学习知识，就能轻松创建、部署和管理 AI 代理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这个转型决策让我陷入了思考。梁盛作为云原生领域的先行者，他的战略转向不是一时兴起，而是基于对技术趋势的深刻洞察。如果连 Rancher 这样的云原生领军企业都在转向 AI 原生，这是否意味着整个行业正在经历一次范式转移？本文将以此为引子，结合 Gitpod 改名为 Ona（见 Gitpod is now Ona, moving beyond the IDE）、流量管理、基础设施管理、代码构建和 DevOps 等不同领域的代表性公司，对 AI 大潮下传统 SaaS/云原生/基础设施/开发者工具公司的转型路径和趋势进行深度分析。</p><img alt="AI 原生时代下的云原生企业转型路径" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="png" data-w="638" data-ratio="0.6363636363636364" src="https://rss.koyangslash.workers.dev/img-proxy/?k=2c2a5662&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcMUKywjcKFsPVLvMWn1qTyiaEKTn9TRl5dicLBVUviccYwsQlaY67MYyqPLJ6xlia2sc4cjibLKmaL0TOA%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">AI 原生时代下的云原生企业转型路径</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">AI 浪潮对云原生领域的影响</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">大语言模型（LLM）和生成式 AI 的爆发式增长导致企业对 AI 接入与治理的需求激增。以 API 网关领域为例（见我之前写的博客 深入解析 AI Gateway：新一代智能流量控制中枢），传统 API 网关在 AI 场景下遇到多方面挑战：一是 LLM 调用计费依据令牌数而非请求次数，需要对每个请求的 token 使用量进行精细管理；二是 LLM 输出存在不可预测性，网关不仅要检查输入还要过滤返回内容；三是 AI 应用常常需要同时使用多个模型或多个供应商，传统网关缺乏根据请求内容动态路由到最合适模型的能力；四是需要在高并发、流式返回的场景下进行实时性能与成本优化。文章还指出，自 2023 年下半年起，Envoy、Apache APISIX、Kong、Solo.io、Tetrate、F5 等社区或厂商纷纷发布 AI Gateway 项目或产品，用插件或模块的方式将 AI 流量管理和安全治理纳入网关能力范畴。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这一波 AI 浪潮带来的核心变化可归纳为：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">工作负荷更加&#34;AI 化&#34;</strong>：开发者开始要求平台提供自然语言生成代码、自动部署和环境配置等功能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">成本与风险新维度</strong>：生成式模型按令牌计费且响应不可预测，促使企业建立新的治理手段和成本控制策略。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">多模型与混合云架构</strong>：为了避免供应商锁定，企业倾向同时使用多个模型并在公有云和本地部署混合使用，这对流量管理与安全合规提出了更高要求。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">从工具到代理</strong>：很多厂商将生成式 AI 功能升级为&#34;智能代理&#34;，能够理解上下文并代替人完成任务，意味着产品形态从辅助工具转向半自主系统。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">案例研究：云原生企业的 AI 转型</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下面我们选择几个不同领域的代表性企业进行深入分析。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Gitpod → Ona：从浏览器 IDE 到 AI 软件工程代理</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Gitpod 曾是颇受欢迎的在线开发环境平台，它提供了浏览器中的 VS Code 和预配置的开发容器。然而，随着生成式 AI 的崛起，公司在 2025 年 9 月宣布重塑品牌并更名为 <strong style="color:#007acc;font-weight:bold;">Ona</strong>。新官网解释了这一转型：公司认为&#34;IDE 定义了上一代，智能代理将定义下一代&#34;，工程师需要的不是一个简单的 IDE，而是能让 AI 代理陪伴整个软件生命周期的&#34;任务控制中心&#34;。新平台重新定位为&#34;为个人团队提供软件工程代理的使命控制台&#34;，允许用户在 Ona 上探索、分解、委派、编码、评审和编写文档，它由三大组件组成：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Ona Environments</strong>：沙箱化的云开发环境，使用 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">devcontainer.json</code> 和 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">automations.yml</code> 进行声明式定义，可在 Ona 云或私有 VPC 中运行。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Ona Agents</strong>：具备私有模型访问和 MCP（Model Context Protocol）支持的工程代理，用户可通过对话界面或 VS Code 浏览器版与代理协作，使用斜杠命令共享工程师最佳实践。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Ona Guardrails</strong>：提供企业级的安全合规与控制，支持 RBAC、OIDC、命令拒绝列表、审计日志，以及在企业 VPC 内部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Ona 还公布了内部使用效果：他们的 Ona Agents 在一周内共同撰写了公司 60% 的合并 PR，并贡献了 72% 的代码。这些变化表明 Gitpod 正在从在线 IDE 供应商转型为具有自动化编程代理、流程管理和安全控制的 AI 原生开发平台。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Tetrate：利用服务网格经验跨足 AI 流量管理</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Tetrate 作为笔者曾工作多年的公司，以维护和商业化 Envoy/Istio 服务网格而闻名。随着如今众多企业将多个 LLM 集成到业务中，Tetrate 在 2025 年推出了 <strong style="color:#007acc;font-weight:bold;">Agent Router Service (TARS)</strong>，用于动态路由 AI 请求并优化模型成本。官方博客指出，该服务在 Goose 集成中提供一键配置，用户无需维护多个模型供应商的 API 密钥即可访问 GPT‑5、Claude Opus 4.1、Grok 4 以及开源模型等前沿模型。它还提供 $10 免费额度，并在后台根据任务复杂度自动在模型间切换，支持统一认证、自动故障转移和成本优化。更重要的是，Tetrate 将在服务网格中积累的 <strong style="color:#007acc;font-weight:bold;">智能路由、负载均衡和弹性机制</strong> 应用于 AI 场景，使 AI 调用能够根据令牌价格和响应时间等因素进行动态路由。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">公司在新闻稿中表示，TARS 能根据推理成本、查询复杂度、模型性能或任务特异性将 AI 查询动态路由到最合适的模型。它支持多租户或本地部署，并允许开发者使用自己的 API 密钥或 Tetrate 提供的密钥接入模型。内置功能包括自动回退到更可靠或更便宜的模型、交互式提示调试和 A/B 测试。对于聊天机器人，它会将会话路由到响应更快或更具成本效益的模型；对于代码生成，它能根据编程语言、上下文和合规要求动态选择模型；对于自主代理，它协调多个 LLM 调用并控制成本。Tetrate 还将其 AI 网关与 <strong style="color:#007acc;font-weight:bold;">Agent Operations Director</strong> 结合，通过 NIST 和 FINOS 标准加强模型治理和合规性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">此外，Tetrate 正在通过 AI 网关保持竞争力，其主导的开源项目 Envoy AI Gateway 为组织提供统一的 API，以管理来自多个模型的请求。新推出的路由服务让开发者可以用 Tetrate 提供的或自有的 API 密钥访问不同模型，并通过提示调试、自动回退及 A/B 测试避免供应商锁定。业内分析师认为，随着开发者同时使用多个 LLM，AI 流量路由器已成为不可或缺的基础设施，它们帮助在性能和成本之间取得平衡。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Replit Agent：从 IDE 到&#34;生成应用&#34;平台</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在线开发平台 Replit 在 2024 年 9 月发布了 <strong style="color:#007acc;font-weight:bold;">Replit Agent</strong>，定位为能够从自然语言直接创建和部署应用的 AI 系统。借助 Replit Agent，用户只需几句话和几分钟，就可以将一个想法变成部署好的应用。Replit Agent 像一名对等程序员，它会自动配置开发环境、安装依赖并执行代码。官网介绍强调，这种方式&#34;无需代码&#34;，用户告诉 Agent 自己想做什么，它会自动生成应用和网站，甚至可以上传一张参考截图让 Agent 完成相似页面。该平台强调 Agent 能够迅速从想法生成原型，并拥有修复 bug 的能力，集成所有构建工具于一处。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Replit 的转型说明，在线编程平台正在向&#34;应用生成器&#34;演变：用户的交互方式从编写代码转为描述需求，平台则通过大模型与执行环境的结合快速交付结果。这种模式降低了软件开发门槛，同时也模糊了开发者与非开发者的界限。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">GitLab Duo：AI 原生 DevSecOps 平台</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">GitLab 在 2024 年推出了 <strong style="color:#007acc;font-weight:bold;">GitLab Duo</strong>，致力于在整个软件生命周期中引入生成式 AI。GitLab Duo 声称是唯一覆盖&#34;从规划和编码到安全与部署&#34;的 AI 解决方案。它强调隐私优先，企业可以控制哪些用户和项目使用 AI 功能，并保证私有代码不会用于训练模型。该平台通过单一界面集成最适合各个环节的模型，提供智能代码建议、自动化安全修复、实时问答和生成测试等功能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2025 年 9 月发布的 GitLab 18.4 版本进一步提出了&#34;<strong style="color:#007acc;font-weight:bold;">AI 原生开发</strong>&#34;愿景，包括以下亮点：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">AI Catalog 与自定义代理</strong>：用户可以在 AI Catalog 中创建、共享和协作自定义代理，例如为产品规划、文档编写或安全合规构建专属代理，让代理像团队成员一样执行特定任务。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Agentic Chat</strong>：让开发者与代理自然对话。新版支持对话会话管理、在会话中选择不同模型，以及改进的工具调用审批，使协作更流畅。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Knowledge Graph</strong>：为代理和人提供项目的知识图谱，将代码文件、路由和引用关联起来，使开发者可以在聊天中查询&#34;项目中有哪些路由文件&#34;或&#34;某次修改影响了哪些模块&#34;等问题。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Fix Failed Pipelines Flow</strong>：利用 AI 实现业务感知的流水线修复。该流程不仅分析失败日志，还结合业务优先级和跨项目依赖生成修复方案，并自动创建包含业务背景的 merge request。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">模型选择与治理</strong>：18.4 版本提供模型选择功能，允许用户在不同 LLM 之间切换，并在自管理环境中支持 GPT -5 或开源模型，满足合规需求。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">GitLab 的转型展示了 DevSecOps 平台如何将生成式 AI 深度嵌入现有流程：通过代理化的协作方式自动完成规划、编码、测试和运维任务，同时强调隐私和模型治理。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Pulumi Copilot：面向基础设施的对话式 AI</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">基础设施即代码（IaC）平台 Pulumi 在 2024 年推出了 <strong style="color:#007acc;font-weight:bold;">Pulumi Copilot</strong>。官方文档将其描述为&#34;集成到 Pulumi Cloud 的对话式聊天界面，结合生成式 AI 与 Pulumi Cloud 的强大能力，使用户能够更快速完成云基础设施管理任务&#34;。Copilot 的核心能力包括：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">访问和探索云资源</strong>：用户可以查询任何由 Pulumi 管理的资源状态，并通过 Pulumi Insights 的 Supergraph 支持访问 160 多家云供应商的数据，了解项目、堆栈、更新、部署、审计日志等历史信息。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">基础设施编写与部署</strong>：Pulumi AI 以聊天方式帮助用户编写 IaC 代码并直接在 Copilot 中部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">访问实时云元数据</strong>：通过新增的&#34;技能&#34;，Copilot 可实时获取 AWS、Azure、Kubernetes 等平台的元数据，结合 Pulumi 世界观分析资源使用、成本和尚未纳入管理的基础设施。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">系统提示与自定义</strong>：管理员可通过系统提示对 Copilot 的默认行为进行自定义，适配团队需求与策略。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Pulumi Copilot 使用 OpenAI 的 GPT‑4o 模型，它继承 Pulumi Cloud 的 RBAC 权限模型，目前仅能执行只读操作，未来将扩展到可执行操作并提供可控的读写权限。这一转型展示了 IaC 工具厂商如何利用 AI 降低基础设施运维门槛，并通过对话式体验提供成本分析和快速部署功能。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Datadog Bits AI：自动化运维与安全分析</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">可观测性平台 Datadog 在 2025 年推出了 <strong style="color:#007acc;font-weight:bold;">Bits AI</strong> 套件，包括 Bits AI SRE、Bits AI Security Analyst 和 Bits AI Dev Agent。来自技术博客的梳理显示，Bits AI SRE 通过生成多个假设并验证各类监控数据，为根因分析提供自动化支持。它像一名 24/7 的自治队友，实时分析日志、指标、追踪以及 Watchdog 警报，并将假设分类为已验证、已否定或需要进一步调查，从而大幅缩短人工排查时间。实际案例中，Bits 已帮助全球运营团队在高峰期加速故障排查。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Bits AI Security Analyst 通过 MITRE ATT&amp;CK 框架自动规划和执行安全调查，主动处理 Datadog Cloud SIEM 的信号，并提供可操作的建议。Bits AI Dev Agent 则聚焦代码修复，它会监控遥测数据、识别关键问题并生成生产级的修复 PR，让工程师直接在代码仓库中审查和合并。这些代理共享模型上下文并可共同分析异常或扩容基础设施。平台声称，该套件可将安全调查时间从 30 分钟缩短至 30 秒，并为公司节省数千小时工程时间。Bits AI 的推出标志着可观测性供应商正从被动监控转向主动诊断和自动修复，构建 AI 原生运维体系。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">趋势分析：不同领域企业的转型路径与启示</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">综合上述案例，可以发现传统云原生公司转向 AI 原生存在一些共性策略和差异化路径：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">核心产品重塑与品牌升级</strong>：Gitpod 直接更名为 Ona，并将产品定位从在线 IDE 升级为&#34;软件工程代理中心&#34;，体现了彻底的战略转型。其他如 GitLab、Pulumi 则在原有品牌下推出新平台，但都突出&#34;AI 原生&#34;概念。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. <strong style="color:#007acc;font-weight:bold;">借助现有技术优势拓展新场景</strong>：Tetrate 利用其在服务网格和 Envoy 领域的技术积累，把智能路由、负载均衡等能力迁移到 AI 流量管理，实现平滑转型。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. <strong style="color:#007acc;font-weight:bold;">构建&#34;智能代理&#34;平台化生态</strong>：GitLab 的 AI Catalog、Agentic Chat 与自定义代理，让企业可以像管理团队成员一样管理 AI 代理。Ona 和 Replit 也都强调代理（agent）概念，用户与代理协作完成开发任务。这意味着厂商正在从提供单一 AI 功能转向提供可组合、可扩展的代理生态系统。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. <strong style="color:#007acc;font-weight:bold;">重视安全、合规与成本治理</strong>：在企业场景中，生成式 AI 的使用需要细粒度权限控制、审计和合规。Tetrate 的路由服务支持隔离部署并与合规框架对齐；GitLab 提供 AI 透明中心和模型选择机制；Pulumi 与 Datadog 都强调数据安全和权限模型。另外，Tetrate 路由服务和 AI Gateway 通过按令牌计费与自动降级模式帮助控制成本。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">5. <strong style="color:#007acc;font-weight:bold;">多模型与开放生态</strong>：为了避免垄断和不确定性，多个平台支持用户自行选择模型或使用开源模型。Tetrate 支持 GPT‑5、Claude、Grok 等多种模型；GitLab 允许自定义模型选择并计划在自托管版支持 GPT‑5 和开源模型；Pulumi 允许管理员自定义系统提示和模型行为。这些趋势预示着未来的 AI 平台会越来越强调多模型互操作性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">6. <strong style="color:#007acc;font-weight:bold;">从自动化协助到自主决策</strong>：Replit Agent 可以完成应用搭建和部署；GitLab Duo 能生成代码和修复 CI 流水线；Pulumi Copilot 帮助编写与部署基础设施；Datadog Bits AI 能直接生成修复 PR 并自动实施。这些功能说明企业正在尝试让 AI 从&#34;助手&#34;升级为具备决策能力的&#34;执行者&#34;。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">与此同时，也要看到转型的挑战：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">技术复杂度和模型可靠性</strong>：LLM 仍存在幻觉和安全风险，如何在自动化与人工审核之间取得平衡是重要课题。Tetrate、GitLab 等均在产品中加入了&#34;手动/辅助模式&#34;和审计机制，以防止代理过度自动化导致失控。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">市场教育与产品成熟度</strong>：AI Gateway 等概念仍然新颖，有些厂商可能只是&#34;换壳&#34;宣传，实际功能并不成熟。企业需要结合自身场景评估 AI 方案的真正价值。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">成本与商业模式</strong>：AI 服务成本高昂且计费模型复杂，平台需要提供灵活的成本管理功能（如 Tetrate 的 cost governance 和 GitLab 的 ROI 度量），同时也要探索新的定价策略。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">结论与未来展望</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">过去一年里，云原生生态中的多家公司通过重塑产品、引入智能代理和 AI 流量管理，积极拥抱生成式 AI。无论是将传统 IDE 转型为 AI 开发控制台的 Ona，利用服务网格经验打造 AI 流量路由器的 Tetrate，还是在 DevSecOps、IaC 和可观测性领域推出代理化功能的 GitLab、Pulumi 和 Datadog，这些实践都表明 <strong style="color:#007acc;font-weight:bold;">AI 原生</strong> 正成为下一轮技术浪潮。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">未来我们可能看到：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">平台化的代理生态</strong>：企业不再仅仅购买单个 AI 功能，而是选择能够托管、训练和编排多种智能代理的平台；这些代理将覆盖规划、开发、测试、运维和安全的各个环节，并能够互相协作。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">开放标准和互操作性</strong>：Kubernetes Gateway API、Model Context Protocol 等标准有望促进跨平台互联，使代理可以在不同工具间共享上下文和模型能力。开源社区将在这一过程中扮演重要角色。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">更严格的治理与监管</strong>：随着 AI 能力的增强，权限、合规和成本控制将成为平台竞争力的一部分。企业需要在使用 AI 提升效率的同时，确保数据安全和伦理规范。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">从工具到伙伴</strong>：生成式 AI 不只是自动化工具，它将成为团队的重要伙伴。开发者与代理的互动方式更像协作而非指令，这要求平台在交互体验和人机协同方面持续创新。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">总之，AI 原生时代带来了软件工程范式的深刻变化。对于云原生领域的企业而言，抓住这一波浪潮意味着机会与挑战并存：既要充分释放 AI 带来的效率提升和创新空间，又要在安全、可靠和合规的前提下构建稳健的产品和生态。我们正处于这一转型的起点，未来值得期待。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">参考资料</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. Gitpod is now Ona, moving beyond the IDE - ona.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. Gitpod rebrands as Ona, now an AI-driven dev platform - theregister.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. Tetrate: Safe, Fast, and Profitable AI for the Enterprise - tetrate.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. Simplify Local AI Agents with Goose and Tetrate Agent Router Service - tetrate.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">5. Tetrate Launches Agent Router Service to Streamline GenAI Cost Control - tetrate.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">6. Tetrate steps up to handle traffic management for AI agents - siliconangle.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">7. In-Depth Analysis of AI Gateway: The New Generation of Intelligent Traffic Control Hub - jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">8. Replit AI – Turn natural language into apps and websites - replit.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">9. Introducing Replit Agent - blog.replit.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">10. GitLab Duo - about.gitlab.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">11. GitLab 18.4: AI-native development with automation and insight - about.gitlab.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">12. Pulumi Copilot | Pulumi Docs - pulumi.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">13. AI-First Observability: How DASH 2025 Redefined Autonomous Operations - medium.com</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友。</strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/ai-native-era-beginning/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=8c5b7693&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171082%26idx%3D1%26sn%3D596a8a0eb213180234615655c96c4fba">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Wed, 15 Oct 2025 09:15:00 +0800</pubDate>
    </item>
    <item>
      <title>规范驱动开发：在 AI 编程中将 Markdown 作为编程语言</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171080&amp;idx=1&amp;sn=34c067b426a004b69c7d06f07ce93eda</link>
      <description>本文介绍如何将 Markdown 作为 AI 编程的“规范驱动开发”语言，通过规范文档与代码生成的深度融合，提升协作效率与代码一致性，为 AI 辅助开发带来全新范式。</description>
      <content:encoded><![CDATA[<p>
<span>Jimmy Song</span> <span>2025-10-14 08:05</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=637b44f1&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNk7o7wiahOJ6rMIw8YCfBo3Dib0ArFaGiaRyKjrBgXCZ9yibCKIQtq7Mia8aRXn8bTsq4WduAnlVZgrdA%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>本文介绍如何将 Markdown 作为 AI 编程的“规范驱动开发”语言，通过规范文档与代码生成的深度融合，提升协作效率与代码一致性，为 AI 辅助开发带来全新范式。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>本文介绍如何将 Markdown 作为 AI 编程的“规范驱动开发”语言，通过规范文档与代码生成的深度融合，提升协作效率与代码一致性，为 AI 辅助开发带来全新范式。</p></blockquote><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文翻译自 Spec-Driven Development: Using Markdown as a Programming Language When Building with AI，版权归 GitHub 所有，原文作者 @wham。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">引言</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 AI 编程助手（如 GitHub Copilot）日益普及的今天，如何高效、可控地驱动 AI 生成代码成为开发者关注的焦点。本文以 GitHub 官方博客为蓝本，介绍一种创新的“规范驱动开发”方法：将 Markdown 作为编程语言，驱动 AI 生成和维护应用代码，实现文档与实现的高度同步。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">背景与问题</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">传统的 AI 编程助手工作流通常是“写一个做 X 的应用 A”，然后不断迭代：“添加功能 Y”、“修复 bug Z”。这种方式虽然高效，但随着项目复杂度提升，AI 助手容易遗忘上下文、重复询问、甚至忽略先前决策，影响开发体验和产出质量。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">为了解决这一问题，一些 AI 编程助手支持自定义指令文件（如 GitHub Copilot 的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">copilot-instructions.md</code>），用于记录应用目标和设计决策。然而，手动同步文档和实现往往繁琐且易被忽略。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">规范驱动开发理念</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">作者提出了一种全新的思路：<strong style="color:#007acc;font-weight:bold;">将整个应用的规范和实现都写在 Markdown 文件中，让 AI 编程助手“编译”成实际代码。</strong> 以 GitHub Brain MCP Server 项目为例，开发者几乎不再直接编辑 Go 代码，而是通过维护 Markdown 规范文件驱动整个开发流程。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这种方法不仅适用于 Go，也适用于任何支持 AI 编程助手的语言和平台。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">关键文件与目录结构</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在该工作流中，主要涉及以下四个文件：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">.
├── .github/
│   └── prompts/
│       └── compile.prompt.md
├── main.go
├── main.md
└── README.md
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">整体流程为：开发者编辑 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">README.md</code> 或 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code>，通过 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">compile.prompt.md</code> 让 AI 编程助手生成 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.go</code>，再像普通 Go 应用一样构建和运行。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">主要文件说明</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在规范驱动开发中，每个文件承担着不同的角色。以下分别介绍其作用和内容。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">用户文档：README.md</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">README.md</code> 主要面向用户，提供安装和使用说明。如果是库项目，则包含 API 文档。以下为示例应用的精简片段：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code><span style="color:#6a9955;"># GitHub Brain MCP Server</span>

**GitHub Brain** 是一个用于汇总 GitHub 讨论、Issue 和 PR 的实验性 MCP 服务器。

<span style="color:#6a9955;">## 用法</span>

<span style="color:#ce9178;">``</span><span style="color:#ce9178;">`sh
go run main.go &lt;command&gt; [&lt;args&gt;]
`</span><span style="color:#ce9178;">``</span>

**工作流：**

<span style="color:#b5cea8;">1</span>. 使用 <span style="color:#ce9178;">`pull`</span> 命令填充本地数据库。
<span style="color:#b5cea8;">1</span>. 使用 <span style="color:#ce9178;">`mcp`</span> 命令启动 MCP 服务器。

<span style="color:#6a9955;">### __STRING_PLACEHOLDER_5__</span>

拉取 GitHub 数据填充本地数据库。

示例：

<span style="color:#ce9178;">``</span><span style="color:#ce9178;">`sh
go run main.go pull -o my-org
`</span><span style="color:#ce9178;">``</span>

参数说明：
- <span style="color:#ce9178;">`-t`</span>：你的 GitHub 个人访问令牌。**必填。**
- <span style="color:#ce9178;">`-o`</span>：要拉取数据的 GitHub 组织。**必填。**
- <span style="color:#ce9178;">`-db`</span>：SQLite 数据库目录路径。默认：当前目录下的 <span style="color:#ce9178;">`db`</span> 文件夹。

<span style="color:#6a9955;">### __STRING_PLACEHOLDER_13__</span>

使用本地数据库启动 MCP 服务器。

...README.md 其余内容...
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">通过将 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">README.md</code> 内容嵌入 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code>，实现文档与实现的同步更新。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">规范说明：main.md</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code> 是应用的“源代码”规范文件。每次添加功能或修复 bug，均在此文件中描述。示例片段如下：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code><span style="color:#6a9955;"># GitHub Brain MCP Server</span>

AI 编程助手规范说明。面向用户的文档见 [README.md](README.md)。

<span style="color:#6a9955;">## CLI</span>

根据 [Usage](README.md<span style="color:#6a9955;">#usage) 部分实现 CLI。严格遵循参数/变量命名。仅支持 __STRING_PLACEHOLDER_0__ 和 __STRING_PLACEHOLDER_1__ 命令。</span>

<span style="color:#6a9955;">## pull</span>
- 将 CLI 参数和环境变量解析为 <span style="color:#ce9178;">`Config`</span> 结构体：
- <span style="color:#ce9178;">`Organization`</span>：组织名（必填）
- <span style="color:#ce9178;">`GithubToken`</span>：GitHub API Token（必填）
- <span style="color:#ce9178;">`DBDir`</span>：SQLite 数据库路径（默认：<span style="color:#ce9178;">`./db`</span>）
- 始终使用 <span style="color:#ce9178;">`Config`</span> 结构体，避免多次读取环境变量
- 拉取内容：仓库、讨论、Issue、PR、团队
- 使用 <span style="color:#ce9178;">`log/slog`</span> 自定义日志器，控制台输出最近 <span style="color:#b5cea8;">5</span> 条带时间戳的日志

...main.md 其余内容...
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">注意，面向用户的文档内容直接嵌入了规范说明。这保证了文档和实现同步。如果我想给 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">-o</code> 参数加个别名，只需更新 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">README.md</code>，无需额外操作。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">再看一段 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code> 的片段：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code><span style="color:#6a9955;">### Discussions</span>
- 针对每个仓库（<span style="color:#ce9178;">`has_discussions_enabled: true`</span>）查询讨论
- 在首次拉取前，从数据库记录最近的仓库讨论 <span style="color:#ce9178;">`updated_at`</span> 时间戳

<span style="color:#ce9178;">``</span><span style="color:#ce9178;">`graphql
{
  repository(owner: &#34;&lt;organization&gt;&#34;, name: &#34;&lt;repository&gt;&#34;) {
    discussions(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }) {
      nodes {
        url
        title
        body
        createdAt
        updatedAt
        author {
          login
        }
      }
    }
  }
}
`</span><span style="color:#ce9178;">``</span>
- 如果仓库不存在，删除该仓库及其所有关联数据后继续
- 按 <span style="color:#ce9178;">`updatedAt`</span> 倒序查询讨论
- 遇到 <span style="color:#ce9178;">`updatedAt`</span> 早于记录时间戳的讨论时停止拉取
- 以 <span style="color:#ce9178;">`url`</span> 为主键保存或更新
- 保留讨论的 Markdown 正文

...main.md 其余内容...
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这实际上就是用 Markdown 和自然语言编程：描述变量、循环和逻辑条件。你可以用 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">if</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">foreach</code>、<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">continue</code> 等常用关键字，还能用 Markdown 链接 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">[]()</code> 作为“导入”。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">数据库结构同样用 Markdown 描述：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code><span style="color:#6a9955;">## 数据库</span>

SQLite 数据库存储于 <span style="color:#ce9178;">`{Config.DbDir}/{Config.Organization}.db`</span>（如需自动创建文件夹）。避免使用事务，每个 GraphQL 项目即时保存。

<span style="color:#6a9955;">### 表结构</span>

<span style="color:#6a9955;">#### table:repositories</span>
- 主键：<span style="color:#ce9178;">`name`</span>
- 索引：<span style="color:#ce9178;">`updated_at`</span>
- <span style="color:#ce9178;">`name`</span>：仓库名（如 <span style="color:#ce9178;">`repo`</span>），不含组织前缀
- <span style="color:#ce9178;">`has_discussions_enabled`</span>：布尔值，是否启用讨论功能
- <span style="color:#ce9178;">`has_issues_enabled`</span>：布尔值，是否启用 Issue 功能
- <span style="color:#ce9178;">`updated_at`</span>：最后更新时间戳

...main.md 其余内容...
</code></pre></div><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">AI 编程助手提示文件：compile.prompt.md</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">compile.prompt.md</code> 采用 GitHub Copilot 的 prompt file 格式，指示 AI 将 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code> 编译为 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.go</code>。示例内容如下：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code>---
mode: agent
---
- 按照 [the specification](../../main.md) 更新应用
- 用 VS Code 任务构建代码。不要让我手动运行 <span style="color:#ce9178;">`go build`</span> 或 <span style="color:#ce9178;">`go test`</span>。
- 对每个用到的库，获取其 GitHub 主页文档和示例。
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">所有关键信息均在 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code>，提示文件只需简单指令，便于迁移和复用。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">工作流与实践</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">规范驱动开发的循环流程如下：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. 编辑 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code> 或 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">README.md</code>，更新规范说明。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. 让 AI 编程助手编译生成 Go 代码。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. 运行并测试应用，发现问题后回到规范文件修正。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. 重复以上步骤，持续迭代。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 VS Code 的 GitHub Copilot 中，可通过 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">/</code> 命令调用提示，自动完成规范到代码的转换。</p><img alt="在 VS Code 的 GitHub Copilot 中使用 / 命令调用 AI 编程助手提示。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1080" data-ratio="0.5027777777777778" src="https://rss.koyangslash.workers.dev/img-proxy/?k=6b5110c4&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNk7o7wiahOJ6rMIw8YCfBo3n8dmBbzQs9IujyDfrSMTBpb2ADw04QfKcrhdwF0NY8ZPBrqB5e4fvw%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">在 VS Code 的 GitHub Copilot 中使用 / 命令调用 AI 编程助手提示。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">如规范较大，可在提示中加入 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">focus on &lt;the-change&gt;</code> 引导 AI 关注具体变更。</p><img alt="演示如何用 / 命令让 Copilot 关注特定变更。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1080" data-ratio="1.6018518518518519" src="https://rss.koyangslash.workers.dev/img-proxy/?k=de6430d7&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNk7o7wiahOJ6rMIw8YCfBo3fmU7iavTKicDLh7Y0vjK8aUZ0ODlFcqmSer4ojoAveibouhVpiaU1Q2Eaw%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">演示如何用 / 命令让 Copilot 关注特定变更。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">编码体验</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code> 里编程要求开发者清晰描述需求，这也是软件开发的核心难点。AI 助手不仅能自动补全，还能推荐最佳实践。例如，为所有 MCP 工具添加分页功能时，Copilot 会自动推荐合适的参数和风格。</p><img alt="Copilot 推荐分页风格和参数名。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1080" data-ratio="1.5175925925925926" src="https://rss.koyangslash.workers.dev/img-proxy/?k=ba2a0d74&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNk7o7wiahOJ6rMIw8YCfBo3icWTCWMfTddcOSmP4Iibp8CBRSMCwghW8gEILPj1OKaDpbyiavStLg3icg%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">Copilot 推荐分页风格和参数名。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">规范整理（Linting）</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">随着规范文件增大，结构可能变乱。可通过 lint.prompt.md 让 AI 帮助整理规范，提升清晰度和一致性。示例内容如下：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background: rgb(30, 30, 30);color: rgb(212, 212, 212);border-width: medium;border-style: none;border-color: currentcolor;padding: 15px;margin: 0px;border-radius: 5px;font-family: Consolas, Monaco, monospace;font-size: 14px;line-height: 1.45;white-space: pre;overflow-wrap: normal;overflow-x: visible;"><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">---
mode: agent
---
- 优化 [the app specification](../../main.md) 的清晰度和简洁性
- 把英语当作编程语言处理
- 统一术语，避免 pull/get/fetch 等同义词混用
- 删除重复内容
- 保留所有重要细节
- 不要修改 Go 代码，只优化 Markdown 文件
- 不要修改本提示内容
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">通过 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">/</code> 命令调用后，AI 会自动整理 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">main.md</code>，再用 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">compile.prompt.md</code> 编译为代码。</p><img alt="Copilot 整理和 lint 规范说明，提升清晰度和简洁性。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-type="jpeg" data-w="1080" data-ratio="1.387037037037037" src="https://rss.koyangslash.workers.dev/img-proxy/?k=4950873a&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNk7o7wiahOJ6rMIw8YCfBo3LmdWId026KIq4D6fSZSBDMzv2hr5iafudBmGoqOz32wBCfbc450FDmQ%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">Copilot 整理和 lint 规范说明，提升清晰度和简洁性。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">实践体会与展望</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">经过数月实践，作者总结如下：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">方法可行且高效。</strong> Copilot 升级后体验持续提升。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">规范文件变大后编译速度变慢。</strong> 可尝试将规范拆分为多个模块。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">测试依然重要。</strong> 规范描述预期行为，测试验证实际效果。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">未来还可探索直接用规范驱动生成其他语言的应用，进一步提升自动化和一致性。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">总结</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">规范驱动开发通过将 Markdown 作为编程语言，极大提升了 AI 编程助手的协作效率和代码一致性。开发者只需维护规范文档，AI 即可自动生成和维护代码，实现文档与实现的高度同步。这一方法为 AI 辅助开发提供了全新范式，值得在更多场景中推广实践。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">参考文献</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. Spec-Driven Development: Using Markdown as a Programming Language When Building with AI - github.blog</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. GitHub Brain MCP Server - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. GitHub Copilot 指令文件官方文档 - docs.github.com</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/trans/spec-driven-development-using-markdown/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=181ff338&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171080%26idx%3D1%26sn%3D34c067b426a004b69c7d06f07ce93eda">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Tue, 14 Oct 2025 08:05:00 +0800</pubDate>
    </item>
    <item>
      <title>智能体设计模式：Agentic Design Patterns 中文版电子书分享</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171075&amp;idx=1&amp;sn=9a4556c3e836ba34234f7ad510d58e62</link>
      <description>分享我翻译的《Agentic Design Patterns》，书中涵盖了全面的智能体设计模式，配有示例与图片，适合智能体爱好者学习；本文介绍阅读建议并提供 PDF 下载。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-10-13 08:54</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=20b610b4&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPmbOkhwZUngwE87vajupeNNKXmXFcCjxLBERpJoSWeTkCo27STUVXIZS3VibWzlibUUkbADtC6qevw%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>分享我翻译的《Agentic Design Patterns》，书中涵盖了全面的智能体设计模式，配有示例与图片，适合智能体爱好者学习；本文介绍阅读建议并提供 PDF 下载。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">分享我翻译的《Agentic Design Patterns》，书中涵盖了全面的智能体设计模式，配有示例与图片，适合智能体爱好者学习；本文介绍阅读建议并提供 PDF 下载。</span></p></blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">我在两个月前完成了对《Agentic Design Patterns》的中文翻译工作，使用了一系列 AI 辅助工具来加速翻译过程。总体上我觉得译文比较“信达雅”，术语处理也比较准确，适合对 AI 智能体（agent）感兴趣的读者快速上手与参考。</span></p><p nodeleaf=""><img alt="智能体设计模式封面" class="rich_pages wxw-img" data-ratio="1.413888888888889" data-w="1080" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;width: 258px;height: auto !important;" data-type="jpeg" src="https://rss.koyangslash.workers.dev/img-proxy/?k=6681f0c4&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPmbOkhwZUngwE87vajupeNuMTiaksnxWdpx0XovfyK2vMt27MkyuOx8aFVIs8GVgLuoZAmjSzia0zg%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">智能体设计模式封面</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">为什么值得一读</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本书系统梳理了智能体（Agent）设计领域的 21 种常见模式，涵盖提示链、路由、并行化、反思、工具使用、规划、多智能体协作、记忆管理等内容，并配有可运行的示例代码与配图说明，适合不同背景的读者深入理解和实践。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">内容全面</span></strong><span leaf="">：覆盖主流智能体设计模式，理论与实践结合。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">实例丰富</span></strong><span leaf="">：每章均附有示例代码，便于动手实践。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">易读实用</span></strong><span leaf="">：网页在线阅读体验佳，亦可下载 PDF 离线查阅。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">翻译方法与原则</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在翻译过程中，我结合 AI 辅助工具与人工校对，确保译文“信达雅”，术语统一，表达自然。主要流程如下：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AI 初稿</span></strong><span leaf="">：利用 AI 工具快速生成初译文本。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">人工校阅</span></strong><span leaf="">：逐章校正语序与表达，确保中文读者易于理解。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">术语统一</span></strong><span leaf="">：建立术语表，保证技术名词前后一致。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">如有建议或发现不当之处，欢迎在页面评论区反馈。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">主要内容亮点</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为便于读者快速了解书中核心内容，以下简要列举部分代表性设计模式：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">提示链（Prompt chaining）</span></strong><span leaf="">：将复杂任务拆解为多个子步骤，每步输出作为下一步输入，提升结构化处理能力。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">路由（Routing）</span></strong><span leaf="">：根据意图或状态分发请求至不同子流程或工具，适用于多能力系统。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">并行化（Parallelization）</span></strong><span leaf="">：并行运行多个候选策略并汇总结果，提高可靠性与覆盖面。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">反思（Reflection）</span></strong><span leaf="">：引入自检、批评者或评分机制，持续优化输出质量。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">工具使用（Tool use）</span></strong><span leaf="">：规范智能体与外部工具（如数据库、API）的交互方式。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">更多章节与示例请参见在线书籍目录页面。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">适用人群</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本书适合以下读者群体：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AI 工程师与研究者</span></strong><span leaf="">：希望将大模型集成到更复杂的智能体系统中。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">产品经理与技术经理</span></strong><span leaf="">：关注不同设计模式的权衡与应用场景。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AI 爱好者与学生</span></strong><span leaf="">：通过示例代码快速上手与复现智能体设计。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">获取方式与资源</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">英文原文</span></strong><span leaf="">：Google Doc</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">中文版在线阅读</span></strong><span leaf="">：<a href="https://jimmysong.io/book/agentic-design-patterns/" target="_blank">https://jimmysong.io/book/agentic-design-patterns/</a></span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">中文版 PDF</span></strong><span leaf="">：公众号后台回复数字 <span textstyle="" style="font-weight: bold;">20251013</span> 下载 PDF（约 5.8 MB，288 页）</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/agentic-design-patterns-intro/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=20c969ab&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171075%26idx%3D1%26sn%3D9a4556c3e836ba34234f7ad510d58e62">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Mon, 13 Oct 2025 08:54:00 +0800</pubDate>
    </item>
    <item>
      <title>微软 Agent Framework 介绍：面向 Agentic AI 应用的开源引擎</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171021&amp;idx=1&amp;sn=0e1772bfc11bc194d90213fdf3adfcff</link>
      <description>微软 Agent Framework 是一个开源 SDK 和运行时，旨在简化复杂多智能体系统的构建、部署和管理。它结合了企业级基础和创新编排能力，帮助开发者从实验走向生产。</description>
      <content:encoded><![CDATA[<p>
<span>Jimmy Song</span> <span>2025-10-10 12:18</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=218c3374&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMUKywjcKFsPVLvMWn1qTyiacoAAlNXqgay5Y83kZcjKGxUnfzqWA42oibEq4pKN2ECQz5Tz9MfbdpQ%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>微软 Agent Framework 是一个开源 SDK 和运行时，旨在简化复杂多智能体系统的构建、部署和管理。它结合了企业级基础和创新编排能力，帮助开发者从实验走向生产。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">微软 Agent Framework 是一个开源 SDK 和运行时，旨在简化复杂多智能体系统的构建、部署和管理。它结合了企业级基础和创新编排能力，帮助开发者从实验走向生产。</span></p></blockquote><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文译自微软官方博客 Introducing Microsoft Agent Framework: The Open-Source Engine for Agentic AI Apps，有删减。微软 Agent Framework 融合了企业级基础与创新编排能力，为多智能体 AI 应用提供统一、开源的开发与运行平台，助力开发者从实验走向生产部署。</span></p></blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">智能体（Agent）为何需要新框架</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在过去一年，开发者们以多种形式探索着 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AI 智能体</span></strong><span leaf="">。智能体不仅仅是聊天机器人或 Copilot，更是能够围绕目标推理、调用工具和 API、与其他智能体协作并动态适应的自主软件组件。无论是用于研究的 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">检索智能体</span></strong><span leaf="">、嵌入开发流程的 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">编码智能体</span></strong><span leaf="">，还是保障合规的 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">合规智能体</span></strong><span leaf="">，智能体正逐步成为应用逻辑的新一层。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">然而，从原型到生产的道路并不平坦。许多流行的开源框架各自为政，API 和抽象层不统一，本地开发与云端部署难以无缝衔接。更重要的是，企业级能力如可观测性、合规钩子、安全性和持久化等特性在开源框架中往往缺失。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">微软一直关注这些挑战。通过 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Semantic Kernel</span></strong><span leaf="">，微软为开发者提供了稳定的 SDK，集成了企业系统、内容审核和遥测能力。微软研究院主导的 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AutoGen</span></strong><span leaf=""> 则带来了多智能体编排的创新模式，极大激发了社区活力。两者各有优势，但也存在短板。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">开发者们常常提出：</span><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">能否将 AutoGen 的创新与 Semantic Kernel 的信任和稳定性合二为一？</span></em></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这正是 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Microsoft Agent Framework</span></strong><span leaf=""> 诞生的初衷。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">Microsoft Agent Framework 简介</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Microsoft Agent Framework 是一个</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">开源 SDK 和运行时</span></strong><span leaf="">，让开发者能够轻松构建、部署和管理复杂的多智能体系统。它融合了 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Semantic Kernel 的企业级基础</span></strong><span leaf=""> 与 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AutoGen 的创新编排能力</span></strong><span leaf="">，让团队无需在实验性和生产级之间做取舍。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在下表中，对比了三大框架的核心特性：</span></p><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;"><thead><tr style="background:#ffffff;"><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">Semantic Kernel</span></strong></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">AutoGen</span></strong></th><th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">Microsoft Agent Framework</span></strong></th></tr></thead><tbody><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">定位</span></strong></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">稳定 SDK，企业级连接器、工作流与可观测性</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">实验性多智能体编排，源自研究</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">创新与企业级能力统一的 SDK</span></p></td></tr><tr style="background:#ffffff;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">互操作性</span></strong></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">插件、连接器，支持 MCP、A2A、OpenAPI</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">支持工具集成，缺乏标准化跨运行时协议</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">内置连接器，MCP + A2A + OpenAPI</span></p></td></tr><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">记忆能力</span></strong></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">多种向量存储连接器与抽象（如 Elasticsearch、MongoDB）</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">支持内存/缓冲历史及外部向量存储（ChromaDB、Mem0 等）</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">可插拔记忆，支持多种存储，持久与自适应记忆，混合方案</span></p></td></tr><tr style="background:#ffffff;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">编排能力</span></strong></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">确定性 + 动态编排（Agent Framework、Process Framework）</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">动态 LLM 编排（辩论、反思、主持/协作、群聊）</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">确定性 + 动态编排（Agent Orchestration、Workflow Orchestration）</span></p></td></tr><tr style="background:#fafafa;"><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">企业级能力</span></strong></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">遥测、可观测性、合规钩子</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">基础能力有限</span></p></td><td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><p><span leaf="">可观测性、审批、CI/CD、持久化、状态恢复</span></p></td></tr></tbody></table><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">使用 Microsoft Agent Framework，您将获得：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">开放标准与互操作性</span></strong><span leaf=""> —— MCP、A2A 和 OpenAPI 让智能体具备可移植性和厂商中立性。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">从研究到生产的通路</span></strong><span leaf=""> —— 微软研究院的前沿编排模式已准备好企业级落地。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">社区驱动的可扩展性</span></strong><span leaf=""> —— 模块化设计，支持连接器、可插拔记忆、声明式智能体定义。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">企业级能力</span></strong><span leaf=""> —— 内置可观测性、审批、安全与持久化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">值得注意的是，</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Microsoft Agent Framework 并非替代 Semantic Kernel 和 AutoGen，而是在其基础上融合创新。</span></strong><span leaf=""> 它让开发者无需妥协即可从实验走向企业级部署。Agent Framework 同时支持 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent Orchestration</span></strong><span leaf="">（LLM 驱动的创造性推理与决策）和 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Workflow Orchestration</span></strong><span leaf="">（业务逻辑驱动的确定性多智能体工作流），让团队可根据场景选择灵活协作或结构化流程。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">展望未来，Agent Framework 还将进一步整合微软智能体开发栈，包括与 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Microsoft 365 Agents SDK</span></strong><span leaf=""> 的集成，以及与 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Azure AI Foundry Agent Service</span></strong><span leaf=""> 的共享运行时。Microsoft 365 Agents SDK 是面向开发者的专业工具包，支持多渠道智能体开发与发布，并与 Copilot Studio 的低代码连接器和自定义引擎深度互通。通过与 Agent Framework 融合，并与 Foundry Agent Service 共享运行时，开发者将获得</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">统一的抽象层</span></strong><span leaf="">，实现本地原型、遥测调试、无缝扩展到企业级托管与多渠道发布，无需重写代码。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">下图展示了 Agent Framework 在微软智能体开发栈中的位置：</span></p><p nodeleaf=""><img alt="AgentStack" class="rich_pages wxw-img" data-ratio="0.5092592592592593" style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=ae79cfda&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMUKywjcKFsPVLvMWn1qTyia6YICibscpfjsTpSNLkckbvOyeNU88xZtFmwpN6QxnQ7Dx4uPmNs9AAg%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">AgentStack</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">Agent Framework 的四大支柱</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Agent Framework 的设计理念围绕四大核心支柱展开，分别是开放标准与互操作性、研究创新通道、可扩展社区驱动以及生产就绪能力。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">开放标准与互操作性</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">智能体不是孤立存在的——它们需要连接数据、工具和彼此。Agent Framework 以开放标准为核心，开发者可自由选择集成方式，确保系统在不同框架和云环境下的可移植性。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">MCP（模型上下文协议）</span></strong><span leaf="">：智能体可动态发现并调用通过 MCP 暴露的外部工具或数据服务，无需自定义胶水代码。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent-to-Agent（A2A）</span></strong><span leaf="">：智能体可通过结构化协议消息跨运行时协作，实现多智能体分工协作。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">OpenAPI 优先设计</span></strong><span leaf="">：任何带 OpenAPI 规范的 REST API 都可一键导入为可调用工具，无需手写封装。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">云无关运行时</span></strong><span leaf="">：智能体可在容器、本地或多云环境运行，支持多种 SDK（Azure OpenAI、OpenAI 等），工具可通过 AIFunction 包装，快速连接外部 API。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">最新版 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">VS Code AI Toolkit</span></strong><span leaf=""> 集成了 Agent Framework，开发者可在本地创建、运行和可视化多智能体工作流，极大提升开发体验。</span></p><p nodeleaf=""><img alt="VSCode AI Tooltik" class="rich_pages wxw-img" data-ratio="0.5370370370370371" style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=c61bb923&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMUKywjcKFsPVLvMWn1qTyiaYJ2NsMYEylmTbnWslnAVib4DqCxDiaWAaH08K8UKlJqia0meOzD8DV0Ng%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">VSCode AI Tooltik</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">研究创新通道</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Agent Framework 是连接</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">研究创新</span></strong><span leaf="">与</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">企业级生产</span></strong><span leaf="">的桥梁。许多多智能体编排模式源自微软研究院 AutoGen，Agent Framework 让这些创新在不牺牲稳定性、治理和性能的前提下落地。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">框架支持以下多种编排模式：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">顺序编排</span></strong><span leaf="">：逐步执行的工作流。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">并发编排</span></strong><span leaf="">：智能体并行协作。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">群聊编排</span></strong><span leaf="">：智能体集体头脑风暴。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">交接编排</span></strong><span leaf="">：上下文变化时智能体间责任转移。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Magentic 编排</span></strong><span leaf="">：管理者智能体动态维护任务清单，协调专用智能体（甚至人类）解决复杂问题。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Agent Framework 还提供</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">实验性扩展包</span></strong><span leaf="">，让高级用户尝试微软研究院和社区的前沿能力，实验特性透明可见，成熟后自然并入主框架。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这些模式如今具备了持久性、可审计性和企业级控制，真正实现了“创新落地”。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">可扩展、社区驱动</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Agent Framework </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">100% 开源</span></strong><span leaf="">，模块化设计便于扩展、定制和社区贡献。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">企业系统连接器</span></strong><span leaf="">：内置 Azure AI Foundry、Microsoft Graph、Microsoft Fabric、SharePoint、Oracle、Amazon Bedrock、MongoDB 及各类 SaaS 连接器，开箱即用。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">可插拔记忆模块</span></strong><span leaf="">：支持 Redis、Pinecone、Qdrant、Weaviate、Elasticsearch、Postgres 等多种存储，开发者自选后端。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">声明式智能体</span></strong><span leaf="">：支持 YAML/JSON 定义提示词、角色和工具，便于版本管理和团队协作。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">社区创新</span></strong><span leaf="">：框架鼓励社区贡献新编排策略、连接器和最佳实践。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Agent Framework 是</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">活跃生态</span></strong><span leaf="">，持续吸收微软研究院和全球开源社区的创新。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">生产就绪</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Agent Framework 从一开始就面向企业级部署，提供端到端工具链和运行时，助力从原型到规模化落地，并深度集成 Azure AI Foundry 生态。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">可观测性</span></strong><span leaf="">：OpenTelemetry 可追踪每一步操作，遥测数据可视化于 Azure AI Foundry 仪表盘。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">安全云托管</span></strong><span leaf="">：原生支持 Azure AI Foundry，具备虚拟网络、角色权限、私有数据处理和内容安全。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">安全与合规</span></strong><span leaf="">：集成 Azure AI Content Safety、Entra ID 认证和结构化日志，适用于受监管行业。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">持久化能力</span></strong><span leaf="">：智能体线程和工作流可暂停、恢复、容错，确保大规模可靠运行。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">人类审批</span></strong><span leaf="">：可为敏感操作设置人工审批，自动发起待审批请求，支持本地或远程工具调用。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">CI/CD 集成</span></strong><span leaf="">：直接集成 GitHub Actions 和 Azure DevOps，遥测数据流入 Azure Monitor 和 Application Insights，便于企业级部署和故障分析。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这些能力让开发者能够实现本地原型、遥测调试与企业级安全扩展的无缝衔接，满足现代 AI 系统的需求。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">迈向 Microsoft Agent Framework</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">许多客户已在生产中使用 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Semantic Kernel</span></strong><span leaf=""> 或 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AutoGen</span></strong><span leaf="">。两者仍将获得支持，但未来投资将聚焦于 Agent Framework。迁移过程非常顺畅，具体如下：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">Semantic Kernel 用户：</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 迁移简单：用 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent</span></strong><span leaf=""> 和 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Tool</span></strong><span leaf=""> 替换 Kernel 和插件模式。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• .NET 开发者从 Microsoft.SemanticKernel.* 迁移到 Microsoft.Extensions.AI.*，智能体直接由 provider 创建，无需 Kernel 耦合。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• Python 开发者可安装完整包（pip install agent-framework）或按需安装组件（如 agent-framework-azure-ai、agent-framework-redis）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 智能体原生管理线程，简化调用（RunAsync / RunStreamingAsync），工具注册无需属性或插件封装。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 现有向量存储（Azure AI Search、Postgres、Cosmos DB、Redis、Elasticsearch 等）继续通过连接器支持。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• Bing、Google、OpenAPI、Microsoft Graph 等插件可直接迁移为工具，通常通过 MCP 或 OpenAPI 暴露。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 总结：</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">更少样板代码，记忆管理更简单，对齐开放标准。</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">AutoGen 用户：</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• AutoGen 的编排模式（GroupChat、GraphFlow、事件驱动运行时）已统一到 Agent Framework 的 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Workflow</span></strong><span leaf=""> 抽象下。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• AssistantAgent 直接映射为新的 ChatAgent，默认多轮对话，持续调用工具直至获得结果。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• FunctionTool 封装迁移为 @ai_function 装饰器，自动推断 schema，支持托管工具如代码解释器或网页搜索。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 消息模型简化为统一的 ChatMessage 类型，角色明确（USER、ASSISTANT、TOOL、SYSTEM）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 编排从事件驱动转向类型化、图结构的 Workflow API，支持断点续训、人类审批等。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 遥测更丰富，开箱即用支持 OpenTelemetry。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 单智能体迁移仅需轻量重构，多智能体迁移可充分利用新 Workflow 模型的可组合性和持久性。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这种连续性让开发者既能保留现有投资，又能解锁新能力。Agent Framework 不是替代品，而是创新与稳定的自然进化。更多迁移信息见官方文档。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">总结</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Microsoft Agent Framework 以开放标准、创新编排、社区驱动和企业级能力为核心，打通了从原型到生产的全链路。它不仅融合了 Semantic Kernel 的稳定性与 AutoGen 的创新性，还为开发者提供了统一的开发体验和强大的生态支持。无论是企业级部署还是前沿创新，Agent Framework 都是构建多智能体 AI 应用的理想选择。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">参考文献</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. Introducing Microsoft Agent Framework: The Open Source Engine for Agentic AI Apps - devblogs.microsoft.com</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. Agent Framework 官方文档 - learn.microsoft.com</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. AI Agent Design Patterns - learn.microsoft.com</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">4. VS Code AI Toolkit - aka.ms</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">5. Redis 插件介绍 - aka.ms</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">6. OpenTelemetry 多智能体追踪 - aka.ms</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/trans/introducing-microsoft-agent-framework/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=feea7673&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171021%26idx%3D1%26sn%3D0e1772bfc11bc194d90213fdf3adfcff">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Fri, 10 Oct 2025 12:18:00 +0800</pubDate>
    </item>
    <item>
      <title>AI 资源库更新：收录项目超 500 个，新增评分与展示优化</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650171020&amp;idx=1&amp;sn=c881f51d438c81c60fcb70ce4b24c169</link>
      <description>探索 AI 资源库更新，收录超 500 个项目，新增评分系统与展示优化，助您高效筛选优质 AI 项目。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-10-09 09:10</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=f3f46698&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPM7GhJksCw4sH2v0vOenKbXiaYc8S2icHR8Os5eK61QFVypKG6Bg4Hmxh6SaZTD7PCa9BLUgbBercQ%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>探索 AI 资源库更新，收录超 500 个项目，新增评分系统与展示优化，助您高效筛选优质 AI 项目。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">探索 AI 资源库更新，收录超 500 个项目，新增评分系统与展示优化，助您高效筛选优质 AI 项目。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</span></p></blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">国庆期间我对 AI 资源库的多项优化，包括资源规模突破、过滤与展示体验提升，以及全新引入的项目健康评分系统，旨在帮助读者更高效地筛选和判断优质 AI 项目。</span></p><p nodeleaf=""><img style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" alt="新版 AI 资源库截图" class="rich_pages wxw-img" data-ratio="0.5277777777777778" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=ada35d42&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPM7GhJksCw4sH2v0vOenKbTnjQhfQOeHODTaHLrTlg1j1icVicBI2GeZR02s4mt03FH1pnJmX9sBEg%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">新版 AI 资源库截图</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 资源库地址：<a href="https://jimmysong.io/ai/" target="_blank">https://jimmysong.io/ai/</a></span></p><p class="channels_iframe_wrp" nodeleaf=""><div></div></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">概览与资源分布</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 资源页经过多轮整理，目前已收录超过 500 条资源，其中开源项目（含 GitHub 仓库）超过 400 个。资源类型涵盖教程、工具、论文实现、模型仓库等，支持中英文双语索引（</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">/zh/</span></code><span leaf=""> 与 </span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">/en/</span></code><span leaf="">），方便不同语言用户检索。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">随着资源数量的增长，目录内容愈发全面，但也带来了“信息过载、难以抉择”的新挑战。为此，后续的优化工作主要聚焦于提升筛选效率和信息可读性。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">交互与显示体验优化</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为解决“资源太多不好选”的问题，本次更新重点优化了前端交互与展示方式：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">优化分类</span></strong><span leaf="">：资源分类体系已对齐最新 AI 行业主流分法，涵盖“智能体与编排”“模型与基础”“训练与微调”“推理与服务”“数据与检索”“开发工具与 SDK”“评估与监控”“应用与产品”“界面与集成”“学习资源”等 10+ 维度。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">过滤器增强</span></strong><span leaf="">：改进了列表页的过滤器逻辑，支持按类别、标签、是否开源（GitHub）、语言等多维度组合筛选，有效减少无关结果。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">卡片与样式调整</span></strong><span leaf="">：优化项目卡片布局，突出标题、简要描述和主要标签。卡片底部新增状态徽章与评分占位，提升辨识度。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这些优化让用户可以更快定位到感兴趣的项目，同时一目了然地了解项目的基本状态。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">引入评分系统：综合评判项目健康度</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">随着资源数量激增，仅靠标签已难以直观判断项目优劣。因此，资源列表页新增了「综合评分」字段，帮助读者快速评估项目的活跃度与健康状况。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">评分系统的核心理念在于：高 Star 并不等于高活跃度，真正值得关注的是持续维护、社区参与度高的项目。综合评分将“人气 / 活跃度 / 社区参与”三项信息合成为 0-100 的分值，便于横向比较。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">评分系统设计与实现</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为确保评分系统的科学性与可扩展性，相关设计与实现细节已在文档中详细说明。以下为简要摘要，详细内容可参考文末文献链接。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">数据来源</span></strong><span leaf="">：主要采集 GitHub 仓库数据，包括 Star、Fork、open issues、最后提交时间（pushed_at）、贡献者数、release 时间等。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">指标拆分与权重</span></strong><span leaf="">：健康度分为“人气（Popularity）”“活跃度（Activity）”“社区参与（Community）”三项，综合分示例权重为 0.4×人气 + 0.4×活跃度 + 0.2×社区。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">计算策略</span></strong><span leaf="">：Star 数采用对数/分段映射平衡极值，活跃度以最近提交时间和近期提交次数为主，社区参与以贡献者数量和 Issue 活动衡量。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">后端实现</span></strong><span leaf="">：利用 Cloudflare Workers（或 Pages Functions）定时抓取 GitHub 指标并写入 Cloudflare D1，前端通过 HTMLRewriter 在静态页面渲染时注入评分与标签，无需额外客户端请求，保证加载速度。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">UI 变化与展示示例</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本次更新带来了以下界面变化：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">列表页</span></strong><span leaf="">：每个项目卡片右上角或底部新增分数字徽章（如 86 / 100），标签区显示“新 / 热 / 不活跃 / 已归档”等状态徽章。不活跃或已归档项目的缩略图自动灰度处理，便于区分。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">详情页</span></strong><span leaf="">：侧边栏新增“项目健康评分”区域，展示人气、活跃度、社区参与三项子得分及综合得分，并配有进度条直观反映分值高低。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这些变化让用户在浏览和筛选时能更快做出判断，提升整体体验。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">反馈与参与方式</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为了持续完善资源库，欢迎大家积极反馈和贡献：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 如发现资源 GitHub 链接错误、Star/状态显示异常，或有新项目推荐，欢迎通过 Issue 提交。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 对评分权重或阈值有建议，也可在 Issue 讨论，常见建议将考虑做成可配置项并写入实现文档。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">提交入口：AI 资源反馈与推荐</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">后续计划与展望</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">后续将持续优化资源页，主要方向包括：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 增加历史快照保存，绘制评分趋势图（周线/月线），帮助读者了解项目热度演化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 引入更多外部指标（如 OpenSSF Scorecard、依赖情况）丰富评分维度。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 进一步优化过滤器，增加“仅显示高分项目”等快捷筛选功能。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这些计划将进一步提升资源库的专业性和实用性，欢迎持续关注与建议。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">总结</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本次国庆期间的资源页更新，重点在于提升浏览、筛选与判断优质项目的效率。评分系统并非权威排名，而是为读者提供决策参考。感谢大家一直以来的支持，欢迎通过 GitHub 反馈问题或推荐新项目，让 AI 资源库持续成长。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">参考文献</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. AI OSS Rank 评分设计与标准 - docs.jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. AI OSS Rank 实现细节 - docs.jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. AI 资源反馈与推荐 Issue - github.com</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">版权声明</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</span></p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/ai-resources-rank-update/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=46fbd584&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650171020%26idx%3D1%26sn%3Dc881f51d438c81c60fcb70ce4b24c169">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Thu, 09 Oct 2025 09:10:00 +0800</pubDate>
    </item>
    <item>
      <title>Chrome DevTools MCP：前端开发自动化又上了一个新台阶</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170990&amp;idx=1&amp;sn=7c9372ddf8ca1e91acf2af824fa55983</link>
      <description>Chrome DevTools MCP 与 Playwright MCP 的推出标志着前端开发自动化进入新阶段，AI 助手能够更深层次地控制和调试浏览器，为开发者带来前所未有的自动化体验。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-25 10:56</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=05502132&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcOPDI36wtEPshiafDw0ibHtARknJ8Col422FC3JwxA7xqVpOxFJjol5SclcvcPOCkJYsHM4TnETJUPA%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>Chrome DevTools MCP 与 Playwright MCP 的推出标志着前端开发自动化进入新阶段，AI 助手能够更深层次地控制和调试浏览器，为开发者带来前所未有的自动化体验。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>Chrome DevTools MCP 与 Playwright MCP 的推出标志着前端开发自动化进入新阶段，AI 助手能够更深层次地控制和调试浏览器，为开发者带来前所未有的自动化体验。</p>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">近年来，AI 与编程助手的融合不断加速，能够直接在浏览器内部进行深度调试与性能分析的能力，正在推动前端自动化进入新阶段。本文将介绍 Google 最近发布的 Chrome DevTools MCP，并深入讲解其设计理念、核心组件、典型用例以及本地试用与参与贡献的方法。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">什么是 Chrome DevTools MCP？</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Chrome DevTools MCP 并非简单地暴露 DevTools 功能，而是将调试能力、性能跟踪、网络监控等工具封装为面向 LLM/代理的 MCP 服务。与传统 Puppeteer 或 Playwright 的“脚本式控制”相比，Chrome DevTools MCP 具有以下优势：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 更丰富的内部数据：可直接访问 performance trace、堆栈、网络事件等底层数据。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 原生 DevTools 功能：涵盖 Lighthouse 风格的性能审查、CPU/内存采样、布局与渲染分析等。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 VS Code 中配置好 Chrome DevTools MCP 后，你可以直接在 Copilot 中运行如下提示：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background:#1e1e1e;color:#d4d4d4;border:none;padding:15px;margin:0;border-radius:5px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.45;white-space:pre;word-wrap:normal;overflow-x:visible;"><code><span style="color:#6a9955;">#chrome-devtools 检查 jimmysong.io 的 LCP 问题。</span>
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">此时，Chrome 浏览器会自动启动并打开 jimmysong.io 网站，MCP 服务会执行页面加载的 tracing，收集 traceEvents 并分析主线程任务，最终返回包含 LCP 诊断和优化建议的报告。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">项目概览</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下面简要介绍 Chrome DevTools MCP 的技术栈和主要工具集，帮助读者快速了解其整体架构。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 语言/运行时：Node.js（以 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">puppeteer/chrome-remote-interface</code> 为后端），可按需启动 headless 或带界面的 Chrome 实例。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 工具集：包含页面操作、性能记录、网络监控、控制台事件、堆快照、屏幕截图等多种工具（文档提到 18+ 工具）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 使用场景：性能优化自动化、自动化回归调试、AI 驱动的浏览器操作与审计。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">核心架构与组件</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Chrome DevTools MCP 采用分层架构设计，确保代理能够高效利用底层调试能力。下文将详细介绍各层组件及其职责，并通过架构图展示数据流转过程。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• MCP Server 层：负责接收来自 LLM/代理的 MCP 请求，进行会话管理与权限控制。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 工具适配层：将 MCP 的高层请求映射到 Chrome DevTools Protocol（CDP）或 Puppeteer API，并管理长任务（如 recording/tracing）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Chrome 运行时：真实的 Chrome/Chromium 实例（headful 或 headless），执行所有底层操作并产生 trace、performance、console 等数据。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 数据采集与传输：将采集到的 trace、堆栈、HAR、快照等数据序列化，通过 MCP 返回给调用方。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这种分层设计保证了灵活性：上层代理无需了解 CDP 细节即可利用强大的调试数据，实现者则可在工具适配层持续扩展新能力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下方为 Chrome DevTools MCP 的架构图，便于理解系统内部数据流：</p><img alt="Chrome DevTools MCP 架构图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.14444444444444443" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=4ab45b52&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcOPDI36wtEPshiafDw0ibHtARsucKcDHTNpzEJVJNK9tsMolfib6NV5avYYy8ibPakYAPvIzk61Zws6Lw%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">Chrome DevTools MCP 架构图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">上图展示了从代理发起请求、MCP 服务分发到具体工具、工具通过适配器调用 Puppeteer/CDP 与 Chrome 交互、再将采集到的数据封装回传的全流程。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">实际仓库实现还包含细粒度的工具目录（约 26 个工具，6 个类别），以及 WebSocket / stdio 的连接示例与配置项。建议阅读仓库 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">README.md</code> 与 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">examples/</code> 获取最新命令与运行选项。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">主要实现要点：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• CLI 与 MCP Server：项目以 Node.js CLI 启动，<code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">index.js</code> 使用 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">yargs</code> 处理命令行参数，并通过 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">@modelcontextprotocol/sdk</code> 初始化 MCP 服务。服务可通过 stdio、WebSocket 或 HTTP 与外部代理通信。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 工具系统：采用 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">defineTool()</code> 工厂模式定义工具（ToolDefinition），并按功能分组为若干类别（输入自动化、页面导航、性能、调试、网络、仿真等）。每个工具负责参数校验、执行逻辑与统一的错误/响应格式。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 浏览器管理（McpContext）：集中管理 Chrome 实例生命周期（启动、关闭、profile、可执行路径、headless/headful、隔离上下文），并维护页面状态以便多个工具共享同一浏览器上下文。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 事件处理与同步：工具之间常需等待浏览器状态（如导航完成、元素出现、trace 结束）。项目实现了统一的事件处理与同步策略，保证长任务与短操作之间的协调。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 响应格式化（McpResponse）：统一封装返回数据，包括状态、浏览器快照、截图、trace metadata、HAR 或性能洞察，方便代理消费并生成后续动作或建议。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">工具生态系统</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Chrome DevTools MCP 共提供 26 个工具，分为六大功能类别。下表对各类别及主要功能进行说明：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:0.3em 0;border:0.5px solid #ddd;border-radius:6px;box-shadow:0 1px 3px rgba(0,0,0,0.08);"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#ffffff;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">类别</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">数量</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">主要功能</th>
</tr>
</thead>
<tbody><tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">输入自动化</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">7</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">click、drag、fill、fill_form、handle_dialog、hover、upload_file</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">导航自动化</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">7</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">close_page、list_pages、navigate_page、navigate_page_history、new_page、select_page、wait_for</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">性能</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">3</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">performance_analyze_insight、performance_start_trace、performance_stop_trace</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">调试</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">4</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">evaluate_script、list_console_messages、take_screenshot、take_snapshot</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">网络</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">2</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">get_network_request、list_network_requests</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">仿真</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">3</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">emulate_cpu、emulate_network、resize_page</td>
</tr>
</tbody></table></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">每个工具都提供了特定的浏览器自动化能力，并保持一致的接口和错误处理模式。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">典型用例与示例</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Chrome DevTools MCP 在实际应用中展现出显著价值，主要体现在以下方面：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 自动化启动页面加载 tracing，收集 trace 数据，分析主线程任务与网络请求，输出可执行建议（如减少阻塞脚本、延迟加载第三方资源）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 利用 traceEvents 获得精确的时间片段和调用栈，便于自动化工具生成修复建议。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Agent 能触发一系列 DOM 操作，记录 console/warnings/errors，生成堆快照与 DOM 快照，并附带回放脚本与 screenshot，帮助开发者快速定位和复现问题。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 支持拦截并记录所有网络请求（含 headers、timings、size），分析阻塞、超时或异常响应，标注可疑第三方脚本，实现自动化网络安全审计。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">如何配置和使用？</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下面介绍将 Chrome DevTools MCP 注册为 MCP 客户端服务器的步骤，并给出常见运行参数与实践建议。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">添加 Chrome DevTools MCP 到 MCP 客户端</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 MCP 客户端（或代理）配置中，添加 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">mcpServers</code> 条目指向 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">chrome-devtools-mcp</code>。官方推荐配置如下：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:15px 0;border-radius:5px;box-shadow:0 2px 4px rgba(0,0,0,0.1);background:#1e1e1e;"><pre style="background:#1e1e1e;color:#d4d4d4;border:none;padding:15px;margin:0;border-radius:5px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.45;white-space:pre;word-wrap:normal;overflow-x:visible;"><code><span style="color:#ffd700;">{</span>
  &#34;mcpServers&#34;<span style="color:#cccccc;">:</span> <span style="color:#ffd700;">{</span>
    &#34;chrome-devtools&#34;<span style="color:#cccccc;">:</span> <span style="color:#ffd700;">{</span>
      &#34;command&#34;<span style="color:#cccccc;">:</span> &#34;npx&#34;,
      &#34;args&#34;<span style="color:#cccccc;">:</span> <span style="color:#ffd700;">[</span>&#34;chrome-devtools-mcp@latest&#34;<span style="color:#ffd700;">]</span>
    <span style="color:#ffd700;">}</span>
  <span style="color:#ffd700;">}</span>
<span style="color:#ffd700;">}</span>
</code></pre></div><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">该配置会在代理需要时通过 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">npx</code> 启动 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">chrome-devtools-mcp</code>。如在 CI 或需可重复性环境运行，建议将 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">@latest</code> 替换为固定版本号（如 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">chrome-devtools-mcp@1.0.0</code>）。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">常见运行参数与实践建议</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 指定 Chrome 可执行路径：部分系统自动发现 Chrome 可能失败，建议在客户端或启动参数中显式指定 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">chromePath</code>。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Headless vs Headful：调试时建议使用 headful（带界面），自动化与 CI 环境建议使用 headless 或 headful 的无头 Chromium。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 固定版本：CI/生产环境中建议指定具体版本，避免因 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">latest</code> 引入不兼容变更。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 权限与沙盒：Linux 容器运行时需注意 Chrome 的 sandbox 与权限配置，参考仓库 README 的 Docker/CI 说明。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">在 CI 中的整合思路</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. 在 CI runner 中安装或下载 Chromium，并明确 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">CHROME_PATH</code> 环境变量指向可执行文件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. 使用固定版本的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">chrome-devtools-mcp</code> 启动 MCP 服务（如通过 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">npx chrome-devtools-mcp@x.y.z</code>）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. 运行自定义自动化提示或脚本，如启动页面加载 trace、收集性能报告并将结果作为 artifact 上传。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">对开发者和团队的直接价值</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Chrome DevTools MCP 为开发者和团队带来如下直接价值：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 自动化性能审计：在 CI 集成 MCP，可在 PR/Release 阶段自动生成性能回归报告。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 精准自动化复现链路：结合 tracing 与堆快照，缩短问题发现到定位的周期。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 面向 LLM 的可解释数据：代理可获取可操作的底层数据（而非仅截图），生成更可靠的补丁建议。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">总结</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Chrome DevTools MCP 将 Chrome DevTools 的深度调试能力带给代理与 LLM，填补了自动化脚本控制与深层调试之间的空白。对于追求性能、可靠性和可解释性的前端团队而言，它是高价值的工具链组件。欲了解实现细节、示例与参与贡献，请访问下列资源。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">参考文献</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. Chrome DevTools MCP - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. Model Context Protocol - modelcontextprotocol.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. Chrome DevTools MCP Tool Reference - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. Chrome DevTools (MCP) for your AI agent - developers.googleblog.com</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p>
</blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">版权声明</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/web-automation-advancement/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=8fb329e9&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170990%26idx%3D1%26sn%3D7c9372ddf8ca1e91acf2af824fa55983">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Thu, 25 Sep 2025 10:56:00 +0800</pubDate>
    </item>
    <item>
      <title>什么是 AI 代理及其生命周期？</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170984&amp;idx=1&amp;sn=57eee68cbf8a93e8f4d27fdf1ec953f4</link>
      <description>探索 AI 代理的生命周期，了解其演进、管理与应用，助力企业提升决策与效率，迎接未来智能化挑战。</description>
      <content:encoded><![CDATA[<p>
<span>Jimmy Song</span> <span>2025-09-24 11:44</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=05fd5cfd&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNPVeRj2Kv91MO1pT7F46FnQSNLb2gs4es3pomqJvxC3iaMIxick1dqDq9I384Qw7Dq3afQA8jch8fw%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>探索 AI 代理的生命周期，了解其演进、管理与应用，助力企业提升决策与效率，迎接未来智能化挑战。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">探索 AI 代理的生命周期，了解其演进、管理与应用，助力企业提升决策与效率，迎接未来智能化挑战。本文译自：</span><span leaf=""><a href="https://thenewstack.io/ai-agents-and-their-life-cycle-what-you-should-know/" target="_blank">https://thenewstack.io/ai-agents-and-their-life-cycle-what-you-should-know/</a></span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</span></p></blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理正在改变我们的工作方式，从自动化客户互动到金融、医疗、零售等行业的智能决策。这些自主系统不再是实验性技术，而是日益成为企业运营的重要组成部分。与遵循静态、确定性规则的传统应用不同，AI 代理持续学习并自我调整，虽然更强大，但也需要不同的管理方式。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">你可能已经在使用 AI 驱动的虚拟助手来处理客户查询、进行加密货币交易，或利用智能代理优化供应链。这些系统形式多样：反应型、审慎型、混合型、基于学习型、协作型或完全自主型，每一种都针对特定任务设计。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在本质上，AI 代理遵循一个持续循环：它们收集数据，用机器学习（ML）模型分析，总结模式后做出决策并执行行动，并不断完善自身。这种适应能力使它们区别于除非手动更新，否则始终静态的软件。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">不可避免地，部署 AI 代理也为软件开发范式带来了额外的复杂性，而最佳应对方式可能是借助像开发者平台这样全面而整体的基础设施。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">什么是 AI 代理？</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">广义而言，AI 代理可以指一种软件或应用，它通过执行特定任务不断追求某个目标。AI 代理具备自主性和主动性——它们能自主推理并执行行动，无论是否遵循明确指令。只要目标定义清晰，代理会利用上下文与可访问的工具来实现最终目标。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">不同于传统软件按因果关系直接对应输入到输出，AI 代理受益于语言模型、工具、调度器和上下文资源，能产生更贴合业务目标的定制化、有价值的结果。持续学习、适应和改进正是塑造其行为的核心要素。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">AI 代理的类型与应用场景</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理是一类高度专门化的程序。尽管具有适应性，但它们通常针对特定任务设计，因此存在多种类型。按行为可分为以下宏类别：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">反应型（Reactive）：</span></strong><span leaf=""> 对输入迅速响应，几乎不保留记忆供未来使用。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">审慎型（Deliberative）：</span></strong><span leaf=""> 多用于复杂任务，通过深入推理与精确规划执行。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">学习型（Learning）：</span></strong><span leaf=""> 借助过往交互与 ML 调整其回应。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">混合型（Hybrid）：</span></strong><span leaf=""> 集多种层级之优势，应对更广任务范围。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">此外，AI 代理在现实世界中应用广泛，常见场景包括：用于客户支持或助手的 AI 伴侣、自驾车辆、金融市场预测的交易机器人、家居自动控制系统，以及医疗诊断工具等。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">AI 代理如何运作？</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理不仅仅是孤立的模型，而是由多个组件组成的更全面的认知架构，反映其行为特征。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">让我们深入探讨这一认知架构框架。通常包括：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">模型（Models）：</span></strong><span leaf=""> 代理所使用的特定语言模型，可能为任意类型，应针对特定需求、数据与架构工具进行调优。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">工具（Tools）：</span></strong><span leaf=""> 扩展功能、接口、数据存储等，桥接模型与外界，使代理能访问、处理真实世界信息并完成多样任务。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">调度层（Orchestration layer）：</span></strong><span leaf=""> 驱动代理行为的基础层级，处理从简单决策到复杂链式逻辑的循环，持续进行直到目标达成或终止。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">简而言之，以下是 AI 代理处理客户相关任务的简要流程：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">信息输入：</span></strong><span leaf=""> AI 代理接收到客户请求（如通过 AI 伴侣提出的问题），使用自然语言处理（NLP）理解需求，并访问相关数据与背景知识。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">规划：</span></strong><span leaf=""> 理解请求后，制定响应或完成任务的方案，包括确认客户意图并识别相关信息或行动。在复杂任务中，代理可能组合多个提示或模型。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">执行：</span></strong><span leaf=""> 生成回复、启动工作流程或通过 API 与系统交互。例如，RAG 聊天应用使用特定知识库提供有价值的答案。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">4. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">调整：</span></strong><span leaf=""> 评估 AI 代理的表现，可通过客户反馈或如解决时间、任务成功率等指标进行监测。然后通过微调模型、更新知识库或优化提示策略，提升未来表现。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">为什么 AI 代理风靡？</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理的普及加速，得益于计算能力提升、大规模数据获取和 ML 改进。组织采用它们以自动化重复任务、优化决策、提升用户体验。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理市场预计从 2024 年的 51 亿美元增长至 2030 年的 471 亿美元。Gartner 预测，到 2028 年，33% 的企业软件将集成 AI 代理，而 AI 驱动的代理将取代 20% 的数字门店人类互动，并自主处理 15% 的日常业务决策。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">然而，AI 代理越强大，其带来的风险也越大。它们会学习并调整行为，可能导致模型漂移、自动化失败与治理难题，因此思维不能只停留在部署层面。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">什么是 AI 代理生命周期？</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理生命周期涵盖其从开发训练、部署管理，到治理与必要时退役的全旅程。理解这一生命周期让你全面把握 AI 代理如何演进、如何与现有系统整合，以及如何影响服务交付与决策方式。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">管理 AI 代理生命周期需关注三大领域：全周期管理（Full Life Cycle Management）、云原生开发集成（Cloud Native Integration）与变革管理（Change Management）。这确保代理持续契合目标并提供价值。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">全周期管理</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理生命周期管理不是一次性过程，而需整体策略，涵盖创建、调度与演进。AI 代理由多组件构成，协同形成认知架构。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理通过这些互联组件发挥作用，其生命周期远超模型开发与部署，还需持续监控其表现、更新推理框架、优化内部数据交互并适应外部工具。若缺少结构化生命周期管理，AI 代理可能变得过时、不可靠或偏离业务目标。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">一般而言，AI 代理会经历以下阶段：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">构思与问题定义：</span></strong><span leaf=""> 明确问题、范围、目标及投资回报。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">数据处理：</span></strong><span leaf=""> 收集、评估、清洗与处理数据，并为 AI 使用做好对齐、质量验证与治理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">设计与开发：</span></strong><span leaf=""> 构思代理架构并据此开发模型。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">伦理与安全考量：</span></strong><span leaf=""> 融入伦理与安全最佳实践。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">测试与评估：</span></strong><span leaf=""> 测试代理表现并进行评估。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">部署：</span></strong><span leaf=""> 将代理置入生产环境。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">监控与优化（AgentOps）：</span></strong><span leaf=""> 持续监控、优化与管理生产中代理表现，通过指标与反馈循环微调其行为。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在整个生命周期中提供上下文与设定边界可打造定制成果并维持 AI 公正性，还能确保代理在明确范围内运作。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">与云原生开发集成</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为了让 AI 代理持续高效与适应，需构建支持持续更新、可扩展与与其他服务无缝整合的基础设施。传统架构往往僵化难以维护，而云原生方式（如微服务与容器化）显著提升灵活性，实现无缝扩展、数据整合与实时决策。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">云平台支持强大的 DevOps 实践（如 CI/CD），使 AI 代理可常态更新与完善，无需彻底重构。这些平台还支持可扩展性、安全性与合规性，简化运营复杂性，确保 AI 表现可靠高效。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">变革管理</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">引入 AI 代理不仅是技术问题，更是关于人的问题。当 AI 开始处理任务和决策时，角色会转变且可能引发抵触情绪。管理变革与部署同样重要。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为顺利过渡，应制定清晰策略：沟通 AI 如何助力工作而非取代岗位，正面处理担忧并提供培训帮助团队适应。当员工了解 AI 提升效率与决策能力时，更可能接受它。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理不是遵循固定规则，而是在演进中执行任务与决策。例如，在客户服务领域，AI 能处理常规查询并将复杂问题升级，从而提高响应速度；在金融领域，AI 可实时分析交易，识别欺诈并管理风险。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 不应是“部署后忘却”的工具。其对工作流程、决策方式与角色的影响需通过深思熟虑与持续管理，才能真正创造价值。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">与 AI 代理协作的最佳实践</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">为有效利用 AI 代理，需要结构化数据、明确治理与可扩展平台。以下最佳实践有助确保 AI 代理可靠、可适应并符合业务目标。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">准备 AI 就绪的数据</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理依赖高质量、结构良好且准备充分的数据才能正常运行。你应实施主动的元数据管理与可观察性，以监控数据质量并保证隐私合规。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">此外，在数据管理方面，应明确角色与职责以支持 AI。数据监管者应负责维护数据完整性与可访问性，确保代理获取可靠输入；AI 工程师应负责训练与优化模型；安全团队则需执行数据保护政策与合规要求。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">采用端到端（E2E）解决方案：平台化路径</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理在结构化平台内表现最佳，该平台应整合开发、部署与管理各环节。内部开发者平台（IDP）可提供全面代理生命周期管理所需框架，包括平台工程（提供稳固基础设施）、流畅的开发者体验（DevX）与内置防护机制；可组合应用以简化代理编排；以及数据管理，确保 AI 代理使用的 数据与用例一致，持续验质并受上下文治理。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">总结</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 代理正在重塑企业运营方式，提供前所未有的效率、适应性与决策力。然而，它们的成功依赖的不仅是先进算法，还需要结构化生命周期管理、云原生集成与强有力治理。缺乏这些，企业面临自动化不可靠、数据完整性受损与 AI 行为偏离等风险。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">随着 AI 代理持续成长，能够在创新与控制之间取得平衡的企业，将最具优势以最大化其潜力。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">版权声明</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</span></p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/trans/ai-agents-and-their-life-cycle-what-you-should-know/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=2f081042&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170984%26idx%3D1%26sn%3D57eee68cbf8a93e8f4d27fdf1ec953f4">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Wed, 24 Sep 2025 11:44:00 +0800</pubDate>
    </item>
    <item>
      <title>试用 Verdent 的一些感受：一款支持 Subagent 的 AI 编程助手</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170983&amp;idx=1&amp;sn=e5fc5ed2a18dc36d712c84cb3f91eb6c</link>
      <description>探索 Verdent AI 编程助手在 VS Code 的使用体验，了解其独特功能与改进空间，助力开发者在 AI 时代更高效成长。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-23 08:52</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=4af9fece&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcO1CTD3tChfEdACmu6E61UkoWEjAlsbWrewiaQ9qgTopUTJwVPD5OibwEy4o4icUp5fDREPWChhJJlMw%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>探索 Verdent AI 编程助手在 VS Code 的使用体验，了解其独特功能与改进空间，助力开发者在 AI 时代更高效成长。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>探索 Verdent AI 编程助手在 VS Code 的使用体验，了解其独特功能与改进空间，助力开发者在 AI 时代更高效成长。</p>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</p>
</blockquote><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Verdent 是一款定位于“AI 时代资深开发助手”的 VS Code 插件，主打 Subagent 并发任务和自动代码质量验证。本文将分享试用体验，分析其亮点与不足，并探讨其在开发者工作流中的实际价值。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">最近我获得了 Verdent 的试用资格，并在 VS Code 中安装了该插件。Verdent 由言创万物（Codeck）推出，是其首款产品，旨在帮助开发者在 AI 时代更高效成长。官方宣传语为：“Human developers will thrive in the AI era”，强调人类程序员与 AI 协作的重要性。他们的产品 Verdent 也在近日发布了，感兴趣的去官网了解详情 <a href="https://www.verdent.ai/。" target="_blank">https://www.verdent.ai/。</a></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">言创万物是一家 AI 原生的软件公司，致力于开发智能体编码工具，以赋能人类开发者。公司由陈志杰（TikTok 前算法负责人）和刘晓春（百度前技术与产品负责人）于 2025 年创立，通过将重复性任务交由编码智能体处理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">当前市面上的 Vibe Coding 工具和 IDE 插件种类繁多，我也试用过不少。起初对 Verdent 并未抱太大期望，但经过几天体验后，发现其确实有一些值得分享的亮点和改进空间。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">我觉得不错的地方</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 VS Code 中通过插件方式使用 Verdent，以下几个方面让我印象较好：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">集成自然</strong>：安装插件即可使用，无需重新学习新的工作流，降低了上手门槛。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">功能超越补全</strong>：不仅仅是代码补全，还能自动拆解任务、生成方案，并对代码质量进行验证。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">上下文理解较强</strong>：能够结合项目代码做出贴切回应，不仅仅局限于当前光标位置。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Subagent 支持</strong>：Verdent 最大的亮点在于支持单个智能体的并发任务执行，并可对子智能体进行配置，通过 FailFast 代码检查进行验证。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">响应速度快</strong>：与 Codex 等工具相比，Verdent 的结果生成速度更快，提升了开发效率。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">有点不顺手的地方</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">虽然 Verdent 的能力较强，但在细节体验上还有一些不足：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">上下文选择繁琐</strong>：不像 Copilot 那样可以用简单符号快速选择。Verdent 的 <code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;">@</code> 选择功能虽强大，但希望能一键选中已打开文件或终端输出。也支持通过键盘选择历史 prompt 和自定义 prompt，但整体体验仍有提升空间。这也是多数 AI 编程插件的通病。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">输入框交互不自然</strong>：虽然可以输入内容，但不能直接发送，操作略显不便。如果能像普通聊天一样随时输入并发送，体验会更流畅。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">命令运行方式不便</strong>：Verdent 会自动执行一些命令，但结果显示在 panel 中，而不是直接在 terminal。如果需要复制命令再运行，流程较为繁琐。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">不支持 Tab 代码补全</strong>：只能在 Panel 中交互，无法作为传统代码补全工具使用。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">缺乏模型选项</strong>：与 Qoder 类似，没有模型选择功能，用户无法得知实际运行的模型类型，透明度不足。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">总体来看，Verdent 的核心能力没有问题，但在用户体验细节上仍有优化空间。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">他们想解决的问题</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">根据官方资料，目前大多数 AI 代码工具存在“生成快但质量不稳，最终仍需人工 debug”的问题。Verdent 试图通过以下方式进行改进：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 在需求模糊时，通过多轮对话帮助澄清需求。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 自动拆解任务并设计解决方案。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 代码生成后自动自检，生成测试，力求交付可运行的结果。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">也就是说，Verdent 更关注“交付可用代码”，而不仅仅是“生成几行代码”。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">两个产品形态</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Verdent 目前有两种产品形态，分别适用于不同开发场景：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Verdent for VS Code</strong>：本次体验的插件版，适合贴近代码的开发者。学习成本低，上手快。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Verdent Deck</strong>：桌面应用版，支持并行运行多个智能体，配备任务看板和 DiffLens 等功能，适合同时管理多个项目的开发者。目前仅支持 M 系列 Mac，Windows 版预计 10 月推出。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">总结</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Verdent 在细节体验上尚有改进空间，但整体定位更接近“开发助手”而非传统“代码补全工具”。其 Subagent 并发任务和自动代码质量验证等功能，为开发者带来了更高效的协作体验。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">如果你对 AI 编程助手感兴趣，Verdent 值得关注，未来或许会有更多创新和功能完善。</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p>
</blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">版权声明</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/verdent-first-impression/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=e9dc43c7&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170983%26idx%3D1%26sn%3De5fc5ed2a18dc36d712c84cb3f91eb6c">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Tue, 23 Sep 2025 08:52:00 +0800</pubDate>
    </item>
    <item>
      <title>警惕一种新型 GitHub 资助申请诈骗</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170982&amp;idx=1&amp;sn=a175a71789cad8c3438895ff266e9958</link>
      <description>以我近期遭遇的“GitHub × Gitcoin Developer Fund 2025”钓鱼为案例，系统分析其利益驱动、完整链条、技术实现与个人/组织的防御与应急 SOP。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-22 11:36</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=235064cc&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPRuBXUkkAzHuNeDDzfT57gmy0kBicaMzx7ibpSw2L1OUTMLTxf8I8EsC9rRVYJwx3alM3QXQBc38Uw%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>以我近期遭遇的“GitHub × Gitcoin Developer Fund 2025”钓鱼为案例，系统分析其利益驱动、完整链条、技术实现与个人/组织的防御与应急 SOP。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">以我近期遭遇的“GitHub × Gitcoin Developer Fund 2025”钓鱼为案例，系统分析其利益驱动、完整链条、技术实现与个人/组织的防御与应急 SOP。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</span></p></blockquote><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文以我亲身遭遇的“GitHub × Gitcoin Developer Fund 2025”钓鱼事件为例，系统梳理其利益链条、作案流程、技术实现与防御措施，帮助技术社区识别并应对新型 Web3 诈骗。</span></p></blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">引言</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">近日，我在 GitHub 收到一封伪装成 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">“GitHub × Gitcoin Developer Fund 2025”</span></strong><span leaf=""> 的邮件通知，声称我已“符合资格”，只需点击链接、通过 Gitcoin Passport 验证钱包并支付“可退还押金”即可获得资助。大量开发者也反馈收到了类似邮件，详见 社区讨论 <a class="wx_topic_link" topic-id="mfukfatn-v9vzjj" style="color: #576B95 !important;" data-topic="1">#174283</a>。</span></p><p nodeleaf=""><img alt="钓鱼邮件截图" class="rich_pages wxw-img" data-ratio="0.6972222222222222" style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=73a18c17&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPRuBXUkkAzHuNeDDzfT57gyZIPibfGBETbwYvU7fZMBSnHSia3pQX7ZvJktwdhtdju7DOic6FYw22IA%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">钓鱼邮件截图</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这种诈骗方式利用了 GitHub 通知系统的权威感，并结合 Web3 钱包授权与押金，伪装成高大上的资助计划，实则是资金和账号窃取的骗局。本文将从利益驱动、作案链条、技术实现到防御措施进行系统分析。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">GitHub 通知“套壳”与钓鱼入口</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">攻击者通过脚本账号在陌生仓库发起 Issue 或 Discussion，并 @ 上千名开发者（包括我），触发 GitHub 的系统通知邮件，轻松绕过垃圾拦截，直接进入收件箱。即便是经验丰富的开发者，也可能因“GitHub 官方通知”形式而放松警惕。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">示例链接：钓鱼 Issue（GitHub Issue，可以放心点击）</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">钓鱼页面剖析与典型特征</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">访问钓鱼页面 </span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">github-foundation.com</span></code><span leaf=""> 后，无论点击页面哪个位置，都会弹出“Connect Wallet”窗口，支持 MetaMask、Trust Wallet、WalletConnect 等主流钱包。</span></p><p nodeleaf=""><img alt="假冒的 Gitcoin 页面" class="rich_pages wxw-img" data-ratio="0.9027777777777778" style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=c8994cad&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPRuBXUkkAzHuNeDDzfT57gfwsbH0jvUJF0NwNfIm1bRg3hxZu2e5cjMACjNPyNsU2geSiaeZDgjlw%2F640%3Fwx_fmt%3Djpeg"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">假冒的 Gitcoin 页面</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">主要特征如下：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">域名伪装</span></strong><span leaf="">：</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">github-foundation.com</span></code><span leaf=""> 与官方域名完全不同。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">全屏诱导</span></strong><span leaf="">：页面无实质信息，所有操作均引导钱包连接。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">虚假背书</span></strong><span leaf="">：展示 Gitcoin 的真实数据，但脱离上下文。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">钱包陷阱</span></strong><span leaf="">：授权或支付押金后，资金和权限即被盗取。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">目标画像与攻击策略</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">攻击者优先选择具有一定影响力和资产的开发者账号，如 GitHub Developer Program 成员、拥有 Sponsors、活跃度高等。这类账号更可能点开链接，且钱包资产和仓库权限价值更高。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">但同时，攻击者采用批量撒网策略，混合高价值和低价值用户一起投放，只要有少量开发者上钩即可获利。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">利益链条与作案流程</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">攻击者的完整利益链条如下：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 流量获取：批量账号发帖，@ 大量用户，利用 GitHub 邮件通知背书。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 转化设计：假域名、假文案、假合作方，制造“官方感”。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 获利手段：押金支付骗钱、钱包无限授权盗取资产、GitHub 授权用于后续供应链攻击。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 风险对冲：一次性账号，批量投放，快速跑路。</span></p><p nodeleaf=""><img alt="作案流程图" class="rich_pages wxw-img" data-ratio="0.08518518518518518" style="max-width:100%;height:auto;margin:0.3em auto;display:block;text-align:center;" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=ef1ae111&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcPRuBXUkkAzHuNeDDzfT57gcheayDVT9IhGffIQkyM4ic7BMmzV28NmR8dnUib1viaBwU5XdibJcypmiaQ%2F640%3Fwx_fmt%3Dpng"/></p><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;"><span leaf="">作案流程图</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">技术实现与工程化细节</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 利用 GitHub 通知系统“借壳”，提高投递成功率。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 域名 typosquatting，仿冒 github.com。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 钱包交互社工，利用“仅签名，不会扣费”降低防备心理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 批量 @，覆盖广，攻击成本低。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 后续利用 GitHub 授权，可能插入恶意代码。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">社区反馈与受害情况</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在 GitHub Community 讨论区，已有开发者反馈收到同类 spam，说明该骗局已进入大规模传播阶段，并非孤立案例。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">防御与应急措施</span></h2><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">个人防御建议</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 警惕涉及钱包签名或押金的操作，默认诈骗。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 启用 GitHub 2FA，定期审计 OAuth App、PAT、SSH Keys，撤销可疑授权。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 邮件过滤，对标题含 </span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">Gitcoin</span></code><span leaf="">、</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">Fund</span></code><span leaf="">、</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">Passport</span></code><span leaf="">、</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">USDC</span></code><span leaf=""> 的通知自动打标签。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">组织防御建议</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 实施 SSO 与权限最小化原则。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 限制外部 App 授权，统一官方资金/资助入口。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 制定快速应急预案，准备撤销密钥与隔离仓库流程。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">事后处置 SOP</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. 撤销钱包授权；</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. 删除 GitHub 可疑授权、Token、SSH；</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. 审计仓库 secrets 与 actions；</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">4. 举报钓鱼域名、账号、仓库。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">IOC 附录（Indicators of Compromise）</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">钓鱼域名</span></strong><span leaf="">：</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">github-foundation.com</span></code></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">常见关键词</span></strong><span leaf="">：</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">GitHub × Gitcoin Developer Fund 2025</span></code><span leaf="">、</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">refundable deposit</span></code><span leaf="">、</span><code style="background:rgba(128, 128, 128, 0.1);color:#ff168bff;padding:2px 6px;border-radius:3px;font-family:Consolas,Monaco,monospace;font-size:14px;line-height:1.4;white-space: pre-wrap;word-break: break-all;"><span leaf="">Gitcoin Passport verification</span></code></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">GitHub 行为特征</span></strong><span leaf="">：批量陌生账号在无关仓库发 Issue/Discussion，@ 上百个无关开发者。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">总结</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本案例揭示了开源社区与 Web3 场景融合下的新型钓鱼诈骗，攻击者通过 GitHub 通知机制“借壳”，结合钱包授权与押金变现，危险之处在于大规模工程化与平台背书。有效防御需对资金和授权零信任，始终通过官方入口操作，个人与组织均应实施最小权限原则，提升安全意识。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">版权声明</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</span></p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/github-gitcoin-fund-phishing-2025/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=525020b1&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170982%26idx%3D1%26sn%3Da175a71789cad8c3438895ff266e9958">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Mon, 22 Sep 2025 11:36:00 +0800</pubDate>
    </item>
    <item>
      <title>开发者转型成为 AI 工程师指南</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170970&amp;idx=1&amp;sn=0e884ea7d024c4dc7d4b53a7566b3830</link>
      <description>本文为开发者转型 AI 工程师提供了必备技能与职业路径的全面指南。</description>
      <content:encoded><![CDATA[<p>
<span>Jimmy Song</span> <span>2025-09-21 11:02</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=195d340e&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNwCrgRhmsZdD0VXbGh2Q3ksvG2kaycn85rmuXHicksYXrpicPPTkoj2C3PLLUf6ibZHOWdIALdf4SvA%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>本文为开发者转型 AI 工程师提供了必备技能与职业路径的全面指南。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">本文为开发者转型 AI 工程师提供了必备技能与职业路径的全面指南。翻译自：</span><span leaf=""><a href="https://thenewstack.io/a-developers-guide-to-becoming-an-ai-engineer/" target="_blank">https://thenewstack.io/a-developers-guide-to-becoming-an-ai-engineer/</a></span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</span></p></blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师的需求前所未有地高涨，成为科技领域增长最快的职业之一。该岗位融合了传统软件开发与机器学习能力，对开发者而言既是机遇，也是现有编程技能的自然进化。你可以在此基础上进一步提升，并顺利完成职业转型。构建你的技术基础和实现技能进化是关键。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">什么是 AI 工程？</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程指的是设计、构建和部署能够大规模解决实际问题的 AI 系统。与遵循确定性逻辑的传统软件开发不同，AI 工程创造的是能够根据数据模式学习、适应和决策的系统。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师是数据科学研究与生产级软件系统之间的桥梁。数据科学家专注于模型和算法的开发，而 AI 工程师则将这些创新转化为数百万用户可用的可靠、可扩展应用。例如，Netflix 利用 AI 为 2 亿多用户推荐内容，特斯拉 则将 AI 应用于自动驾驶。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">AI 工程师的核心职责</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师的工作范围比传统开发者更广，需处理能够学习和适应的系统，而非仅仅遵循预设逻辑。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">构建与集成 AI 模型</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师负责开发和实现机器学习（ML）模型，选择最适合具体场景的算法。从数据预处理、特征工程到模型训练与验证，均需参与。集成阶段则是将模型嵌入现有软件架构，确保与数据库、API 和用户界面顺畅协作。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在生产环境中，模型调优更注重性能与可靠性，而不仅仅是测试集上的最高准确率。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">部署与监控系统</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">模型开发完成后，AI 工程师会使用 Docker 等容器技术和 Kubernetes 等编排平台将其部署到生产环境，并建立监控系统以跟踪模型性能、检测数据漂移和识别模型需要重新训练的时机。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">持续监控至关重要，因为 AI 模型会随着真实数据模式变化而性能下降。工程师需实现自动化重训练管道和性能告警，及时应对变化。这也是 AI 系统与传统软件的显著区别——后者通常部署后长期保持一致行为。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">AI 工程师与 ML 工程师、软件开发者的区别</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师的职责通常比 ML 工程师更广，后者更专注于模型开发与实验。而软件开发者则主要处理输入输出可预测的系统。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师需兼具软件工程和机器学习领域的能力，既能构建可扩展系统，又能处理需要持续调优和维护的概率模型。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">开发者的 AI 工程生命周期</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">构建 AI 系统有一套结构化流程，与传统软件开发有诸多不同。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">问题定义与数据准备</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">每个 AI 项目都从明确业务问题和判断 AI 是否适合开始。工程师与利益相关方协作，确定成功指标并收集需求。数据准备阶段包括数据集的收集、清洗和整理，为模型训练做准备。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这一阶段通常耗时较长，取决于数据质量和可用性。真实数据往往杂乱、不完整或有偏见，工程师需构建稳健的数据管道以处理数据质量问题，确保格式一致。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">模型开发与测试</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">开发过程中，工程师会尝试不同算法、特征集和超参数，并采用交叉验证、留出测试等方法评估模型性能。测试不仅关注准确率，还包括公平性、鲁棒性和性能基准等指标。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">工程师还需对代码和模型进行版本控制，确保结果可复现，并能在需要时回滚到先前版本。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">部署与持续监控</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">部署阶段将模型打包为生产可用格式，并集成到现有基础设施。工程师需建立自动化部署管道，实现模型无中断更新。持续监控则帮助及时发现模型因数据或业务需求变化而需要更新。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">AI 工程师必备开发技能</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师需兼具传统编程技能和机器学习系统相关新能力。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">技术编程能力</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Python 是 AI 工程的主流语言，拥有丰富的库如 NumPy、Pandas 和 Scikit-learn，便于数据处理和模型构建。AI 工程师还需熟悉面向对象编程、调试技巧和性能优化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">SQL 技能同样重要，用于数据提取和转换。了解 AWS、Google Cloud 或 Azure 等云平台，有助于实现可扩展部署和资源管理。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">软件工程最佳实践</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程要求扎实的软件开发基础，包括使用 git 进行版本控制、自动化测试和CI/CD 流程。工程师需编写清晰、可维护的代码，便于团队成员修改和扩展。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">文档在 AI 项目中尤为重要，后续维护需清楚说明模型决策和数据处理流程。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">沟通与协作能力</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师需将复杂技术概念转化为非技术人员易懂的语言，与数据科学家、产品经理和业务领导协作，确保技术方案与业务目标一致。公司高层往往不懂数学和计算机术语，沟通能力尤为关键。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">解决问题的能力帮助工程师应对 AI 项目中的不确定性，初始方案可能失败，需不断创新。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">主流 AI 开发工具与框架</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程生态包含众多专用框架和平台，应对智能系统开发的独特挑战。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">机器学习核心框架</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">TensorFlow 提供了全面的工具，适合大规模机器学习模型开发与部署，尤其适合生产和移动端。PyTorch 灵活性高，适合研究和原型开发，动态计算图便于调试。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Hugging Face 已成为预训练语言模型的标准平台，支持文本分类、翻译、问答等任务。LangChain 则简化了大语言模型（LLM）应用开发，提供标准接口和常用工作流。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">云端部署平台</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">现代 AI 工程高度依赖云基础设施实现可扩展部署。AWS SageMaker 提供端到端 ML 工作流，涵盖数据准备、模型部署和监控。Google Vertex AI 集成了 MLOps（机器学习运维）能力，支持 AutoML 和自定义训练。Azure Machine Learning 则覆盖完整 ML 生命周期，并与 微软 生态深度集成。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这些平台负责基础设施管理，让工程师专注于模型开发和业务逻辑，无需关心服务器配置和扩展。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">开发者效率工具</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">GitHub Copilot 利用 AI 辅助代码补全和生成，大幅提升开发效率。MLOps 平台如 MLflow 和 Weights &amp; Biases 支持实验跟踪、模型版本管理和团队协作。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">适用于机器学习的 CI/CD 工具包括 Data Version Control（DVC）和 Continuous Machine Learning（CML），实现代码和模型的自动测试与部署。GitHub Actions 也常用于 CI/CD 流程，尤其适合已用 GitHub 进行版本控制的团队，实现自动化测试和部署。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">开发者的 AI 工程最佳实践与伦理</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">随着 AI 系统能力和应用范围不断扩大，负责任地构建 AI 系统变得尤为重要。生产级 AI 系统既需技术卓越，也需关注社会影响。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">构建可扩展、可维护系统</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">成功的 AI 系统需合理架构，支持不同负载和数据量。工程师应从一开始就实现缓存策略、负载均衡和横向扩展能力。模块化设计有助于隔离各组件，便于测试、调试和更新。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">在模型和数据处理逻辑复杂的 AI 项目中，文档和代码组织尤为重要。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">AI 开发中的伦理考量</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">偏见检测与消除应贯穿 AI 开发全流程。工程师需定期审查训练数据的代表性，并在不同群体中测试模型，确保结果公平。透明性要求开发可解释 AI 功能，帮助用户理解决策过程。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">隐私保护需采用数据匿名化、安全数据处理和合规措施（如 GDPR）。工程师应将以人为本、透明、问责和安全等伦理原则融入开发流程，防止 AI 被滥用。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">还需关注 AI 系统的社会影响，主动构建防护机制。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">开发者的 AI 工程职业路径</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程领域机会丰富，成长空间大，职业分工细化。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">具体岗位类型与晋升路径</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程领域主要岗位包括：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">AI 工程师</span></strong><span leaf="">：通才，负责 AI 系统从设计到部署的全流程，覆盖 AI 应用全栈。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">机器学习工程师</span></strong><span leaf="">：专注模型开发、训练和调优，更偏重算法和数学。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用型 AI 开发者</span></strong><span leaf="">：将 AI 能力集成到现有应用和产品，连接传统开发与 AI 集成。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">MLOps 工程师</span></strong><span leaf="">：专注生产环境下 AI 系统的部署、监控和维护。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">入门者通常从应用型 AI 开发者或初级 AI 工程师做起，负责现有模型的集成和维护。经验丰富后，可负责新模型设计、技术项目管理和团队指导。高级岗位涉及架构决策、跨团队协作和 AI 战略规划。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">新兴细分领域与趋势</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">LLMOps</span></strong><span leaf="">（大语言模型运维）已成为 AI 工程关键细分领域，专注于 GPT、Claude 或开源替代方案在生产环境的可靠运行。LLMOps 工程师关注提示工程、微调策略、成本管理和大模型部署的独特挑战。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">多模态 AI</span></strong><span leaf=""> 是 AI 工程前沿，融合文本、图像、音频和视频输入，打造更复杂应用。工程师需同时掌握计算机视觉、自然语言处理和音频处理等多领域知识。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">薪资与市场趋势</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程师因需求旺盛和技能稀缺，薪资极具竞争力。美国入门岗位年薪约 12 万至 15 万美元，高级工程师可达 20 万至 30 万美元或更高。MLOps 和 LLMOps 专家因专业性强，薪资更高。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">远程工作机会大幅增加，工程师可面向全球市场。随着企业不断将 AI 集成到产品和运营中，行业持续高速发展，医疗、金融、娱乐等领域对人才需求旺盛。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">总结</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 工程为开发者提供了极具吸引力的职业路径，能参与解决现实世界的重大问题。软件工程基础与机器学习能力的结合，带来改变工作和生活方式的机会。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">该领域技术迭代快，需持续学习，尤其是 LLMOps、多模态 AI 等新趋势。投入回报丰厚，既有高薪，也有参与有意义项目的成就感。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">无论你是刚入行还是准备从传统开发转型，AI 工程都能带来广阔的成长空间。建议先夯实编程和软件工程基础，再逐步掌握机器学习框架和 AI 专用工具。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">如果你准备开启 AI 工程师之路，DataCamp 的 Associate AI Engineer for Developers 课程可系统学习本指南涵盖的技能和框架。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">版权声明</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</span></p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/trans/a-developers-guide-to-becoming-an-ai-engineer/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=8c1249ae&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170970%26idx%3D1%26sn%3D0e884ea7d024c4dc7d4b53a7566b3830">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Sun, 21 Sep 2025 11:02:00 +0800</pubDate>
    </item>
    <item>
      <title>Kubernetes 边缘实践指南：容器编排、行业案例与平台选型</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170969&amp;idx=1&amp;sn=40391b247bd78a5318c59267e2026e16</link>
      <description>深入解析 Kubernetes 在边缘计算中的应用场景、技术优势与挑战，结合农业、能源、医疗、零售等行业案例，助力企业选型与落地。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-19 09:26</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=68662ab5&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAsRZv2I5PlGLg1icCjv11d1lmu1XlSh2GItZ15IZncGIVrL4TciaQsM3A%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>深入解析 Kubernetes 在边缘计算中的应用场景、技术优势与挑战，结合农业、能源、医疗、零售等行业案例，助力企业选型与落地。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>深入解析 Kubernetes 在边缘计算中的应用场景、技术优势与挑战，结合农业、能源、医疗、零售等行业案例，助力企业选型与落地。</p>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</p>
</blockquote><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文译自 TheNewStack 推出的 eBOOK Kubernetes at the Edge，仅供参考。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">边缘计算的多重含义：定义“边缘”</h2><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">什么是边缘？边缘在哪里？</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">和许多 IT 术语一样，边缘计算有多种含义，讨论起来容易混淆。但无论定义如何，“边缘”都指的是核心 IT 基础设施之外的某个位置——可以是物理的，也可以是逻辑的。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">传统上，核心基础设施指的是企业自有的数据中心，存放着服务器和数据存储。随着时间推移，这一定义扩展到了企业数据中心、托管机房，以及 AWS、GCP、Azure 等云数据中心。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">即使采用边缘计算，架构原则依然不变：核心基础设施是企业 IT 的基础，包括业务运行所需的数据库、操作系统、网络和硬件，与企业的核心业务逻辑相区分。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在企业场景中，边缘可能指的是远程用户通过 VPN 或互联网访问核心数据中心，此时“边缘”是网络拓扑中的一个位置。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">但边缘也指计算和存储的位置；简单来说，边缘是一个地方，而不仅仅是拓扑的概念。这个位置又细分为三个层级：近边缘、远边缘和设备边缘：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">近边缘</strong>：通常指边缘数据中心，即靠近终端用户和设备的小型分布式计算设施，旨在本地处理数据以降低延迟、提升实时应用性能。例如，企业用户通过互联网或 VPN 连接到边缘数据中心，再由边缘数据中心通过广域网（WAN，通常是 SD-WAN）连接到核心数据中心。近边缘位置可以拥有自己的 CDN 缓存、安全框架和性能优化机制。</p><img alt="图 1.1 近边缘架构" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.587037037037037" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=aa88e7a9&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAEaJ4ib7M2ABEGotSc49jl9zyhDjnsA95C5FI0W0Y9kzBu45qIGc2IUQ%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 1.1 近边缘架构</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">远边缘</strong>：指最分散的地点，基础设施部署在终端设备和用户附近，如基站、零售或餐饮的 POS 系统。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">设备边缘</strong>：指传感器和控制器等终端设备的位置，包括实际的边缘设备及其周边。这些设备通过基站或边缘服务器连接到企业数据中心或云端。边缘设备包括智能摄像头、工业传感器、可穿戴健康监测仪、医疗成像扫描仪等，广泛应用于零售、交通、医疗、制造等行业。</p><img alt="图 1.2 设备边缘架构" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.5842592592592593" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=1eee12e1&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAZDoAjjLkPMrcj6ND8V4NCwOVPvUMuibL4NnY4EF7ib40Yma6AibxjKflw%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 1.2 设备边缘架构</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘设备通常专注于某一特定任务，如视频监控或自动化生产线上的机械控制。它们的计算能力仅够支持专属活动。我们所说的物联网（IoT），无论是消费级还是工业级，指的就是这些边缘设备。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">换个角度看，边缘计算覆盖了从小型数据中心和区域设施（近边缘），到零售门店和餐厅（远边缘），再到单个设备（设备边缘）——每个层级都需根据连接性、资源和工作负载关键性采用不同方案。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">边缘的优势</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">近边缘和远边缘相比中心化模型有六大优势：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. 数据本地处理，降低延迟、提升响应速度。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. 提高网络带宽效率，减少数据传输到云端的需求。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. 降低碳排放，减少网络流量。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. 本地处理敏感信息，增强数据安全和隐私。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">5. 分布式架构提升可靠性和弹性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">6. 更好支持实时应用及 AI/ML 模型。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">中心化也会带来隐私成本，且某些数据处理可能违反数据主权法规。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">以设备边缘为例，无论这些设备部署在风电场、工厂、医院还是车辆，现代嵌入式设备都能产生海量数据。例如，风力发电机配备了振动、温度、声音传感器，以及用于检测损坏或预测故障的 AI 声学传感器。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">由于数据量巨大，边缘设备成为 AI/ML 的理想目标。传统的数据分析和机器学习通常需要将数据传回中心处理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这样可以利用高性能硬件（如 GPU），让数据科学团队深入分析、优化模型。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">但数据中心化也带来诸多挑战，如连接不稳定、带宽受限、延迟高。以风电场为例，带宽不足可能导致无法将所有数据传回核心数据中心。</p><img alt="图 1.3 边缘机器学习架构" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.5972222222222222" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=1aa0425c&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAkEc4f1Qia65AkTNP6SQPHvoVRl6iaMYQ6bkGjSaOKu2aAsoyqBvib1INw%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 1.3 边缘机器学习架构</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">中心化还会带来隐私成本，甚至可能违反数据主权法规。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">因此，将数据处理迁移到数据产生地更为合理。尤其是训练机器学习模型时，边缘处理更有利于隐私保护。结合设备端联邦学习、差分隐私和安全聚合等技术，可以进一步提升隐私安全。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘不仅仅是 AI。荷兰绿色能源公司 Vandebron 管理着数百个风电和太阳能场，实时跟踪全国能源产量以平衡电网和需求。公司通过在线市场直接连接供需，买家可明确了解能源来源和资金流向。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">更广泛地说，若目标是构建更可持续的 IT 系统，边缘计算能减少网络流量，而网络流量约占 IT 行业碳排放的一半。还能利用电池储能，或通过时段调度在清洁能源时充电。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">此外，减少数据中心的按需计算任务可降低制冷需求，节能减排。边缘数据中心也需制冷，但因靠近居民区，废热可用于供暖或加热游泳池。T.Loop 就是将数据中心废热转化为供暖的公司之一。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">为降低成本，云“去迁移”——即将工作负载从超大规模云迁回边缘——越来越常见。这也能降低延迟、提升资源利用率，并在需要时支持云端弹性扩展。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">边缘的挑战</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这些优势——更好的隐私、更低碳排放、更低成本——固然重要，但边缘计算也有挑战，主要有两点：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">计算资源有限</strong>：边缘设备虽日益强大，但受限于体积、重量和功耗（SWaP），CPU/GPU 和内存资源有限。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">网络连接不稳定或受限</strong>：许多软件假定“始终在线”，但边缘节点需能在网络受限或中断时正常运行。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">卡内基梅隆大学软件工程研究所的 Marc Novakouski 和 Grace Lewis 总结了两类对这些挑战尤为敏感的系统：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">人道主义边缘</strong>：救援人员在恶劣环境下工作，随时可能发生变化。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">战术边缘</strong>：军事人员在野外执行任务，环境多变。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">为实现这些能力，软件工程师需设计可分布式系统，将组件分布到多个节点，类似数据中心的微服务架构。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">即使你的场景没那么极端，有限硬件、差连接、恶意攻击等问题依然存在。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">值得注意的是，边缘用户往往不是技术人员，可能是医生录入病历或管理充电桩的工作人员。因此，需锁定设备防止误操作，强化安全，简化更新部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这些挑战促使容器化成为边缘软件部署的热门方式。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">从 Docker 到边缘编排</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">卡内基梅隆大学与边缘设备渊源颇深。1982 年，计算机系学生将自动售货机接入 ARPANET（互联网前身），实现远程查询饮料余量。1991 年，剑桥大学实验室为避免员工扑空，首次安装了咖啡壶摄像头，实现网络实时监控。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">容器化自 1979 年 Unix chroot 诞生以来就有，但自 2013 年 Docker 发布后才广泛流行。容器已无处不在，是许多项目 CI/CD 流水线的核心。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">容器化是一种虚拟化方式，将应用的代码、依赖和配置打包为镜像，由容器运行时引擎在主机上执行。容器类似虚拟机，但不虚拟化操作系统内核，而是复用主机内核。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">去除虚拟化带来的资源开销，使容器轻量，非常适合资源受限的边缘设备。但容器隔离性和可移植性不如虚拟机，因此操作系统需加固。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">现代容器引擎普遍采用 OCI 镜像格式，标准化了容器打包和运行方式，实现可预测、可复现的部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">标准化打包还带来“不可变基础设施”：每次更新都构建新镜像，替换原有镜像，无需增量更新，且可快速回滚。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">举例来说，早年我在英国某银行部署互联网银行系统时，四台集群服务器需手动安装软件和补丁，顺序和配置必须完全一致，极易出错，常常无法全部上线。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">不可变基础设施曾被视为激进，但因极大简化部署，已成主流。对于设备边缘，可能要部署数百、数千甚至数万台设备，这种可预测性至关重要。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">但大规模自动化部署、管理、扩容和网络配置容器非常繁琐。好在容器引擎提供了标准接口，第三方工具可控制容器应用的启动、停止和资源分配。通常由容器编排器负责管理——Kubernetes 是最主流的大规模容器编排方案，但在边缘场景应用尚属新兴。这样能保持数据中心的运维模式，对 IT 团队极为有利。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">不同边缘层需定制方案：近边缘和远边缘适合完整 Kubernetes，资源受限的远边缘可用轻量级发行版，设备边缘则常用 Podman 等容器工具。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">边缘计算实践：行业应用案例</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2018 年，麦肯锡分析师列举了 100 多个边缘计算应用场景。近年来，硬件、网络和 AI/ML 进步带来了更多实际应用。以下四个行业——农业、能源、医疗和零售——展示了 Kubernetes 和容器在边缘的实际应用。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">农业</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">农业是边缘和 AI 技术的重要应用领域。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">联合国预计全球人口将在 2080 年代达到 100-110 亿，比 2022 年的 80 亿大幅增加。人口增长让农民需在减少化肥、农药使用的同时应对气候变化、土地退化和水资源短缺。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">全球大部分地区粮食产量提升显著，但撒哈拉以南非洲仍然较低。Hannah Ritchie 在《Not the End of the World》中指出，非洲谷物产量仅为印度的一半、美国的五分之一。未来 30 年，非洲人口将再增 10 亿，之后再增 10 亿。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">传统技术如化肥、优良种子和灌溉仍是关键。精准农业则利用 AI、机器人和无人机优化生产、减少环境影响。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">但高成本让精准农业难以普及到中小农户，这些农户往往地处偏远，缺乏电力和网络，也不懂 IT。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2023 年，跨公司团队开发了智能边缘农业架构，获 TM Forum 可持续发展与社会影响奖。平台涵盖传感器边缘（Red Hat Device Edge + AWS IoT Greengrass）、MEC 上的 Red Hat OpenShift AI（NVIDIA GPU）、云端 IBM watsonx.ai。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">项目验证了畜牧和作物健康三大精准农业用例。例如，智能除草方案利用 AI/ML 分析无人机图像，识别需喷洒区域，由 OpenShift AI 生成地图，指导无人机精准作业。边缘 AI/ML 实时处理传感器和天气数据，帮助农民制定决策。5G 边缘计算和低延迟处理提升模型效率。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">智能灌溉则分析土壤湿度、温度和天气数据，推算最佳播种时间和灌溉量。</p><img alt="图 2.1 可持续农业参考架构采用 5G 网络切片技术快速部署软件到边缘。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="1.0055555555555555" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=a86c20c0&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAd3Ze5GoiaOIHFNyORONNr728Vec6fsfxYw41OklUA1baEJvsaUX7Eng%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 2.1 可持续农业参考架构采用 5G 网络切片技术快速部署软件到边缘。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">平台还能计算每种作物所需降水量，建立完整农场模型。Red Hat 全球架构师 David Kypuros 介绍：“平台会生成土壤地图，长期跟踪作物反应，指导灌溉和施肥。”</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">参考实现采用 5G 网络切片，支持 10Gbps 峰值速率，实现软件快速部署。</p><img alt="图 2.2 作物健康参考架构使用 Kepler 测量云原生基础设施能效。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.5657407407407408" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=c7039e6f&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAevUDekibUo3ibgV5niawzXA47nS4ibvYu2DB9re8eSdOahzatYzLAA1zEQ%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 2.2 作物健康参考架构使用 Kepler 测量云原生基础设施能效。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">团队还用 Kepler（CNCF 沙盒项目）测量云原生基础设施能效。Kepler 利用 eBPF 采集 CPU 性能计数器和内核追踪点数据，输入机器学习模型，估算 Kubernetes Pod 的能耗。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">能耗统计以 Prometheus 指标展示，可用于 Pod 调度、能耗报告和可视化，也可扩展碳强度指标。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">精准除草方案在农场实测，蓝色染料评估准确率，结果显示水和农药用量减少 20%-30%。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">许多国家出台了减少土壤氮肥的税收激励，AI 模型结合当地政策优化施肥。平台数据可用于农民、政府等制定可持续农业政策。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">能源与可再生能源</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">油气开采中的“放空”指释放和燃烧甲烷等气体，2023 年全球放空 1440 亿立方米，排放 4 亿吨二氧化碳，相当于 9 万亿英里汽车行驶。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">虽然有安全需求，但很多公司为节省成本而放空气体，尤其在产量小或偏远地区。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">化石能源公司也积极采用边缘技术和 AI。例如，Aramco 建立 AI 中心分析油气田每天 50 亿个数据点，提升勘探和钻井决策。AI 模型帮助公司自 2010 年起将放空量减少 50%。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Aramco 还探索边缘 AI，如机器视觉分析火炬角度、长度和烟雾比，预测放空规模。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">PowerFlex（EDF Renewables 子公司）则在可再生能源领域应用边缘技术。PowerFlex X 平台支持智能能源管理，帮助企业高效充电和需求管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">PowerFlex 系统结合历史和实时数据，自动优化现场资产。</p><img alt="图 2.3 PowerFlex 采用自动化部署流水线将软件交付到云和边缘。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.8638888888888889" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=db78a7fa&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAJibVPVjnQKfbZ9DI23IbWx29XMymcEdeGMvAAdLl0uicd3ksbL2ibdeww%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 2.3 PowerFlex 采用自动化部署流水线将软件交付到云和边缘。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">PowerFlex 采用自动化部署流水线，利用 GitHub Actions 构建 Docker 镜像并推送部署清单，Argo CD 实现 Kubernetes 云和边缘同步。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">早期边缘部署为客户定制 ISO 镜像，随着业务扩展，团队转向更易复用和自动化的方案。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">PowerFlex 选择 Talos Linux 作为边缘操作系统，因其可构建通用镜像，后续可按需补丁，灵活定制驱动、IP、主机名和网络规则，适应各种环境。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">PowerFlex 还用 Sidero 的 Omni 平台统一管理所有 Talos Linux 集群，简化集群创建和管理，支持 Google/GitHub 认证和负载均衡。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Omni 提供集群健康、日志、MAC 地址等元数据查看，支持远程重启和补丁，无需现场运维。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这些案例展示了边缘计算和 AI 在能源领域的应用，从减少排放到优化可再生能源系统，智能边缘解决方案正成为行业可持续发展的关键工具。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">医疗</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">随着能源转型加速，成功实施分布式计算的企业将获得竞争优势，并推动环境目标实现。关键在于战略性部署技术，解决实际问题。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">医疗行业采用边缘计算本地处理敏感数据，兼顾安全和合规。无论是制药巨头还是 AI 初创公司，都在用容器化边缘部署提升服务能力。实现实时处理和高安全性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">罗氏（Roche）是全球制药和健康诊断领导者，分布于全球数千地点。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">过去，每次部署新应用（如实验室检测），都需自备硬件和软件，重复建设，难以管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">为此，罗氏组建平台团队，统一硬件和通用软件组件，应用在边缘集群上。</p><img alt="图 2.4 罗氏统一硬件和通用软件组件，在边缘集群上运行应用。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.5074074074074074" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=2960de29&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDA0ND1OoAS7aY9qu00lkYmiaRicIUfAKRhxYm2wcXUKGhflWAP3jicFzVZA%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 2.4 罗氏统一硬件和通用软件组件，在边缘集群上运行应用。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">罗氏部署大量 Kubernetes 集群，预计 2027 年将达 1 万个边缘集群，一切需自动化。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">平台包括：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 车队管理：通过 Web 控制台集中查看所有边缘集群状态、日志、监控和注册表。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 边缘集群：简化集群创建，基于 GitOps 的应用部署和自动升级，无需 Kubernetes 专业知识，默认集成 Grafana、Prometheus 等组件，开发者专注于应用。</p><img alt="图 2.5 罗氏通过 Web 控制台集中管理所有边缘集群。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.7333333333333333" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=ec1863de&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAXicDZpOkvry8XfeaG9LrYZst6xh9K5PK3sS6cfDGXnmZYSFNjREOsuw%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 2.5 罗氏通过 Web 控制台集中管理所有边缘集群。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">平台工程师 Pau Campaña Soler 在 TalosCon 2024 介绍，首版平台基于自定义 Linux、RKE2 和 Rancher，生产环境超 10 个集群，但遇到升级复杂、配置不标准和安全风险，后转用 Talos Linux，因其不可变和安全性更高。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">罗氏平台可创建两类集群：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Local-talos：开发用，基于 Docker 创建 Talos Linux 集群，版本与生产一致，方便测试。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Baremetal-talos：生产用，提供 ISO 镜像，支持裸机或虚拟机，利用 Secure Boot 保证安全。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">因患者数据极为敏感，罗氏高度重视安全和不可变性。Talos Linux 挂载根文件系统为只读，移除 SSH 等主机访问，杜绝配置漂移。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">医疗 AI 公司 RapidAI 提供 MRI 和 CTA 图像分析，旗舰产品将缺血性卒中理想治疗窗口从 6 小时延长至 24 小时。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">RapidAI 平台和移动应用支持团队协作和图像分享，IT 团队使用 Go、Python、C++、Java、JavaScript、TypeScript、Swift 等多种语言。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">系统完全容器化，采用 Docker 和 Kubernetes，利用 Spectro Cloud Palette 部署和管理。为防硬件故障，采用 3 或 5 节点 Kubernetes 边缘集群，支持节点故障容忍。集群支持物理和虚拟设备，RapidAI 仅用虚拟设备。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">集群更新采用滚动升级，节点逐个脱离、升级、重入，维护 A/B 分区，监控系统健康。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">医疗行业通过容器化边缘计算，成功实现实时处理、安全合规和大规模运维。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">零售</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">跨地区管理数千家门店，技术挑战远超传统企业 IT。每家门店都是独立的边缘环境，网络、安防和运维需求各异，需兼顾弹性和简易性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">JYSK 是国际家居零售商，1979 年在丹麦成立，现有 3500 多家门店和电商，遍布 50 国。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">JYSK 开发团队主要用 Java 和 Go，IT 架构为混合模式：本地运行隐私或成本敏感应用，电商在云端，门店用物理边缘。技术选型以应用需求为准。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">公司正向产品中心化转型，构建内部开发平台（IDP），统一方法，包括远边缘。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">PoC 阶段，JYSK 在 3500 多家门店部署轻量级 Kubernetes 和操作系统，保持一致的部署策略。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">“我们云端和本地都用 Kubernetes，主要是为了简化，让开发和运维说同一种语言。”技术负责人 Ryan Gough 说。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">为简化应用管理，JYSK 采用 GitOps 控制应用发布和配置漂移，Cilium 提供 eBPF 网络可观测性和高效通信。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">PoC 成功，但暴露了更新和补丁规模大、网络负载重、门店网络多样等问题。集中拉取容器镜像复杂且资源消耗大。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">为解决这些问题，JYSK 采用 Talos Linux。“我最看重的是不可变性，”Gough 说，“门店是拓扑边缘，易受电力、环境、网络甚至战争影响，不可变和快速恢复很关键。”</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Talos Linux 体积小，简化了门店网络流量管理。“我们要部署到 2500 个地方，需要足够小的系统，Talos Linux 完美满足。”</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">JYSK 还采用“养牛而非养宠物”理念，集群可快速重建和再部署。定制镜像由 HashiCorp Packer 自动化创建，通过 Talos Image Factory API 拉取镜像并预配置，确保一致性。配置采用 cloud-init NoCloud 数据存储本地引导。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">部署后与 API 通信，实现自动化交接。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">“硬件故障时，只需更换设备，插电开机，几分钟即可恢复。全自动，Talos Linux 安装仅需约 46 秒。”Gough 说。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">大规模边缘 Kubernetes 部署需重视 Day 2 运维——集群的持续管理、更新和维护。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">“我低估了这项工作的复杂度。”Gough 说。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">自动化对规模化和效率至关重要，尤其是镜像创建、配置和管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">JYSK 遇到的网络、安防、运维和 Day 2 挑战，是所有大规模零售商的共性。要满足新需求，零售商需投资于边缘技术和分布式系统的运维框架。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">成功的零售商会像 JYSK 一样，拥抱自动化、不可变和“养牛”理念，打造可扩展且易于门店操作的技术基础设施。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">边缘厂商格局：选型指南</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">第二章案例展示了 Kubernetes 在边缘环境的价值，也揭示了其复杂性，规模越大越复杂。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Spectro Cloud 研究显示，企业平均有 20 多个 Kubernetes 集群，6% 超过 100 个，奔驰 2023 年接近 1000 个集群，罗氏预计 2027 年将有 1 万个边缘集群。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">大规模复杂性催生了 Kubernetes 管理平台，核心功能是通过自动化和抽象，减少运维团队规模，简化部署、管理、安全和监控。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘环境受限于网络和算力，正适合 Kubernetes 管理平台。但边缘 Kubernetes 部署仍属新兴，厂商格局变化快。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">经济决策者的关键考量</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">经济决策者（掌控预算和风险）选型时关注：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 连接性挑战：分布式环境连接难，尤其是数千集群分布在远程地点。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 远程管理：边缘缺乏现场 IT，需远程部署、监控、故障排查和管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 安全与可观测性：厂商采用安全供应链和保密计算，降低风险。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 自动化：简化大规模部署和管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 工作负载加速：支持 GPU、TPU 等专用硬件，提升容器效率。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 操作系统灵活性：优选专为边缘设计的 Linux 发行版，或支持多操作系统。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">此外，还需关注：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 开发者体验（DevEx）：工具是否易用。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 碳排放：监控环境影响。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 成本管理：控制支出。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Kubernetes 管理工具无需满足所有标准，可根据现有工具链和实际需求补充功能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">每家企业需求不同，厂商 DevEx 等主观体验也因环境而异，分析报告很少涉及。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">市场主流厂商简评</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本节简要评述主流厂商，调研时间为 2025 年 5-7 月，方式包括厂商简报、客户访谈、产品安装、文档和源码审查。未参与调研的厂商仅 desk research。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">以下厂商未详细讨论：AWS EKS Anywhere、Outposts、Canonical MicroK8s、Mirantis kOs/kOsmotron、Rafay、Wind River Studio Cloud Platform。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">未列出不代表不可选，实际选型时应纳入本章介绍的所有厂商。</p><h4 style="font-size:16px;font-weight:bold;color:#333;margin:14px 0 4px 0;padding:0;line-height:1.4;border-left:3px solid #ffa500;padding-left:8px;">Rakuten Cloud Native Platform</h4><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Rakuten 提供面向边缘计算的 Kubernetes 方案，适用于 Open RAN、5G Core、私有 5G、MEC 和企业应用。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Day 2 运维表现优异，支持声明式策略自动恢复、扩容和迁移，支持 NUMA、CPU 绑定、HugePages、亲和/反亲和、CRI 多容器（容器、虚拟机）、策略编排，支持 CNI/CSI 插件，但不支持修改 etcd/CRI 等核心组件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">集成度高，支持 Intel CAT、NVIDIA GPU 切片、5G 优化、DMTF Redfish 编排，与 Google Distributed Cloud 紧密结合。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">零接触部署和云原生编排器简化多环境部署，Symworld Site Management 和 AI/ML 自动化缩短部署时间。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">网络支持 IPv4/IPv6 双栈和 Multus 等二级网络。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">未见支持工作负载加速或 x86 以外指令集。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">适合地理分布广的行业，如电信运营商。</p><h4 style="font-size:16px;font-weight:bold;color:#333;margin:14px 0 4px 0;padding:0;line-height:1.4;border-left:3px solid #ffa500;padding-left:8px;">Red Hat Device Edge</h4><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2023 年 11 月 GA，扩展 OpenShift 能力，聚焦资源受限和远程环境的轻量级 Kubernetes。集成 RHEL 和 MicroShift（OpenShift 衍生的 CNCF 认证 Kubernetes），实现一致的容器编排。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">RHEL 支持高效镜像更新，仅传输变更部分，减少带宽和时间，支持可靠回滚。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">连接性支持单栈 IPv6 或双栈，支持气隙部署，MicroShift 可嵌入不可变 RHEL 边缘镜像，离线安装和应用部署。仅支持 RHEL，不支持其他发行版。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">工作负载加速强大，支持 GPU、DPU、FPGA，适合高性能计算和断网场景。近期新增低延迟和近实时能力，支持 NVIDIA Jetson Orin/IGX Orin。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">自动化可选用 Ansible Automation Platform，支持 Helm 和 Operator，适合运维人员，声明式、幂等、可重复。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">车队管理较复杂，需多工具（console.redhat.com、ACM、Ansible）支持不同部署和连接模式。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">OpenShift 支持 CNI/CSI 插件定制，但限制核心组件修改。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">适合 OpenShift 用户，但 OpenShift 与 Device Edge 操作模式不同，需注意。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">适用于工业 IoT、自动驾驶、在线游戏、智慧城市等低延迟和 AI 应用。</p><h4 style="font-size:16px;font-weight:bold;color:#333;margin:14px 0 4px 0;padding:0;line-height:1.4;border-left:3px solid #ffa500;padding-left:8px;">Scale Computing HyperCore</h4><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2008 年成立，2012 年推出 HyperCore 超融合产品。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">平台包括：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 硬件：自有 HE100/500 系列，分别基于 Intel NUC 和联想设备。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• HyperCore：Linux 操作系统，集成 KVM 虚拟化、SCRIBE 存储、AIME 自动化管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Fleet Manager：SaaS 车队监控。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">支持多种部署，包括传统虚拟机、容器运行时（Docker、Kubernetes）、多种管理方案（Rancher、OpenShift、Avassa、Anthos）。现已支持软件订阅。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">容器运行在虚拟机内，支持 Talos Linux、containerd、Docker、CRI-O 等。适合小型 Kubernetes 部署，如单节点集群，三节点集群可获得存储弹性。自带轻量编排引擎，简化容器部署、扩容和恢复。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">自动化通过 REST API 实现，支持单集群和 Fleet Manager，另有 Ansible Collection 和 Terraform 集成。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘到云通信基于 MQTT，安全性有 Secure Link 反向隧道、TLS 加密、Secure Boot、访问控制和 RBAC。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">支持 USB 一键气隙部署，适合无云连接场景。HyperCore UI 与 Fleet Manager UI 不同，需切换。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">GPU 加速仅支持部分 NVIDIA GPU，无 DPU/FPGA 支持。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">服务团队支持从试点到大规模部署，提供最佳实践蓝图。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">传统聚焦中小企业，现扩展至零售、制造、医疗等大规模边缘。硬件和应用部署优势明显，容器运行时灵活但需客户自行配置。</p><h4 style="font-size:16px;font-weight:bold;color:#333;margin:14px 0 4px 0;padding:0;line-height:1.4;border-left:3px solid #ffa500;padding-left:8px;">Sidero Talos Linux 和 Omni</h4><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Sidero 通过 Omni 平台和 Talos Linux（极简不可变 Linux）简化边缘 Kubernetes 部署，强调安全、一致性和易维护。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Sidero 最具主见，专注 Kubernetes 层，CI/CD 需自备工具。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Talos Linux 是声明式、不可变、极简发行版，专为 Kubernetes 设计，极适合边缘部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">核心特点：无 Bash、SSH、systemd，API 管理和配置驱动。API 提供调试数据，双向 mTLS 加密，gRPC 通信。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">配置通过声明式 YAML 文件提交，PID 1 进程（Go 编写）负责服务管理和状态一致性。Kubernetes 成为操作系统。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">适合熟悉 Kubernetes 的运维人员，但对习惯传统 Linux 的人有学习曲线。无 Shell 需验证存储和安全工具兼容性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">安全性高，体积小，攻击面小，维护负担低。支持 Trusted Boot（磁盘加密 + 安全启动），CIS 基准加固，SBOM 可集成安全工具，FIPS 140-3 合规。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">网络支持 IPv4/IPv6 双栈和 Multus CNI。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">远程管理强大，可扩展至数千集群，API 驱动，WireGuard 隧道支持受限环境。首次启动自动建立 Omni 隧道，无需公网 IP。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">气隙环境下，Talos Linux 1.9 支持镜像缓存，安装 ISO 可 USB 部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">工作负载加速支持 GPU、DPU、SR-IOV、DPDK，无 FPGA。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Omni 支持 CNI/CRI/CSI 定制，核心组件如 etcd 不支持互换。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Sidero 是 Kubernetes 的“易用按钮”，垂直集成，适合新手快速部署，更新近乎无缝。Talos Linux 最轻量，适合硬件受限环境和单机设备边缘。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">中大型企业若能接受集成方案，Omni 的集中管理和不可变设计可降低运维风险，适合零售、制造、电信等分布式场景。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">除 JYSK、PowerFlex，Berkshire Grey、CrossnoKaye、Forterro、Hathora、Nokia、SNCF 等也在边缘用 Talos/Omni。</p><h4 style="font-size:16px;font-weight:bold;color:#333;margin:14px 0 4px 0;padding:0;line-height:1.4;border-left:3px solid #ffa500;padding-left:8px;">Spectro Cloud Palette</h4><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Spectro Cloud 专注 Kubernetes 生命周期管理，Palette Edge 是其主打产品，包含 CNCF 认证的边缘优化发行版 PXK-E，支持集中管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Palette 可从管理控制台为边缘主机部署集群，支持全流程管理、扩容、升级和重配置。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">安全性显著提升，与 Intel 合作开发 SENA 边缘安全架构，支持 SBOM 漏洞扫描、不可变镜像、加固配置和 Trusted Boot。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">政府和合规场景可用 PXK-E 的 FIPS 加密，支持 RKE2、K3s 等多发行版。安全性强，核心组件定制有限。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">自动化支持低/零接触部署，适合气隙场景，Local UI 简化现场操作，降低人为风险。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Day 2 运维由集群代理本地执行策略，自动证书续签、升级、备份/恢复（Velero）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">网络支持 IPv4/IPv6 双栈，支持虚拟叠加网络，稳定 IP 管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">高可用支持 2/3/5 节点集群，滚动升级，A/B 分区架构，内置健康监控。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">支持 KubeWirt 虚拟机编排，VM 和容器可同机运行。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">操作系统可定制，默认 openSUSE，也支持 Ubuntu、RHEL、自定义，EdgeForge 构建 ISO 或 Kairos 镜像，Agent 模式支持自定义集群。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">工作负载加速略逊于部分竞品，但 RapidAI、Nokia、Tevel、Dentsply Sirona、GE HealthCare 均用 Palette 跑 AI。支持 DPU、GPU（NVIDIA Operator Pack），无 FPGA。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Palette Edge 是完整解决方案，适合新部署或替换旧系统，灵活可扩展，支持 1 万集群。操作系统灵活，支持 VM、容器和多硬件，但设置复杂度略高。</p><h4 style="font-size:16px;font-weight:bold;color:#333;margin:14px 0 4px 0;padding:0;line-height:1.4;border-left:3px solid #ffa500;padding-left:8px;">SUSE Edge Suite</h4><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">SUSE Edge Suite 整合 Rancher Prime、K3s、RKE2 等组件，简化边缘 Kubernetes 部署和运维。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">远程管理强大，Rancher Prime 多集群管理，Elemental 支持安全“phonehome”自动绑定和 GitOps 更新，支持数万集群，适合带宽受限或断网场景。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">支持 Metal3、MetalLB、CAPI，实现裸金属全生命周期管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">气隙环境下，SUSE Edge Image Builder 可生成定制安装介质，支持单/多节点高可用集群，无需外网或集中管理平台。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">安全性强，SUSE Security 提供漏洞扫描、深度包检测和实时防护，RKE2 适合政府和合规行业。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">但不支持远程证明等新特性，部分高安全场景受限。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">支持 CNI/CSI/CRI 和 etcd 等核心组件定制。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">操作系统仅支持 SUSE Linux Micro，不可变、优化容器和边缘工作负载，稳定性高但不支持第三方系统或 Windows/macOS。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">SUSE Linux Micro 支持 x86 和 ARM，GPU 加速由 SUSE 和 NVIDIA 提供。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">适合零售、制造、电信等大规模边缘部署。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">如何选择合适的边缘 Kubernetes 平台</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Kubernetes 的兴起和 VMware 被收购带来基础设施市场剧变，企业更开放新方案。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘 Kubernetes 市场正处于转型期，传统“一刀切”方案让位于分布式专用解决方案。老牌厂商如 Red Hat、SUSE 利用企业 Linux 经验打造综合平台，新兴厂商如 Sidero 通过极简专用方案大幅简化边缘部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">选型需结合现有基础设施、边缘需求和对复杂性与控制的容忍度。未来市场将向能平衡简易性、安全性和可扩展性的方案整合，厂商也会持续增强工作负载加速和 AI 功能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">最成功的厂商将是那些能抽象 Kubernetes 复杂性，同时保留其灵活性的方案。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘 Kubernetes 市场正处于转型期，专用分布式解决方案逐渐取代传统“一刀切”模式。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">边缘 Kubernetes 实践技巧</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">30 年软件生涯中，我见证了五次重大变革：高级语言、敏捷、云、DevOps/持续交付、微服务。每次变革都缩短了价值实现周期，让企业能更快将创意落地，试错成本更低。生成式 AI 是否会成为第六次变革，尚待观察。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘容器化的兴起与历史模式类似。复用云端 CI/CD 等实践，推动开发者中心化，即使在分布式物理环境下也能统一打包、部署，简化复杂流程。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">随着企业探索 AI，边缘成为新前沿。设备算力提升，实时推理、数据本地性和延迟需求推动计算向数据源靠近。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">建议逐步加大学习和信息投入，直到找到最适合组织的方案。</p>
</blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">灾难边缘</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘不是“更近的云计算”，而是将云原生实践扩展到传统云假设失效的场所。边缘环境极具挑战，需关注：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• IT 人员缺乏：边缘故障时，现场可能无人能处理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 物理约束：设备算力有限，电力不稳定，环境恶劣，故障率高。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 安全：数据中心易控物理访问，边缘则难以限制，需特别关注设备安全。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 连接和中断：网络可能受限，不能依赖互联网。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 需求不可预测：企业常有本地运行数十年旧应用，与现代云原生容器并存。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">如何组建团队</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">要将云原生实践应用于边缘，需组建跨学科团队，既懂物理硬件，又能架构高层系统，需具备领域经验和迭代开发能力。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">掌握云原生边缘实践的组织，将最有能力利用实时洞察、响应本地条件、交付前所未有的能力和体验。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">最低需求：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 深入了解问题领域的专家。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 有嵌入式设备开发经验的工程师。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 熟悉云原生、DevOps、容器和 Kubernetes 的工程师。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">组建团队时，除技术外，还需好奇心、适应力和协作能力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">领域专长外，团队多样性也很重要。Daniel Situnayake 和 Jenny Plunkett 在《AI at the Edge》中指出，多元化是防止社会伤害的最佳防线，前提是有心理安全文化。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">编程如写作，是创造性过程，需要自由和试错。鼓励探索和创新，才能激发边缘部署潜力。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">逐步加码</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">团队到位后，需逐步积累经验。例如 JYSK 先用非关键应用试水边缘 Kubernetes。建议与现有虚拟化平台（如 VMware、Proxmox）并行运行，优先非关键工作负载。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">逐步加码，积累经验，找到最优方案。类似“逐步加码”，如《Cloud Native Transformation》所述。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Jamie Dobson 在《Visionaries, Rebels, and Machines》中说，风险大小取决于未来的确定性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">“如果足够明确，公司可做‘无悔举措’。若未来不确定，需通过实验降低不确定性。”</p><img alt="图 4.1 通过非关键实验逐步加码，积累经验后再扩大投资。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.6675925925925926" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=39e8355a&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDA2oiaLjiaw1bCdMiaHXvpF6PPv6dwAgNMfhX4xWWSj0SmJVelmZV0iarF8Q%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 4.1 通过非关键实验逐步加码，积累经验后再扩大投资。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘计算是运维模式重大转变，组织需时间适应流程、技能和预期。渐进式方法优势明显：先用非关键负载，学习运维模式，发现问题，积累故障排查和监控经验。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">新旧系统并行，便于回退、性能对比和渐进迁移，也能通过可靠性提升建立利益相关者信心。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">重视 Day 2 运维</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">两种常见部署方式都不理想：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 物理部署：每个应用定制资源，逐站发货，部署新应用极为繁琐，系统分散，难以统一管理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 虚拟化部署：通常两台虚拟主机、两台交换机和一个 SAN，比物理好，但仍是“养宠物”模式。</p><img alt="图 4.2 小规模可用“发货”或虚拟化，但扩展需提前规划 Day 2 运维。" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.7592592592592593" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=dbe2bd03&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAicKiciaTZC029GRvXfkCYEqIba3FbQzKU8VPmUyuxZDg3MthibovicUO7vA%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">图 4.2 小规模可用“发货”或虚拟化，但扩展需提前规划 Day 2 运维。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">小规模尚可，但边缘项目需提前规划 Day 2 运维——集群持续管理、更新和维护。初期不可避免要部署硬件和网络，但不能让服务器因更新失败而“雪花化”。需能跨数千站点自动部署新应用，无需发货或人工操作。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">自动化提升速度、敏捷性、可靠性，降低错误和成本，增强安全和可重复性。将 IaC 扩展到边缘，DevOps 团队可用自动化、版本控制的远程部署，简化配置和部署。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">GitOps 是边缘 DevOps 的热门方法，以 git 仓库为应用和基础设施配置的唯一真源，结合平台可实现：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">声明式配置</strong>：描述目标状态而非操作步骤。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">版本控制</strong>：跟踪变更，支持回滚。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">自动同步</strong>：确保边缘站点与目标状态一致。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">审计追踪</strong>：记录变更和责任人。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">明日边缘</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">选用专为边缘设计的 Kubernetes 工具可降低复杂性，专用 Linux 发行版也能规避风险。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">可选发行版包括：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Bottlerocket：亚马逊容器优化 Linux。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Chаinguаrd OS：极简安全 Linux。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Flatcar：轻量容器 Linux。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Kairos：云原生边缘 Linux。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Talos Linux：专为 Kubernetes 设计的安全极简 Linux。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这些发行版强调安全、极简和自动化，降低攻击面和运维负担。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘计算成功不仅需技术，还需分布式系统思维转变。组建多元团队、从低风险负载起步、全程自动化、选用专用工具，才能应对边缘挑战，释放变革潜力。边缘是价值实现的新前沿，让计算更贴近决策现场。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">随着边缘设备能力提升，掌握云原生边缘实践的组织将最有能力利用实时洞察、响应本地条件、交付前所未有的能力和体验。企业计算的未来是分布式、智能、贴近客户——只要方法得当，这一未来触手可及。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">结语</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">边缘计算带来诸多益处，包括通过联邦学习提升隐私、减少网络流量降低碳排放、免除制冷需求、通过云去迁移降低成本。但也有挑战：受限于体积、重量和功耗，算力有限，网络连接不稳定，需设计健壮、容错的软件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">容器化因轻量和不可变基础设施成为边缘部署的关键。相比传统手动配置，容器可在数千边缘站点实现可预测、可复现部署。Kubernetes 等编排平台兼顾数据中心运维模式和边缘约束。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Kubernetes 边缘计算技术日趋成熟，解决了各行业实际需求，但需专用工具和方法应对分布式、资源受限环境。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">容器化、专用操作系统和集中管理平台的结合，使 JYSK、PowerFlex、RapidAI、Roche 等企业能高效大规模部署复杂应用。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">新兴厂商如 Sidero 的不可变 API 管理 Talos Linux 和 Omni、Red Hat Device Edge、Spectro Cloud Palette、Scale Computing HyperCore 等，分别在不同维度解决边缘复杂性，提供集中管理能力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">切勿忽视 Day 2 运维规划——持续管理和维护分布式系统。关键策略包括从非关键负载起步、全程自动化、选用专用工具、逐步加码。</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Kubernetes 边缘计算技术日趋成熟，正在解决各行业实际业务需求。</p>
</blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">其他资源</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">最后推荐一些有用资源。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">由于 Kubernetes 边缘变化快，相关书籍更新滞后，难以推荐。但 Hugh Taylor 的《The Edge Data Center》适合管理和运维人员，系统介绍 5G、智能设备、物联网和智慧城市，以及数据中心设计和部署模式。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Daniel Situnayake 和 Jenny Plunkett 的《AI at the Edge: Solving Real-World Problems with Embedded Machine Learning》也很棒，实用且简明，阐述为何要在边缘设备部署智能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">我在 The New Stack 的两篇文章，分别探讨联邦学习和 AI 可持续性问题，也值得一读。更广泛的可持续性介绍可参考我的电子书《The Developer&#39;s Guide to Cloud Infrastructure, Efficiency, and Sustainability》。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">最后，Liz Rice 的《Container Security》虽非专门讲边缘，但深入讲解容器攻击向量、加固措施和配置风险，第二版预计 2025 年秋出版。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p></blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">版权声明</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/trans/kubernetes-at-the-edge/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=d732768e&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170969%26idx%3D1%26sn%3D40391b247bd78a5318c59267e2026e16">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Fri, 19 Sep 2025 09:26:00 +0800</pubDate>
    </item>
    <item>
      <title>深度调研开源 PDF 转 Markdown 工具：Marker、MinerU 与替代方案</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170968&amp;idx=1&amp;sn=561fc71203c43aea79cf82d0df11a801</link>
      <description>深入探讨开源 PDF 转 Markdown 工具，比较 Dolphin、MarkItDown、MinerU 和 Marker 的功能与优缺点，助您选择最佳解决方案。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-18 11:11</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=558b3815&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPEoDv7VEvgYoP2euGXicy0AOUmnFELepQ5nVS8Coj4QgjhU3XDLHyVoZc9UPWaXAgewrFYWSpJPAA%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>深入探讨开源 PDF 转 Markdown 工具，比较 Dolphin、MarkItDown、MinerU 和 Marker 的功能与优缺点，助您选择最佳解决方案。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>深入探讨开源 PDF 转 Markdown 工具，比较 Dolphin、MarkItDown、MinerU 和 Marker 的功能与优缺点，助您选择最佳解决方案。</p>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</p>
</blockquote><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文系统对比了 Dolphin、MarkItDown、MinerU、Marker 等主流开源 PDF 转 Markdown 工具，围绕结构保真、图片表格提取、AI 能力与易用性等维度，帮助技术读者快速选型并理解各工具的适用场景。</p>
</blockquote><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">工具功能对比总览</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在选择 PDF 转 Markdown 工具时，结构保真度、图片表格处理能力、AI 智能解析和易用性是核心考量。下表汇总了四款主流工具的关键功能差异，便于快速对比。</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:0.3em 0;border:0.5px solid #ddd;border-radius:6px;box-shadow:0 1px 3px rgba(0,0,0,0.08);"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#ffffff;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">功能维度</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">ByteDance Dolphin</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">Microsoft MarkItDown</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">OpenDataLab MinerU</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">Datalab Marker</th>
</tr>
</thead>
<tbody><tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">目录层级保留</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">基本保留章节层级，偶有顺序误差</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">不保留，仅纯文本</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">保留，支持标题分类</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">保留，精准识别层次</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">图片内容</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">检测并输出图片</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">仅占位符，不导出图片</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">导出图片并关联说明</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">自动导出图片文件</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">表格样式</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Markdown 表格，复杂表格易失真</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">简单表格或纯文本，样式丢失</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">HTML 嵌入，保留样式</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Markdown 表格，LLM 优化复杂表格</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">超链接保留</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">仅文本，链接目标缺失</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">可能丢失链接，仅文本</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">链接目标未显式导出</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">识别并输出 Markdown 超链接</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">图表标题引用</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">识别并绑定说明</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">不保留</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">智能匹配标题与图表</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">检测标题与引用，输出参考链接</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">AI 智能解析</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">视觉大模型 OCR，两阶段解析</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">可选 Azure 文档 AI 或 GPT</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">OCR+ 多模型管线，自动识别</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">OCR/布局模型，LLM 可选</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">使用方式</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">本地命令行，无界面</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">CLI/Docker，无网页 UI</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">CLI/Python API/Web 演示/App</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">CLI/GUI/API/在线平台</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">免费开放性</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">MIT 许可，开源免费</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">MIT 许可，开源免费</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">代码友好，模型含 AGPL</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">GPL/研究许可，商用需授权</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">安装部署</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">克隆代码 + 依赖 + 模型下载</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">pip 一键安装/Docker</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">pip/uv/Docker，自动下载模型</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">pip 安装，支持 GUI/服务器</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">底层技术</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Vision Transformer OCR</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">PDFMiner+ 规则转换</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">版面检测+OCR+ 表格 + 公式多模型</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">轻量模型 + 规则+LLM 辅助</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">项目背景</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">字节跳动研究团队，ACL 论文</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">微软 Autogen 团队，社区活跃</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">清华&amp;上研所，更新频繁</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">EndlessAI 初创团队，商业支持</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">扩展定制</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">输出格式有限，需改源码</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">插件机制，易扩展</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">流水线可自定义，配置丰富</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">支持自定义逻辑和 LLM Prompt</td>
</tr>
</tbody></table></div><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">MinerU：多模型融合的高保真解析</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">MinerU 由 OpenDataLab 开源，融合多种 AI 模型，最大限度复原文档结构和内容：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 自动判别标题层级，输出清晰 Markdown 结构。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 图片、表格、公式均完整提取，复杂表格以 HTML 嵌入。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 支持 84 种语言 OCR，自动检测扫描件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 公式识别率高，LaTeX 格式友好。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 安装支持 pip/uv/Docker，首次运行自动下载模型。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 资源占用高，推荐 GPU 环境。</p><img alt="我最喜欢的 MinerU 的一点是它可以精准得识别和使用 HTML 渲染表格" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.49166666666666664" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=de458768&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPEoDv7VEvgYoP2euGXicy0ANB6OvMgLibQhMgLNMib6wiceHBkwNW59U2O8GuJFibX81a91zwGH5K4qwg%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">我最喜欢的 MinerU 的一点是它可以精准得识别和使用 HTML 渲染表格</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">MinerU 适合学术论文、复杂报告等高保真需求场景，部署复杂但解析质量接近商用工具。并且 MinerU 的文档和社区较为活跃，便于获取支持和交流。MinerU 还提供了客户端与 Web 页面，方便非技术用户使用。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">Marker：高效全能的现代解析方案</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Marker 由 EndlessAI 团队开发，兼顾速度与结构保真：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 保留章节、段落、列表、脚注等结构，阅读顺序合理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 图片和表格均自动导出，支持 LLM 优化复杂表格和公式。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 超链接和参考文献均可保留，支持多格式和多语言。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 支持 CLI、GUI、API 和在线服务，易用性强。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• GPL/研究许可，商用需授权。</p><img alt="Marker 可以较高清的保存 PDF 中的图片" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.6824074074074075" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=1892d59b&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcPEoDv7VEvgYoP2euGXicy0A6dIcdUpfTA4WjewwvaVkQibCiaBUN7ysIcQ5P17jzS0fic1CY6ibeejAeQ%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">Marker 可以较高清的保存 PDF 中的图片</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Marker 适合批量转换、结构复杂文档和多语言场景，速度快、功能全，唯一需关注许可限制。笔者在测试中发现，Marker 对图片的处理较为出色，可以保存高清的原文档图片，但对复杂表格的支持相对较弱。笔者在进行电子书翻译时使用的就是 Marker。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">Dolphin：视觉大模型驱动的结构还原</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Dolphin 由字节跳动研究团队开源，采用视觉 Transformer OCR 和布局理解，能自动还原 PDF 版面结构，输出结构化 Markdown/JSON。其优势在于：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 自动保留章节、段落、表格、公式、图片及标题等结构。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 图片和公式均以 Markdown 语法嵌入，公式支持 LaTeX。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 表格以 Markdown 表格输出，复杂表格易失真。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 超链接仅保留文本，无法还原 URL。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 依赖深度学习两阶段解析，适合复杂版面和扫描件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 本地命令行运行，无需联网，安装需下载模型权重。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Dolphin 适合对布局保真要求高、需本地自托管的场景，但复杂表格和标题顺序偶有错乱，需人工后处理。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">MarkItDown：多格式支持与插件扩展</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">MarkItDown 是微软开源的通用文件转 Markdown 工具，主打多格式支持和易用性：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 支持 PDF、Word、PPT、Excel、图片等多种格式。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• PDF 仅提取纯文本，不保留标题层级和排版。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 表格多为纯文本，复杂样式丢失，图片仅输出占位符。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 支持插件机制，可扩展新格式和自定义处理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 可选 Azure 文档 AI 或 GPT 生成图片描述。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 安装便捷，pip 一键安装，社区活跃。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">MarkItDown 适合快速获取文本内容或批量处理多格式文件，但结构保真度有限，需后期整理层级和格式。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">其他开源工具与新兴 AI 项目</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">除上述主流工具外，以下方案也值得关注：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Pandoc</strong>：文档转换“瑞士军刀”，支持多格式互转，适合结构清晰 PDF 快速转换。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">pdf2md (Node.js)</strong>：轻量 CLI，适合批量处理和 web 集成。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">markitdown-go</strong>：Go 环境专用，运行高效，易集成。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">olmOCR</strong>：专注扫描件 OCR，适合图像文字识别。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">pdf-to-markdown-gpt</strong>：AI 驱动，适合轻量项目。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Docling、appjsonify、DocXChain</strong>：新兴 AI 项目，支持结构化解析和自定义流程，适合学术和复杂场景。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下表总结了这些新兴工具的特点和适用场景：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:0.3em 0;border:0.5px solid #ddd;border-radius:6px;box-shadow:0 1px 3px rgba(0,0,0,0.08);"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#fafafa;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">工具类别</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">典型代表</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">优势场景</th>
</tr>
</thead>
<tbody><tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">通用结构良好</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Pandoc</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">章节、公式、脚注结构化文档</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">JS 环境轻量工具</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">pdf2md (Node.js)</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">快速批处理，web 集成</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">Go 环境专用</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">markitdown-go</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">命令行高效，Go 项目集成</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">扫描件/复杂图像 PDF</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">olmOCR + 组合</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">OCR 强，图像文字识别</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">AI 驱动高保真</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">pdf-to-markdown-gpt、Docling</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">AI 理解结构，格式保留更多</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">学术 PDF 深度解析</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">appjsonify、DocXChain</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">论文布局和结构分析</td>
</tr>
</tbody></table></div><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">如何选择 PDF 转 Markdown 工具？</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">经笔者实际测试，MinerU 的转换速度较快，可以识别复杂表格并通过 HTML 来渲染，但是对图片处理不够友好，可能导致图片截取不完整。Marker 在结构保真和图片表格处理上表现较好，且支持多种使用方式，但商业许可限制较多。Dolphin 适合对布局要求高的场景，但复杂表格处理不佳。MarkItDown 适合快速获取文本内容，但结构保真度有限。所有这些工具都有一个通病，就是对 PDF 的文档目录结构识别不够准确，尤其是多级标题和章节顺序，有时会出现错乱，需人工后期调整。总体看来推荐 Marker 和 MinerU 作为首选，Dolphin 和 MarkItDown 可作为补充工具。也可以根据具体需求组合使用，对于图书结构的文档推荐使用 Marker，对于更加开放和自由格式的文档推荐 MinerU。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">总结</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文系统梳理了 Dolphin、MarkItDown、MinerU、Marker 等主流开源 PDF 转 Markdown 工具的功能特点与适用场景。对于结构保真、图片表格提取、AI 智能解析和易用性等维度，各工具各有优势。实际选型时，建议结合文档复杂度、部署环境和商业许可要求，优先考虑结构保真度高且易用性强的方案。对于学术论文、复杂报告等高要求场景，推荐 MinerU 或 Marker；如需快速批量处理或多格式支持，可选 Pandoc 或 MarkItDown。未来，AI 驱动的文档解析工具将持续提升解析质量和自动化能力，值得持续关注。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">参考文献</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. Dolphin - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. MarkItDown - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. MinerU - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. Marker - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">5. Pandoc - pandoc.org</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">6. pdf2md - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">7. markitdown-go - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">8. Docling - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">9. appjsonify - github.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">10. DocXChain - github.com</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p>
</blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">版权声明</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/pdf-to-markdown-open-source-deep-dive/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=5634c026&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170968%26idx%3D1%26sn%3D561fc71203c43aea79cf82d0df11a801">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Thu, 18 Sep 2025 11:11:00 +0800</pubDate>
    </item>
    <item>
      <title>System Initiative 深度调研报告：AI Native 基础设施的探索</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170967&amp;idx=1&amp;sn=c6ec6ec9aeb0330af82f08aebfe1dd52</link>
      <description>System Initiative 通过 AI 代理与数字孪生技术，推动基础设施自动化进入新阶段。本文系统梳理其技术架构、产品特性及团队背景，帮助读者理解 AI Native Infra 的创新实践与未来趋势。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-17 11:58</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=763668e1&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAIh9guZLJLESUS0sK8aET76icj9wRl9FrNBPdvQlz25JJLhGEcdKp7iag%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>System Initiative 通过 AI 代理与数字孪生技术，推动基础设施自动化进入新阶段。本文系统梳理其技术架构、产品特性及团队背景，帮助读者理解 AI Native Infra 的创新实践与未来趋势。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>System Initiative 通过 AI 代理与数字孪生技术，推动基础设施自动化进入新阶段。本文系统梳理其技术架构、产品特性及团队背景，帮助读者理解 AI Native Infra 的创新实践与未来趋势。</p>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">随着云计算和容器化技术的普及，基础设施的复杂性不断提升。传统的基础设施即代码（IaC）工具如 Terraform 和 Pulumi 虽然推动了 DevOps 的发展，但也暴露出配置难维护、状态管理复杂、协作效率低等问题。近年来，人工智能（AI）技术的进步为基础设施自动化带来了新的可能性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 正是这样一家创业公司，提出了 AI Native Infrastructure Automation 的理念，试图通过 AI 代理和数字孪生技术彻底改变基础设施管理方式。本文将深入调研该公司及其产品，分析技术核心、应用场景与未来展望。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">公司概述</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative（SI）是一家成立于 2019 年的创业公司，致力于通过 AI Native 自动化基础设施。公司由 Adam Jacob、Alex Ethier 和 Mahir Lupinacci 创办，旨在通过引入人工智能和高保真数字孪生模型，革新 DevOps 领域，提升工程团队对生产环境的认知与协作效率。</p><img alt="System Initiative Workspace UI" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.5740740740740741" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=001b6971&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAHQnibMMNpAkPibg0zItpAZsnicInX7DcXLuw0PkPAolRevhw1S3E8iaQaA%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">System Initiative Workspace UI</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">使命与愿景</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 平台定位为 AI Native Infrastructure Automation Platform，主张用 AI 取代传统 IaC 工具，通过自然语言提示管理云资源。平台愿景是让工程师像使用 Figma 或 Google Docs 一样协作，实现 DevOps 的新一轮革新。公司强调平台全开源，鼓励社区参与，并采用免费层与按使用付费模式。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">什么是 System Initiative 所说的“数字孪生”？</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">数字孪生（Digital Twin）是连接现实云基础设施与虚拟模型的桥梁。它将生产环境中的资源、配置与依赖关系构建成可模拟、测试、预测与安全变更的虚拟环境。数字孪生不仅是资产清单，更是包含状态、拓扑、依赖、变更路径与规约的“活体镜像”，让 AI agent 能够安全尝试变更并在实际环境前验证影响。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">数字孪生是对真实云基础设施的高保真建模，支持安全仿真、策略检查和变更预览，为 AI agent 与工程师协作提供可信上下文。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下图展示了 System Initiative 平台中数字孪生的架构示意：</p><img alt="数字孪生（Digital Twin）架构示意图" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.20185185185185187" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=f1838a79&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_png%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAAonHodeNUWcv43HEJDlXljsy53VvNCcVPMSBSbxHOib8Sblx05Nk4WQ%2F640%3Fwx_fmt%3Dpng"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">数字孪生（Digital Twin）架构示意图</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">图中左侧是真实云基础设施资源，通过导入被镜像到平台内部，形成高保真的数字孪生模型。工程师与 AI Agent 可在模型上进行安全仿真、策略检查，并生成经过审阅的变更集。最终变更由人工批准后应用到生产环境，全程保留审计与可观测性，形成 AI Agent—数字孪生—人工审批的协作闭环，提升自动化安全性与效率。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">定义与目的</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">在 SI 语境下，数字孪生是企业真实云基础设施的 1:1 高保真模型，不仅同步资源清单，还建模资源依赖与关系，并同时跟踪自动化意图与真实状态。它替代了脆弱的状态文件与复杂流水线，让团队能与 AI 直接协作，先在孪生体中仿真和验证变更，再经批准快速执行到生产。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">数字孪生与传统 IaC 的核心差异</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">传统 IaC 工具要求显式编写资源定义并比对状态；SI 则将“写配置”转化为对结果的自然语言描述，由 AI Agent 在数字孪生里自动发现资源、推导变更方案、运行策略检查并生成变更集供人工审阅。此“chat-to-deploy”体验减少手工脚本，强调关系感知与人机协作闭环。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">数字孪生的关键能力</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Discover/Import</strong>：自动导入现有基础设施，构建资源与关系图谱，获得清晰视图。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Safe Simulation</strong>：在数字孪生中预演每次变更，准确评估影响，避免生产风险。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">AI Agent 协作</strong>：Agent 在孪生体内规划与验证操作，经人工批准后自动执行，显著缩短任务周期。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">Guardrails/Policy</strong>：在变更集层面执行策略与合规检查，确保每次修改安全合规。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">可视化与审计</strong>：强调无额外抽象、关系可视化与端到端审计，便于调试与复盘，支持接入现有工单/CI/CD 流程。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">SI 将“数字孪生 + AI Agent + 人类审批”视为 AI Native Infra 的三要素：孪生体提供上下文与安全沙箱，Agent 负责计划与优化，工程师设定意图并裁决。该范式让自动化从“写代码”转向“定义目标 + 审阅变更”，以更快速度、更少错误、更可审计的方式演进生产环境。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">产品与服务</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 的核心产品是 AI Native Infrastructure Automation 平台，通过 AI 代理与数字孪生协同，让团队用自然语言表达目标，平台自动规划并安全执行变更。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">平台主要特点</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">数字孪生与知识图谱</strong>：构建 1:1 模型，映射基础设施资源关系。团队可导入现有环境，生成实时知识图谱，用于探索依赖、优化成本与评估风险。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">自然语言驱动变更</strong>：聊天式部署体验，用户通过自然语言描述目标，AI 代理自动发现资源、模拟变更并经审批后执行，取代手写 IaC 配置。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">安全模拟与批准流程</strong>：所有变更先在数字孪生中模拟并生成综合变更集，包含安全与合规策略，工程师审查后应用。Ops 团队可定义自定义保护栏函数和规则，限制 AI 代理操作范围。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">多用户协作</strong>：支持多人实时协作，结合访问控制与审计功能，确保每次变更均有完整审批与追踪。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">开放 API 与 SDK</strong>：提供丰富 API 和语言 SDK，支持自定义组件和插件，便于集成现有工作流。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">功能模块</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下表总结了 System Initiative 平台的主要模块及亮点：</p><div style="overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;margin:0.3em 0;border:0.5px solid #ddd;border-radius:6px;box-shadow:0 1px 3px rgba(0,0,0,0.08);"><table style="width:100%;border-collapse:collapse;margin:0;font-size:16px;line-height:1.6;color:#333;">
<thead>
<tr style="background:#ffffff;">
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">模块</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">关键功能</th>
<th style="background:#f8f9fa;color:#333;font-weight:bold;padding:12px 15px;text-align:left;border-bottom:2px solid #007acc;white-space:nowrap;min-width:100px;">亮点说明</th>
</tr>
</thead>
<tbody><tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">Get Clarity（获得清晰视图）</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">发现并管理现有基础设施；AI 探索复杂架构、解释依赖、提出安全建议和成本优化；地图视图展示资源关系。</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">自然语言查询复杂系统，快速了解现状。</td>
</tr>
<tr style="background:#ffffff;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">Take Control（掌控基础设施）</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">利用数字孪生跟踪自动化意图与真实资源，支持安全模拟和即时反馈；标准化构建块和模板化模式重用配置；强大 API 和代理化自动化。</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">打破传统 IaC 静态方法，通过模拟实现所见即所得，支持自定义扩展。</td>
</tr>
<tr style="background:#fafafa;">
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;"><strong style="color:#007acc;font-weight:bold;">Work with Confidence（自信协作）</strong></td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">内置安全与合规控制；支持实时多人协作；完整审计追踪与审批流程。</td>
<td style="padding:10px 15px;border-bottom:1px solid #eee;white-space:nowrap;min-width:80px;">确保团队在合规、安全框架内快速推进项目。</td>
</tr>
</tbody></table></div><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">AI 代理能力</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2025 年 8 月，System Initiative 平台加入自主 AI 代理。代理可与数字孪生交互，基于自然语言请求规划和执行基础设施变更。AI 代理能在几分钟内完成过去需数周的任务，并发现优化机会、提出经过验证的变更。用户可导入现有环境，利用 AI 探索资源关系，并为代理定义自定义规则，确保操作合规。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">AI Native Infra 的技术核心</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 平台的技术核心包括数字孪生与知识图谱、自然语言驱动、与现有工具兼容、安全与合规等方面。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">数字孪生与知识图谱</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">平台为每个资源（如 EC2、数据库、负载均衡器）构建一对一表示，并记录资源关系形成知识图谱。通过数字孪生：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 用户可在不影响生产环境的情况下模拟变更并预览结果。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• AI 代理利用知识图谱推断配置变更影响，如自动生成 Systemd 单元文件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 支持复杂迁移任务，如从 Docker/EC2 迁移到 Kubernetes 或 ECS。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">自然语言驱动</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">传统 IaC 工具需编写声明式或代码式定义并管理状态文件。System Initiative 提供聊天式界面，用户用自然语言描述目标，系统自动解析并生成变更计划。Ops 团队可在执行前进行政策检查与审批。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">与现有工具兼容</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">平台支持与 Jira、GitHub Issues、Slack、Terraform、Pulumi 等工具链集成，无需重构即可增值。用户可在适当场景下继续使用 Terraform/Pulumi，System Initiative 在上层提供交互式体验与数字孪生建模。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">安全与合规</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">平台允许定义组织级政策规则和安全测试，AI 代理在提出或执行变更前会先通过规则检查，降低错误配置或合规风险。系统内置审计跟踪，记录所有变更、执行者和时间，便于审计。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">创始团队</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 创始团队具备丰富 DevOps、视觉特效和运营经验，为平台创新提供坚实基础。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Adam Jacob（首席执行官）</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• Chef 原作者及联合创始人/CTO，拥有 25 年 DevOps 经验，曾帮助大型企业管理复杂系统。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 2019 年离开 Chef 创立 System Initiative，主张基础设施应建模为数据并提供实时模拟，改善用户体验。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 在 VMblog 采访中强调传统 DevOps 工具将基础设施视为源代码，导致系统不直观、协作难。他希望通过数字孪生和实时模拟解决这些问题。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 在 Changelog 采访中提到团队借鉴游戏和 VFX 协作工具，构建可视化基础设施和多人协作界面，加速反馈循环。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Alex Ethier（联合创始人 / CPO）</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 视觉特效行业背景，深谙复杂系统协作工具。在 System Initiative 负责产品设计与用户体验，主张用图形界面和实时反馈简化配置。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 其 VFX 工作室经历促使他采用图形化和实时协作方式，提升团队效率。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">Mahir Lupinacci（首席运营官）</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 金融服务和科技行业运营经验丰富，曾任 SourceClear 业务运营副总裁、Chef Software 首席办公官，熟悉 DevOps 商业运作。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">AI Native Infra vs 传统 IaC 工具</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 的 AI Native 方法与传统 IaC 工具有本质差异：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">交互方式</strong>：传统工具需编写声明式或命令式配置文件；System Initiative 用自然语言提示，通过 AI 代理生成变更计划，用户只需描述目标。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">状态管理</strong>：传统 IaC 依赖易碎状态文件和复杂管道，易导致漂移；System Initiative 通过数字孪生实时反映资源状态与意图，无需外部状态文件。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">反馈循环</strong>：IaC 工具流程缓慢且缺乏实时反馈；System Initiative 在数字孪生中即时模拟并呈现变更结果，用户可直观查看影响。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">协作模式</strong>：传统工作流依赖 PR 审查和 CI/CD 管道，协作易中断；System Initiative 提供实时多用户协作和关系型访问控制，类似 Figma 的体验。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">应用场景与案例</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 平台适用于多种场景：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">故障排查与运维</strong>：AI 代理可汇总服务信息并提出排障计划，帮助团队快速处理生产故障。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">迁移与部署</strong>：支持从 Docker/EC2 迁移到 Kubernetes 或 ECS，AI 代理自动解析配置并生成迁移方案。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">安全审计与合规</strong>：内置政策检查和细粒度控制，变更前验证安全性，识别安全缺口并生成补救措施。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">资源优化</strong>：AI 代理分析成本与性能，提出优化建议，如改进负载均衡器健康检查或数据库配置。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">优势与挑战</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 平台在效率、安全与协作方面具备显著优势，但也面临一定挑战。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">优势</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">生产效率提升</strong>：AI 代理将传统需数天或数周的任务缩短为几分钟，数字孪生加快反馈循环。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">降低错误率</strong>：统一模型与自动验证减少手工配置错误与漂移。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">协作友好</strong>：实时多人协作与完整审计追踪提升团队沟通与透明度。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">开放生态</strong>：平台开源，提供 SDK 和 API，支持自定义插件，促进社区创新。</p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">挑战</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">AI 代理成熟度</strong>：AI 代理虽能完成复杂任务，但仍有误判风险，需依赖人类审批。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">流程变革阻力</strong>：DevOps 团队需从 IaC 工作流转向聊天式自动化和数字孪生，需培训与文化转变。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">复杂度与性能</strong>：保持数字孪生与大规模基础设施同步、确保模拟精度与性能是技术难点。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">未来展望</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 创始人认为，AI Native 基础设施代表自动化的新时代。Adam Jacob 表示，AI 代理与数字孪生结合，不仅提升效率，还能解决复杂问题。公司计划持续迭代，开放社区参与，最终重构基础设施自动化并扩展至整个 DevOps 生命周期。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2025 年公司正式发布 AI Native 平台并开放源代码，获得业内积极评价。分析师 Rachel Stephens 指出，系统演示令人惊叹，AI native 方法显著提升自动化能力。随着基础设施复杂性和人才短缺问题加剧，AI Native 模式有望在未来几年广泛应用。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">总结</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">System Initiative 通过 AI 代理与数字孪生技术，重塑基础设施自动化，为 DevOps 团队带来更直观、高效和协同的工作方式。虽然新模式需学习成本，但其效率提升、安全保障和开放生态正吸引越来越多企业探索实践。未来，AI Native Infra 有望成为基础设施自动化的主流方向。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">参考文献</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. System Initiative Unveils the World’s First AI Native Infrastructure Automation Platform - businesswire.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. System Initiative Launches “AI Native” Platform to Simplify Infrastructure Automation - infoq.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. System Initiative Adds AI Agents to Infrastructure Automation Platform - devops.com</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. The System Initiative software - github.com</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p>
</blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">版权声明</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/system-initiative-ai-native-infra/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=596ce56f&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170967%26idx%3D1%26sn%3Dc6ec6ec9aeb0330af82f08aebfe1dd52">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Wed, 17 Sep 2025 11:58:00 +0800</pubDate>
    </item>
    <item>
      <title>AI 原生时代的 OSPO：从全球报告看中国企业的新机遇</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170966&amp;idx=1&amp;sn=29417e59451ccf2b61641007914a42b6</link>
      <description>OSPO 已从合规与安全部门，演变为 AI 原生时代企业治理与创新的战略中枢。本文解析 2025 年 Linux Foundation 报告，并结合中国头部企业的开源实践，展望 OSPO 在中国的发展机遇。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-16 10:07</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=630f7ba4&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDA7I5zSH9HqnXOewpHPwMdcIFO5lKzJdm9ygH8VCibdIQhHy5x4zV2V3w%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>OSPO 已从合规与安全部门，演变为 AI 原生时代企业治理与创新的战略中枢。本文解析 2025 年 Linux Foundation 报告，并结合中国头部企业的开源实践，展望 OSPO 在中国的发展机遇。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</p><hr/><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">📄 文章摘要</strong><br/>OSPO 已从合规与安全部门，演变为 AI 原生时代企业治理与创新的战略中枢。本文解析 2025 年 Linux Foundation 报告，并结合中国头部企业的开源实践，展望 OSPO 在中国的发展机遇。</p>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</p>
</blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">2025 年，开源软件办公室（OSPO）已经不再是新鲜概念。从 Linux Foundation 发布的最新报告 The 2025 State of OSPOs and Open Source Management 中可以看到，OSPO 正在从单纯的合规与安全检查角色，逐渐演变为企业在开源、AI、安全与文化上的<strong style="color:#007acc;font-weight:bold;">战略中枢</strong>。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">2025 年 OSPO 的现状与趋势</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">下图展示了 2025 年 OSPO（开源项目办公室）与开源管理的现状。</p><img alt="2025 年 OSPO（开源项目办公室）与开源管理现状" style="max-width: 100%;margin: 0.3em auto;display: block;text-align: center;height: auto !important;" data-ratio="0.7703703703703704" data-w="1080" src="https://rss.koyangslash.workers.dev/img-proxy/?k=04598869&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcMxVd44vibkcqjQVLjudayDAyzQhq2ES6WoSGxjqvGUzuH9bu6v86edOurHthH88k8Cj965UDMFXaw%2F640%3Fwx_fmt%3Djpeg"/><p style="font-size:12px;color:#666;text-align:center;margin:0.2em 0 0.3em 0;font-style:italic;">2025 年 OSPO（开源项目办公室）与开源管理现状</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">开源安全与合规</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 92% 的 OSPO 参与开源安全工作。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 42% 在做决策，50% 提供顾问支持。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 49% 使用内部合规流程，36% 做法律风险管理，35% 做活动报告。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">生成式 AI 与新兴技术</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 79% 的 OSPO 在管理生成式 AI 风险方面被认为有效（2024 年是 65%）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 66% 的 OSPO 已做好迎接新兴技术（如生成式 AI、云原生基础设施）的准备。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">上游贡献与社区参与</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 有 OSPO 的组织 <strong style="color:#007acc;font-weight:bold;">2.5 倍更可能允许上游贡献</strong>（70% vs. 30%）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 有 OSPO 的组织 <strong style="color:#007acc;font-weight:bold;">近 2 倍更可能鼓励开源贡献</strong>（59% vs. 30%）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 92% 的学术 OSPO 报告其主要成果是提升了开源技能。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">组织挑战</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 40% 面临战略缺口。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 35% 缺乏高层支持。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 35% 难以证明 ROI。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">对企业的积极影响</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 88% 的组织认为 OSPO 提升了软件质量和安全性。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 85% 的组织获得了在开源生态中的更大影响力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 89% 的组织开发者体验得到改善。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">发展趋势</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 计划在两年内建立 OSPO 的组织数量增长 <strong style="color:#007acc;font-weight:bold;">3 倍</strong>（从 2024 年的 15% 到 2025 年的 45%）。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 改善开发者体验是主要推动力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">对全球而言，这是 OSPO 成熟化的阶段；而对中国企业来说，虽然还存在差距和挑战，但在 <strong style="color:#007acc;font-weight:bold;">AI 原生时代</strong>，开源与 OSPO 可能迎来一个新的窗口期。这是一个谨慎乐观的理由。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">全球趋势：OSPO 的升级</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">Linux Foundation 的报告总结了几个关键趋势：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">安全与合规仍是核心</strong>：92% 的 OSPO 参与安全事务，越来越多开始负责 AI 风险治理。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">上游贡献常态化</strong>：有 OSPO 的组织普遍更鼓励开发者参与社区，而不仅仅是“用开源”。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">开发者体验与生态影响力增强</strong>：88% 的组织认为 OSPO 提升了软件质量，85% 认为提升了在社区的影响力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">挑战依然存在</strong>：ROI 难以衡量，高层支持不足，仍是 OSPO 生存与发展的关键痛点。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这说明：OSPO 已经走向战略层面，但也还没有找到完全稳固的商业与治理模式。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">中国头部企业的 OSPO 与开源实践</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">虽然国内公司鲜少公开对外强调“OSPO”的组织形态，但从开源项目与社区运营中可以看到影子：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">阿里巴巴</strong>：通过 ModelScope、通义千问（Qwen）等开源模型与平台，在 AI 原生时代展现了开放战略。但其开源的治理机制、合规审查和外部社区信任及被诟病已久的“KPI 式开源”仍需要加强。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">百度</strong>：依托 PaddlePaddle 和 Ernie 模型，形成了“框架 + 模型”的开源组合拳。问题在于，如何提升国际化社区的信任与协作。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">腾讯</strong>：在基础设施和工具层面有不少开源项目，但缺乏强烈的“开源战略”叙事。业务线庞杂使得统一的 OSPO 政策更加复杂。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• <strong style="color:#007acc;font-weight:bold;">字节跳动</strong>：在开源社区和 AI 领域有一定参与，但整体透明度不足，更多是“内部治理 + 局部开放”，对外部贡献和开源文化的推动还处于早期。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">可以看到，中国的大厂们在“开源项目数量”上已经不弱，但在 <strong style="color:#007acc;font-weight:bold;">制度化的 OSPO 架构、透明度、国际社区信任</strong> 等方面还有差距。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">为什么我依然谨慎乐观？</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">1. <strong style="color:#007acc;font-weight:bold;">AI 原生时代是转折点</strong>
 AI 的发展速度，已经让合规、安全、风险管理成为刚需。没有 OSPO 或类似职能的企业，很难在 AI 时代健康地使用和贡献开源。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">2. <strong style="color:#007acc;font-weight:bold;">政策与产业趋势在推动</strong>
 中国的产业政策正在鼓励 AI 安全与开源发展，给企业设立 OSPO 带来外部动力。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">3. <strong style="color:#007acc;font-weight:bold;">轻量级模式可行</strong>
 对大厂来说，设立完整 OSPO 并非难事；对中小企业，可以探索轻量级 OSPO 模式，从“合规 + 内部培训 + 上游协作”入手逐步迭代。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">4. <strong style="color:#007acc;font-weight:bold;">文化正在萌芽</strong>
 开源文化在中国正逐渐扩散：开发者更愿意参与开源，大企业开始通过开源提升影响力。这是 OSPO 长远发展的文化土壤。</p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;">结语：谨慎乐观的期待</h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">我对中国 OSPO 的发展保持谨慎乐观态度。谨慎，是因为制度化、透明度、社区信任仍需补课；乐观，是因为在 AI 原生时代，企业几乎不可能绕开开源和 OSPO，反而更有动力去建设和优化它。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">未来几年，也许中国的大公司会逐渐拿出真正意义上的 OSPO 成果：</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 不只是开源项目的数量，而是治理的成熟度；</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 不只是技术开放，而是社区参与与国际信任；</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 不只是合规与防守，而是通过开源创造新的创新机遇。</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">这是我期待看到的，也是 OSPO 在中国能否走向成熟的关键。</p><hr/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;">🔗 更多精彩内容</strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🌐 个人网站：jimmysong.io</p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;">• 🎥 Bilibili：space.bilibili.com/31004924</p><blockquote>
<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">💫 <strong style="color:#007acc;font-weight:bold;">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</strong></p>
</blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;">版权声明</h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/ospo-2025-report-cn-analysis/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=234ac43c&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170966%26idx%3D1%26sn%3D29417e59451ccf2b61641007914a42b6">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Tue, 16 Sep 2025 10:07:00 +0800</pubDate>
    </item>
    <item>
      <title>AI 智能体的 21 种设计模式详解</title>
      <link>https://mp.weixin.qq.com/s?__biz=MzIwNDIzODExOA==&amp;mid=2650170965&amp;idx=1&amp;sn=79b5ac3e1b5b2e9be094e64dabfc5353</link>
      <description>探索智能体设计的 21 种模式，提升 AI 系统的自主性与效率，助力开发者应对复杂挑战。</description>
      <content:encoded><![CDATA[<p>
原创 <span>Jimmy Song</span> <span>2025-09-15 11:05</span> <span style="display: inline-block;">北京</span>
</p>




<p><img src="https://rss.koyangslash.workers.dev/img-proxy/?k=3883d3c5&amp;u=https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FuH1hdj5dlcNwCrgRhmsZdD0VXbGh2Q3knmWwn6F1gOtfK381spzrkukDCuGmPFicjia5KKqW25o3XC5uj9AnnMBg%2F0%3Fwx_fmt%3Djpeg"/></p>

<p>探索智能体设计的 21 种模式，提升 AI 系统的自主性与效率，助力开发者应对复杂挑战。</p>

<p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">欢迎大家关注「几米宋」的微信公众号，公众号聚焦于 AI、云原生、开源软件、技术观察以及日常感悟等内容，更多精彩内容请访问个人网站 jimmysong.io。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">📄 文章摘要</span></strong><span leaf=""><br/></span><span leaf="">探索智能体设计的 21 种模式，提升 AI 系统的自主性与效率，助力开发者应对复杂挑战。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">🔗 在 jimmysong.io 上 阅读原文 体验更佳。</span></p></blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">最近笔者在尝试各种工具构建 AI Agent（智能体），但是缺少一套方法论支撑，正好看到 Antonio Gulli 的这本新书 </span><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">Agentic Design Patterns</span></em><span leaf="">，很好的总结了目前智能体构建时使用的各种模式，比如 RAG、MCP、Memory 等，在此我整理成幻灯片和读书笔记分享给大家。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">下面的视频总结了 Antonio Gulli 的新书 </span><em style="background:rgba(128, 128, 128, 0.1);color:#ff69b4;border:undefined;padding:1px 4px;border-radius:2px;font-style:italic;"><span leaf="">Agentic Design Patterns</span></em><span leaf=""> 中列举的智能体的 21 种设计模式，并给出了示意图说明。</span></p><p class="channels_iframe_wrp" nodeleaf=""><div></div></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本书作者 Antonio Gulli，任职于 Google CTO Office。这本书的所有版税将捐献给救助儿童会。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">简介：Agentic 系统与设计模式</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">Agentic 系统是一种能够感知环境、做出决策并自主执行行动以实现目标的计算实体。与传统软件不同，智能体具备</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">自主性</span></strong><span leaf="">、</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">主动性</span></strong><span leaf="">、</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">响应性</span></strong><span leaf="">和</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">目标导向</span></strong><span leaf="">的特性。其关键能力包括</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">工具使用</span></strong><span leaf="">、</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">记忆</span></strong><span leaf="">和</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">通信</span></strong><span leaf="">。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agentic 设计模式</span></strong><span leaf="">是经过实战检验的模板和蓝图，为智能体行为设计与实现中的常见挑战提供可复用解决方案。使用设计模式能提升智能体构建的</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">结构性、可维护性、可靠性和效率</span></strong><span leaf="">，避免重复造轮子，并使开发者能专注于应用创新。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本书提炼了 21 个关键设计模式，涵盖从基础到高级主题，并结合 LangChain、LangGraph、Crew AI 和 Google Agent Developer Kit (ADK) 等主流框架进行实战演示。作者强调，虽然 AI 变化迅速，但这些模式和原则将成为智能体开发的基础模块，帮助大家关注核心理念。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">AI 智能体的特征</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI Agent 是一种能够感知环境并采取行动以实现特定目标的系统。它遵循简单的五步循环完成任务：</span><strong style="color:#007acc;font-weight:bold;"><span leaf="">获取任务目标 → 扫描环境信息 → 制定计划 → 执行行动 → 学习与优化</span></strong><span leaf="">。AI Agent 市场正以惊人速度增长，预计到 2034 年将达到近 2000 亿美元。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">AI 范式在短短两年内经历了巨大转变：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Level 0：核心推理引擎</span></strong><span leaf="">：LLM 本身，无工具、记忆、环境交互能力，仅依赖预训练知识。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Level 1：连接型问题解决者</span></strong><span leaf="">：LLM 通过连接外部工具（如搜索、数据库）获取和处理信息。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Level 2：战略型问题解决者</span></strong><span leaf="">：Agent 具备战略规划、主动协助和自我优化能力，通过“上下文工程”战略性筛选和管理信息。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Level 3：协作型多 Agent 系统崛起</span></strong><span leaf="">：多个专业 Agent 协作完成复杂目标，如新产品发布中的“项目经理”Agent 协调“市场调研”、“产品设计”等 Agent。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">Agent 未来：五大假设</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">通才 Agent 的出现</span></strong><span leaf="">：Agent 将进化为能高可靠性地管理复杂、模糊和长期目标的通才。可能通过大型通才模型或“小语言模型”（SLM）组合实现。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">深度个性化与主动目标发现</span></strong><span leaf="">：Agent 将通过学习用户行为和目标，从被动执行命令转向主动预测需求，成为“主动型伙伴”。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">具身化与物理世界交互</span></strong><span leaf="">：Agent 将与机器人结合，实现“具身 Agent”，突破数字领域，在物理世界执行任务，如修理水龙头。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">4. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent 驱动经济</span></strong><span leaf="">：高度自治的 Agent 将成为经济参与者，创造新市场和商业模式，运营整个电商业务。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">5. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">目标驱动、变形多 Agent 系统</span></strong><span leaf="">：系统将根据用户声明的目标自主规划并达成，动态调整多 Agent 结构，具备个体和整体自我优化能力。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">核心 Agentic 设计模式</span></h2><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">1. 提示链（Prompt Chaining）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：将复杂任务拆解为一系列更小、更易管理的子问题。每个子问题通过专门提示处理，前一步输出作为下一步输入，形成链式依赖。它引入了模块化和清晰性，提升了输出的准确性和针对性，并能集成外部知识和工具。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例演示两步提示链，先从文本提取规格，再转为 JSON。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">上下文工程</span></strong><span leaf="">：系统性方法，为模型构建完整信息环境，包括系统提示、外部数据（检索文档、工具输出）和隐性数据，比传统提示工程更全面。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：信息处理流程、复杂问答、数据提取与转换、内容生成流程、有状态对话 Agent、代码生成与优化、多模态与多步推理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：是构建复杂 AI Agent 的基础技术，让 Agent 能够自主规划、推理和行动，适应动态环境。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">2. 路由（Routing）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 根据环境状态、用户输入或前序操作结果等因素，动态地将控制流导向不同的专用函数、工具或子流程，实现自适应响应。核心组件是执行评估并引导流程的机制。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">实现方式</span></strong><span leaf="">：基于 LLM、基于嵌入、基于规则或基于机器学习模型的路由。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例中，协调者 Agent 根据用户请求意图（预订、信息、不明确）路由到不同子代理。Google ADK 示例中，协调者代理通过 Auto-Flow 机制自动委托给 Booker 或 Info 子代理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：人机交互中的用户意图解析、自动化数据与文档处理流程中的分类与分发、复杂系统中的高级调度器。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：为 Agent 框架引入条件逻辑，使其从固定执行路径转变为动态评估标准，选择最佳后续动作，从而实现更灵活、具备上下文感知的系统行为。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">3. 并行化（Parallelization）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：同时执行多个组件（LLM 调用、工具使用或子 Agent），大幅缩短可拆分为独立部分的任务的整体执行时间。核心思想是识别流程中彼此无依赖的部分，并将它们并行执行。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例通过 RunnableParallel 并行执行主题摘要、问题生成和关键词提取。Google ADK 示例通过 ParallelAgent 并行运行多个调研员 Agent。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：信息收集与调研（同时搜索多个来源）、数据处理与分析（并行应用不同分析方法）、多 API 或工具交互、多组件内容生成、验证与校验、多模态处理、A/B 测试或多方案生成。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：提升 Agentic 系统的效率和响应速度，尤其适用于涉及多个独立查找、计算或外部服务交互的任务。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">4. 反思（Reflection）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 对自身的工作、输出或内部状态进行评估，并利用评估结果来提升性能或优化响应。这是一种自我纠错或自我改进机制，引入了反馈循环。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">典型流程</span></strong><span leaf="">：执行 → 评估/批判 → 反思/优化 → 迭代。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">实现方式</span></strong><span leaf="">：将流程分为生产者（Producer）和批评者（Critic）两个逻辑角色，由不同 Agent 或不同系统提示的 LLM 调用扮演。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例中，Agent 迭代生成并优化 Python 函数，批评者 Agent 反复批判代码。Google ADK 示例通过 SequentialAgent 编排生成器 Agent 和审查器 Agent。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：创意写作与内容生成、代码生成与调试、复杂问题求解、摘要与信息整合、规划与策略制定、对话 Agent。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：构建能够输出高质量结果、处理复杂任务、具备一定自我意识和适应性的 Agent。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">5. 工具使用（Tool Use / Function Calling）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 通过“函数调用”机制与外部 API、数据库、服务或代码进行交互。LLM 根据用户请求或任务状态，决定何时及如何调用特定外部函数。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">典型流程</span></strong><span leaf="">：工具定义 → LLM 决策 → 函数调用生成 → 工具执行 → 观察/结果 → LLM 处理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">工具与函数调用的区别</span></strong><span leaf="">：工具调用更具包容性，可指复杂 API、数据库请求，甚至面向其他 Agent 的指令。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例中，Agent 使用 search_information 工具。CrewAI 示例中，Agent 使用 get_stock_price 工具。Google ADK 示例展示 Google Search、代码执行、Vertex AI Search 工具的使用。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：外部信息检索、与数据库和 API 交互、计算与数据分析、发送通讯、执行代码、控制其他系统或设备。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：突破 LLM 训练数据限制，访问最新信息、执行内部无法完成的计算、操作用户专属数据或触发现实世界动作。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">6. 规划（Planning）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 或 Agent 系统能够制定一系列行动，从初始状态逐步迈向目标状态的能力。计划并非预先设定，而是根据请求动态生成，并能根据新信息灵活调整。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">规划与可预测性权衡</span></strong><span leaf="">：当问题解决路径已知且可重复时，限制 Agent 按固定流程执行更有效。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：Crew AI 示例中，规划者智能体制定并撰写摘要的计划。Google DeepResearch 和 OpenAI Deep Research API 演示了多步骤、迭代式的研究规划。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：流程自动化（新员工入职）、机器人与自主导航、结构化信息合成（生成复杂报告）、多步骤客户支持。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：使 Agent 具备前瞻性思考，将复杂任务拆解为可管理的小步骤，并制定实现目标的策略。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">7. 多智能体协作（Multi-Agent Collaboration）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：将系统结构化为多个独立且专用的 Agent 协作团队，共同实现复杂、多领域目标。通过任务分解原则，将高层目标拆分为子问题并分配给具备相应能力的 Agent。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">协作形式</span></strong><span leaf="">：顺序交接、并行处理、辩论与共识、层级结构、专家团队、批评 - 审查者模式。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent 关系与通信结构</span></strong><span leaf="">：单 Agent、网络型、监督者、工具型监督者、层级型、定制型。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：Crew AI 示例中，研究员 Agent 和写作者 Agent 协作撰写博客。Google ADK 示例展示了层级、循环、顺序、并行 Agent 以及“Agent 即工具”模式。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：复杂研究与分析、软件开发、创意内容生成、金融分析、客户支持升级、供应链优化、网络分析与修复。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：通过分工与协同实现集体优势，使多 Agent 系统的整体性能远超任何单一 Agent。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">8. 记忆管理（Memory Management）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 保留并利用过去交互、观察和学习经验的信息能力。分为短期记忆（上下文窗口中的临时信息）和长期记忆（持久存储在外部知识库，如向量数据库）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">短期记忆</span></strong><span leaf="">：LLM 上下文窗口，保存当前或最近交互信息。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">长期记忆</span></strong><span leaf="">：持久存储在外部，通过语义搜索检索。分为语义记忆（事实）、情景记忆（经历）和程序性记忆（规则）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：Google ADK 通过 Session（聊天线程）、State（临时数据）和 MemoryService（长期知识库）管理记忆。LangChain 和 LangGraph 提供 ConversationBufferMemory、ChatMessageHistory 等工具。Vertex Memory Bank 提供托管的长期记忆服务。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：聊天机器人与对话式 AI、任务型 Agent、个性化体验、学习与提升、信息检索（RAG）、自主系统。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：让 Agent 能够维护历史、学习、个性化交互，并处理复杂的时序问题，超越基础问答能力。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">9. 学习与适应（Learning &amp; Adaption）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 通过根据新经验和数据改变思维、行为或知识来实现学习与适应。使 Agent 能够从简单执行指令，逐步变得更智能。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">学习类型</span></strong><span leaf="">：强化学习（PPO、DPO）、监督学习、无监督学习、少样本/零样本学习、在线学习、基于记忆的学习。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">案例分析</span></strong><span leaf="">：自我改进编码 Agent（SICA）通过迭代优化自身代码，提升编码能力。Google AlphaEvolve 结合 LLM、自动评估和进化算法发现和优化算法。OpenEvolve 利用 LLM 迭代优化代码。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：个性化助手 Agent、交易机器人 Agent、应用 Agent、机器人与自动驾驶 Agent、反欺诈 Agent、推荐系统 Agent、游戏 AI Agent、知识库学习 Agent。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：提升 Agent 能力的关键，使其能够突破预设参数，通过经验和环境交互自主改进，有效应对新情况并在无需持续人工干预的情况下优化自身表现。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">10. 模型上下文协议（Model Context Protocol, MCP）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：MCP 是一项开放标准，为 LLM 与外部应用、数据源和工具的通信提供标准化接口，实现一致性和可预测集成的关键机制。它采用客户端 - 服务器架构，服务器暴露数据、Prompt 和可执行功能，客户端（LLM 宿主应用或 AI Agent）消费这些能力。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">与工具函数调用的区别</span></strong><span leaf="">：函数调用是 LLM 直接请求预定义工具，是专有的一对一通信。MCP 则是通用框架，目标是建立一个任何合规工具都能被任何合规 LLM 访问的生态系统，促进互操作性、可组合性和复用性。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">更多考量</span></strong><span leaf="">：工具、资源与 Prompt 的区别；可发现性；安全性；实现复杂度；错误处理；本地与远程服务器；按需与批量处理；传输机制。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：ADK 示例演示 Agent 配置 MCP 文件系统服务器、连接 UVX MCP 服务器、与 FastMCP 服务器的集成。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：数据库集成、生成式媒体编排、外部 API 交互、推理型信息抽取、自定义工具开发、标准化 LLM-应用通信、复杂流程编排、物联网设备控制、金融服务自动化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：为 LLM 与外部资源的对接提供标准化接口，解决每次集成都需要定制开发的问题，是实现复杂、互联 AI 系统不可或缺的标准化通信框架。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">11. 目标设定与监控（Goal Setting &amp; Monitoring）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：为 Agent 设定具体目标，并赋予其追踪进度、判断目标是否达成的能力。这使 Agent 能够有明确的方向感，判断自身行为是否有效，从而提升整体效能。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">规划</span></strong><span leaf="">：Agent 根据高层目标，自动或半自动地生成一系列中间步骤或子目标。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例中，Agent 自主生成并优化 Python 代码，通过 AI 判断代码是否达成初始目标，实现迭代优化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：客户支持自动化、个性化学习系统、项目管理助手、自动化交易机器人、机器人与自动驾驶、内容审核。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：为 Agent 提供智能自我管理的基础框架，使其能够自主可靠运行于复杂现实场景，具备主动达成目标的能力。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">12. 异常处理与恢复（Exception Handling &amp; Recovery）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 具备应对突发状况、错误和故障的能力。该模式旨在打造极其坚韧和弹性的 Agent，使其在面对各种困难和异常时，依然能够保持不间断的功能和运行完整性。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">关键方面</span></strong><span leaf="">：错误检测、错误处理（日志记录、重试、备用方案、优雅降级、通知）、恢复（状态回滚、诊断、自我修正、升级处理）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：ADK 示例中，鲁棒位置查询系统包含 primary_handler 和 fallback_handler，实现分层位置查询与异常处理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：客服聊天机器人处理数据库错误、自动化金融交易应对市场异常、智能家居代理解决设备故障、数据处理 Agent 遇到损坏文件、网页爬虫 Agent 遇到网站结构变化、机器人制造业部件错位。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：将 AI 智能体从脆弱不可靠的系统转变为坚实可靠的组件，使其在充满挑战和高度不可预测的环境中高效、弹性运行。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">13. 人类参与环节（Human-in-the-Loop, HITL）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：有意识地将人类认知的独特优势（判断力、创造力、细致理解）与 AI 的计算能力和高效性相结合。确保 AI 在伦理边界内运行，遵循安全协议，并以最佳效果达成目标。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">关键方面</span></strong><span leaf="">：人类监督、干预与纠正、人类反馈用于学习、决策增强、人机协作、升级策略。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Human-on-the-loop</span></strong><span leaf="">：人类专家制定总体策略，AI 负责即时执行以确保合规。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：ADK 示例中，基于 HITL 的技术支持 Agent 在复杂或敏感问题时，可请求人类介入（escalate_to_human 工具）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：内容审核、自动驾驶、金融欺诈检测、法律文档审查、客户支持（复杂问题）、数据标注与注释、生成式 AI 优化、自动化网络管理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：将人类监督、战略输入和协作互动视为不可或缺，确保 AI 系统始终与人类伦理、价值观、目标和社会期望保持一致。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">14. 知识检索（Retrieval Augmented Generation, RAG）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：RAG 模式显著增强了 LLM 的能力，使其在生成响应前能够访问外部知识库。系统通过语义搜索从知识库中检索相关信息，并将其“增强”到原始提示中，再送入 LLM 生成响应。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">核心概念</span></strong><span leaf="">：嵌入、文本相似度、语义相似度与距离、文档分块、向量数据库。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">RAG 的挑战</span></strong><span leaf="">：答案所需信息分散、检索质量（引入噪声）、整合矛盾信息、知识库预处理与同步、性能延迟与成本。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">图 RAG（GraphRAG）</span></strong><span leaf="">：利用知识图谱进行信息检索，通过遍历实体间关系回答复杂问题，提供更具上下文和细致度的答案。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agentic RAG</span></strong><span leaf="">：RAG 的进化版，引入推理和决策层。Agent 主动审查检索结果的质量、相关性和完整性，调和知识冲突，多步推理综合复杂答案，识别知识空缺并调用外部工具。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：Google Search 工具实现 RAG。ADK 利用 Vertex AI RAG 能力。LangChain 示例通过 Weaviate 向量库实现 RAG 流程。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：企业搜索与问答、客户支持与服务台、个性化内容推荐、新闻与时事摘要。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：让 LLM 能够访问并集成外部、最新、特定场景的信息，从而提升输出的准确性、相关性和事实基础，突破 LLM 训练数据的限制。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">15. 智能体间通信（Agent-to-Agent, A2A）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：A2A 协议是一项开放标准，旨在实现不同 AI 智能体框架之间的通信与协作，确保互操作性。它得到了众多科技公司和开源社区的支持。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">核心概念</span></strong><span leaf="">：用户、A2A 客户端（客户端 Agent）、A2A 服务器（远程 Agent）；Agent Card（Agent 的数字身份）；Agent 发现（Well-Known URI、管理型注册表、直接配置）；通信与任务（异步任务、消息、artifact、HTTP/JSON-RPC 2.0 协议、contextId）；交互机制（同步请求/响应、异步轮询、流式更新、推送通知）；安全性（双向 TLS、完整审计日志、Agent Card 声明、凭证处理）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">A2A 与 MCP 对比</span></strong><span leaf="">：MCP 关注 Agent 与外部数据和工具的上下文结构化，而 A2A 专注于 Agent 间的协调与通信。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：ADK Agent 示例演示如何用 Google 认证工具搭建 A2A 服务器。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：多框架协作、自动化工作流编排、动态信息检索。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：使得不同框架构建的 AI 智能体能够高效协作，实现无缝协调、任务委托和信息交换，是构建复杂 AI 解决方案不可或缺的基础。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">16. 资源感知优化（Resource-Aware Optimization）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 在运行过程中动态监控和管理计算、时间和财务资源。其核心是在指定资源预算内实现目标或优化效率，如在更准确但昂贵的模型与更快、低成本模型之间进行选择。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">回退机制</span></strong><span leaf="">：当首选模型不可用时，系统自动切换到默认或更经济的模型，保证服务连续性。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例中，路由 Agent 根据查询长度分流到 Gemini Flash（经济型）或 Gemini Pro（高阶型）。OpenAI 示例将问题分类为 simple、reasoning 或 internet_search，选择最合适且经济的处理路径。OpenRouter 提供统一接口实现自动故障转移和成本优化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">其他资源优化技术</span></strong><span leaf="">：动态模型切换、自适应工具选择、上下文剪枝与摘要、主动资源预测、成本敏感探索、能效部署、并行与分布式计算感知、学习型资源分配策略、优雅降级与回退机制。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：成本优化的 LLM 使用、延迟敏感操作、能效优化、服务可靠性回退、数据使用管理、自适应任务分配。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：确保 Agent 在有限资源下高效运行，提升整体效能和目标达成度。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">17. 推理技术（Reasoning Techniques）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 的高级推理方法，重点关注多步逻辑推理和问题分解。通过在推理阶段分配更多计算资源，提升准确性、连贯性和鲁棒性。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">推理技术</span></strong><span leaf="">：</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">链式思维（Chain-of-Thought, CoT）</span></strong><span leaf="">：引导模型生成一系列中间推理步骤，提升多步推理任务表现。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">树式思维（Tree-of-Thought, ToT）</span></strong><span leaf="">：在 CoT 基础上扩展，探索多条推理路径，支持回溯、自我纠错和多方案评估。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">自我纠错（Self-correction）</span></strong><span leaf="">：Agent 对生成内容进行自我评估和迭代优化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">程序辅助语言模型（PALMs）</span></strong><span leaf="">：将 LLM 与符号推理结合，生成并执行代码。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">可验证奖励强化学习（RLVR）</span></strong><span leaf="">：训练模型生成长推理链，支持自我纠错和回溯。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">ReAct（推理与行动）</span></strong><span leaf="">：将 CoT 推理与 Agent 工具交互结合，形成“思考 - 行动 - 观察”循环。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">CoD（辩论链）</span></strong><span leaf="">：多个模型协作辩论解决问题。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">GoD（辩论图）</span></strong><span leaf="">：将讨论建模为动态非线性网络。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">MASS（多 Agent 系统搜索）</span></strong><span leaf="">：通过多阶段优化，自动探索和优化 MAS 设计空间。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">推理扩展定律</span></strong><span leaf="">：LLM 性能与推理阶段分配计算资源的关系，通过增加计算资源，小模型也能获得优异结果。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：Google 开源 DeepSearch 代码（基于 Gemini 2.5 和 LangGraph），Agent 通过反思推理识别知识空缺并迭代优化答案。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent 如何“思考”</span></strong><span leaf="">：结构化方法，结合推理与行动，通过 LLM 生成“思考”，指导后续行动（搜索、信息检索），直到任务完成。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：复杂问答、数学问题求解、代码调试与生成、战略规划、医学诊断、法律分析。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：使 Agent 能够拆解问题、考虑中间步骤，并得出更稳健、准确的结论，是自主 Agent 发展的基础。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">18. 护栏与安全模式（ &amp; Safety Patterns）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：护栏是确保 Agent 安全、合规、按预期运行的关键机制。它们作为保护层，引导 Agent 行为和输出，防止有害、偏见、无关或其他不良响应。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">实施阶段</span></strong><span leaf="">：输入验证/清洗、输出过滤/后处理、行为约束、工具使用限制、外部内容审核 API、人类介入（Human-in-the-Loop）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">注意事项</span></strong><span leaf="">：可采用计算资源消耗较低的模型作为额外防线，对主模型的输入或输出进行预筛查。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：CrewAI 示例中，policy_enforcer_agent 通过 SAFETY_GUARDRAIL_PROMPT 和 Pydantic 护栏筛查用户输入。Vertex AI 示例展示工具调用前的参数校验回调。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">工程化可靠 Agent</span></strong><span leaf="">：遵循传统软件工程原则（模块化、结构化日志、最小权限原则、检查点与回滚），将 Agent 视为复杂系统。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：客服聊天机器人、内容生成系统、教育助教/辅导员、法律研究助手、招聘与人力资源工具、社交媒体内容审核、科研助手。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：确保 Agent 运行稳健、可信且有益，构建负责任的 AI 系统，降低风险，维护用户信任。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">19. 评估与监控（Evaluation &amp; Monitoring）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 系统性评估自身性能、监控目标进展以及检测运行异常的方法。包括指标定义、反馈回路建立和报告系统实现，确保 Agent 在实际环境中的表现符合预期。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">评估指标</span></strong><span leaf="">：Agent 响应评估（事实正确性、流畅度、语法精度、用户意图符合度）、延迟监控、LLM 交互 Token 用量追踪、LLM 评审（自定义“有用性”指标）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">评估方法对比</span></strong><span leaf="">：人工评估、LLM 评审、自动化指标。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent 轨迹评估</span></strong><span leaf="">：分析 Agent 执行任务时的完整日志，包括决策质量、推理过程和最终结果。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">多 Agent 评估</span></strong><span leaf="">：评估各 Agent 分工和整体协作，如是否有效协作、是否制定并遵循合理计划、是否选择了合适 Agent。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">从 Agent 到高级“承包商”</span></strong><span leaf="">：将 AI Agent 从概率性、易出错系统升级为更确定、可问责的“承包商”，通过正式合同、动态协商与反馈、质量导向迭代执行、分层分解与子合同，实现可客观验证的结果。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Google ADK 框架</span></strong><span leaf="">：支持 Web UI、pytest 集成和命令行自动化评估。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：生产环境性能追踪、A/B 测试优化、合规与安全审计、企业系统治理（AI“合同”）、漂移检测、异常行为检测、学习进度评估。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：保障 Agent 持续性能，实现持续改进、A/B 测试和异常检测，确保 Agent 始终符合目标。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">20. 优先级排序（Prioritization）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 根据任务的重要性、紧急性、依赖关系和既定标准进行评估和排序，确保 Agent 将精力集中在最关键的任务上，从而提升整体效能和目标达成度。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">核心要素</span></strong><span leaf="">：标准定义（紧急性、重要性、依赖关系、资源可用性、成本/收益、用户偏好）、任务评估、调度或选择逻辑、动态优先级调整。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用层级</span></strong><span leaf="">：总体目标选择、规划步骤排序、从可选项中选择下一步行动。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">示例</span></strong><span leaf="">：LangChain 示例中，项目经理智能体自动创建、排序并分配任务，展示了项目管理自动化。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：自动化客户支持、云计算资源调度、自动驾驶系统、金融交易、项目管理、网络安全、个人助理 AI。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：Agent 在面对多重需求、资源有限、时间紧迫、目标可能冲突的真实场景时，能够做出明智决策，有效管理任务和目标。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">21. 探索与发现（Exploration &amp; Discovery）</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">概述</span></strong><span leaf="">：Agent 能够主动寻找新信息、发现新可能性并识别“未知的未知”。其核心在于 Agent 主动进入陌生领域，尝试新方法，并生成新的知识或理解。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Google Co-Scientist</span></strong><span leaf="">：Google Research 开发的科学协作 AI 系统，基于 Gemini LLM，辅助人类科学家进行假设生成、方案完善和实验设计。采用多代理框架，核心代理包括生成代理、反思代理、排序代理、进化代理、邻近代理和元评审代理。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent Laboratory</span></strong><span leaf="">：开源科研工作流框架，旨在增强而非取代人类科学研究。通过专用 LLM 自动化科研各阶段，包括文献综述、实验阶段、报告撰写和知识共享。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">应用场景</span></strong><span leaf="">：科学研究自动化、游戏策略生成、市场调研与趋势发现、安全漏洞发现、创意内容生成、个性化教育与培训。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">重要性</span></strong><span leaf="">：对于在开放式、复杂或快速变化领域中工作的 Agent 至关重要，因为静态知识或预编程方案已无法满足需求。它强调 Agent 扩展自身认知和能力的能力。</span></p><h2 style="font-size:20px;font-weight:bold;color:#333;margin:18px 0 8px 0;padding:0;line-height:1.4;border-bottom:2px solid #007acc;padding-bottom:5px;"><span leaf="">结论：Agentic 设计的未来</span></h2><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本书将 Agent 构建视为技术画布上的艺术创作。21 种 Agentic 设计模式是构建智能系统的工具箱，它们赋予大语言模型的认知能力以可靠性与目标性，使其超越简单的响应式模型，成为主动、目标导向、具备复杂推理与行动能力的 Agent。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">Agentic 核心原则回顾</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">核心执行与任务分解</span></strong><span leaf="">：Prompt Chaining（线性分步拆解）、Routing（条件逻辑选择路径）、Parallelization（并行执行提升效率）、Planning（制定多步计划）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">与外部环境交互</span></strong><span leaf="">：Tool Use（函数调用，调用外部 API/数据库）、Knowledge Retrieval（RAG，查询知识库整合信息）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">状态、学习与自我提升</span></strong><span leaf="">：Memory Management（短期上下文、长期知识）、Reflection 与 Self-Correction（自我批判、迭代优化）、Learning and（根据反馈和经验进化）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">4. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">协作与沟通</span></strong><span leaf="">：Multi-Agent Collaboration（多个专职 Agent 协同）、Inter-Agent Communication (A2A) 与 Model Context Protocol (MCP)（规范 Agent 与工具的信息交换）。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">这些模式的组合是 Agentic 设计的真正力量，将单一能力转化为强大的自主系统。</span></p><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">展望未来</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">1. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">更高级的自主性与推理能力</span></strong><span leaf="">：Agent 需应对模糊性、进行抽象与因果推理，甚至具备常识。将从“人类参与”转变为“人类监督”。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">2. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">Agent 生态与标准化</span></strong><span leaf="">：将出现开放平台与市场，MCP 和 A2A 等协议将成为行业标准。</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">3. </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">安全性、对齐性与鲁棒性</span></strong><span leaf="">：需确保 Agent 的学习与适应不会偏离初衷，抵御攻击，应对不可预测的现实场景，需要新的“安全模式”和工程规范。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><strong style="color:#007acc;font-weight:bold;"><span leaf="">🔗 更多精彩内容</span></strong></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🌐 个人网站：jimmysong.io</span></p><p style="font-size:16px;line-height:1.6;color:#333;margin:0.1em 0;padding-left:0px;text-align:left;"><span leaf="">• 🎥 Bilibili：space.bilibili.com/31004924</span></p><blockquote><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">💫 </span><strong style="color:#007acc;font-weight:bold;"><span leaf="">如果这篇文章对你有帮助，欢迎点赞、分享给更多朋友！</span></strong></p></blockquote><h3 style="font-size:18px;font-weight:bold;color:#333;margin:16px 0 6px 0;padding:0;line-height:1.4;border-left:4px solid #007acc;padding-left:10px;"><span leaf="">版权声明</span></h3><p style="font-size:16px;line-height:1.6;color:#333;margin:0.8em 0;text-align:left;"><span leaf="">本文首发于 jimmysong.io，遵循 CC BY-NC-SA 4.0 协议。转载请注明出处并保留作者信息。</span></p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p>


<p><a href="https://jimmysong.io/blog/agentic-design-patterns-review/">阅读原文</a></p>
<p><a href="https://rss.koyangslash.workers.dev/link-proxy/?k=d643de63&amp;r=1&amp;u=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwNDIzODExOA%3D%3D%26mid%3D2650170965%26idx%3D1%26sn%3D79b5ac3e1b5b2e9be094e64dabfc5353">跳转微信打开</a></p>
]]></content:encoded>
      <pubDate>Mon, 15 Sep 2025 11:05:00 +0800</pubDate>
    </item>
  </channel>
</rss>